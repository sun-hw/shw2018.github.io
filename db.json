{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","path":"medias/avatars/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","path":"medias/avatars/cww97.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/babyq.png","path":"medias/avatars/babyq.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/fun4go.png","path":"medias/avatars/fun4go.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hael.jpg","path":"medias/avatars/hael.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hwsun.jpg","path":"medias/avatars/hwsun.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","path":"medias/avatars/huaji.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","path":"medias/avatars/hzwer.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","path":"medias/avatars/ids2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ivipc.png","path":"medias/avatars/ivipc.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","path":"medias/avatars/kewlgrl.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","path":"medias/avatars/ldy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mpy634.png","path":"medias/avatars/mpy634.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","path":"medias/avatars/qiqiang.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.bmp","path":"medias/reward/alipay.bmp","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.bmp","path":"medias/reward/wechat.bmp","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","path":"medias/avatars/antnlp.ico","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","path":"medias/avatars/duyupei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","path":"medias/avatars/gsy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","path":"medias/avatars/liyucheng.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","path":"medias/avatars/lijiaqian.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/michael.jpg","path":"medias/avatars/michael.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","path":"medias/avatars/mouse.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","path":"medias/avatars/qiandongwei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","path":"medias/avatars/sunchangzhi.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/spacesac.png","path":"medias/avatars/spacesac.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","path":"medias/avatars/taowei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","path":"medias/avatars/xuzhongyou.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","path":"medias/avatars/zhangting.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","path":"medias/avatars/zhaokangzhe.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","path":"medias/avatars/zzw.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","path":"medias/avatars/mizunashi.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","path":"medias/avatars/lyn-draw.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lzh.png","path":"medias/avatars/lzh.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qianqian.png","path":"medias/avatars/qianqian.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","path":"medias/avatars/jingjing.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","path":"medias/avatars/jitao.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","path":"medias/avatars/zhangyi.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/7.jpg","path":"medias/banner/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/tiantangdemogui.mp3","path":"medias/music/tiantangdemogui.mp3","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/daoshu.mp3","path":"medias/music/daoshu.mp3","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/yiluxiangbei.mp3","path":"medias/music/yiluxiangbei.mp3","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"9e6f55d7c01343e1ffd36d55860587fd269d6cb6","modified":1564651052000},{"_id":"themes/matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1564651052000},{"_id":"themes/matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1564651052000},{"_id":"themes/matery/README.md","hash":"c46e2a112951e49af60ad6ad7a2893738e3e413d","modified":1564651052000},{"_id":"themes/matery/README_CN.md","hash":"302393db1fa6c0911558402ab8c75745516fa5ed","modified":1564651052000},{"_id":"themes/matery/_config.yml","hash":"90086a377530f1bff9a3469044dc1b9f1eea02ba","modified":1565021309817},{"_id":"source/AV/index.md","hash":"4b834d4e44041c8316a119df0f413e4ad35f30a9","modified":1565024827928},{"_id":"source/_data/musics.json","hash":"db4044645bf8204fafd5c4e133facd014f1d4605","modified":1564651052000},{"_id":"source/_data/friends.json","hash":"613237cec78a539c00fb91d9d49249b7a1457dd7","modified":1564875832945},{"_id":"source/_posts/algorithm-code-tricks.md","hash":"c519fc1ff8ec16052c4afd85b2ebf019f1e81455","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary.md","hash":"a447748c315e2b479538cd4701d184596fd7012a","modified":1564651052000},{"_id":"source/_posts/ecnu-ppt.md","hash":"0a6c561210a03178c5cacb89b9dc224fa988e0a2","modified":1564651052000},{"_id":"source/_posts/latex-pdf.md","hash":"b46d9ac325b523eae61aba4e8fd5d3fe0140e4dc","modified":1564881426313},{"_id":"source/_posts/hexo-blog.md","hash":"c0d362dcf82c12a71e61da4cb1f899b49d9ec92a","modified":1564881402792},{"_id":"source/_posts/sublime.md","hash":"04d8f7f5e37355715e5d9c1830d5aed40141b121","modified":1564651052000},{"_id":"source/_posts/wordcloud.md","hash":"30095c6a2f442f53895be2d72d65bc74422f6664","modified":1564651052000},{"_id":"source/about/index.md","hash":"3a47cc8cf96ab7f6214f57ab3c8bdf1036569552","modified":1564871711815},{"_id":"source/archives/index.md","hash":"30a0e3a59be650ae34d7bb86ac7da53e21e9cf5b","modified":1564651052000},{"_id":"source/categories/index.md","hash":"67687d3f908737f7c680f096b3e80d9412f23b0e","modified":1564651052000},{"_id":"source/contact/index.md","hash":"90938c4c3fafef4c472d9b4e1d9dd5652a749055","modified":1564651052000},{"_id":"source/friends/index.md","hash":"b9066c1913a04e4e743fe9c3adabd8c380930d2f","modified":1564651052000},{"_id":"source/music/index.md","hash":"a44661b7eac1ba55a626f2083b099babf98e7293","modified":1564909184382},{"_id":"source/tags/index.md","hash":"fe3d7ecc91b81b062a6a60c06859dc24b9d704ac","modified":1564651052000},{"_id":"themes/matery/languages/zh-CN.yml","hash":"4fd8aff7506cd282b3735a48bc2d77a6b3ea3e7e","modified":1564651052000},{"_id":"themes/matery/languages/default.yml","hash":"08b43a89b366b45a84b572da8e7139104829df32","modified":1564651052000},{"_id":"themes/matery/layout/404.ejs","hash":"40c4af57aef2b77611042782e9f3b395f217408f","modified":1564651052000},{"_id":"themes/matery/layout/about.ejs","hash":"638b7dbb6fe57752a53b6596eff886933a1bc6b7","modified":1564909214081},{"_id":"themes/matery/layout/archive.ejs","hash":"aa2057ece0f44d52b2923c7268bc917c438832ac","modified":1564651052000},{"_id":"themes/matery/layout/av.ejs","hash":"ec8e02eadb2185025090397f383c03914a7f1aac","modified":1565024964398},{"_id":"themes/matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1564651052000},{"_id":"themes/matery/layout/category.ejs","hash":"b1f38aa4fa012f2fd9cdffc186f85c58694ad347","modified":1564651052000},{"_id":"themes/matery/layout/contact.ejs","hash":"6c1dedafc37c7dd92d0afb7a39cf3254c9a16573","modified":1564651052000},{"_id":"themes/matery/layout/friends.ejs","hash":"23ec2f3d567683c7e02e275f7275b89948cf61af","modified":1564651052000},{"_id":"themes/matery/layout/index.ejs","hash":"005a8ec866c2dee25721a588801c744b746b9578","modified":1564926793130},{"_id":"themes/matery/layout/layout.ejs","hash":"10f20cf017af6f46c035e5f7080fa4b70a9dd239","modified":1564651052000},{"_id":"themes/matery/layout/post.ejs","hash":"f9662a96d0f497a3b2731472b8ad871c7cbdf13a","modified":1564651052000},{"_id":"themes/matery/layout/tag.ejs","hash":"4deec63d5fa5df3b5ab1c4a9b8b8ae49ac30b1e8","modified":1564651052000},{"_id":"themes/matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1564651052000},{"_id":"themes/matery/source/favicon.png","hash":"5bc1bb76e65cb112a356430ab71fbd15d30bf387","modified":1564736001239},{"_id":"source/_posts/algorithm-code-tricks/3337-1.jpg","hash":"a0a35453b50ee3879d1d733e7962fe664da89770","modified":1564651052000},{"_id":"source/_posts/algorithm-code-tricks/3337-2.jpg","hash":"422e25f7a14fdeb9cad05037e5930a0a70d8ad0e","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/bi_lstm.jpg","hash":"3034b96bb5c0f5cdfda18f232588512d3b1a7bec","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/bottom_up.jpg","hash":"1f910be02546dad14bea9ed0ef20773ce74f80fb","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/bottom_up_example.jpg","hash":"638162ad47de9e46aec43727bcaa2ba494bd5eb7","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/in_order.jpg","hash":"dcb16a1904b0b6167e47b8afbb93d473099ecbcc","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/composition.png","hash":"538491cb9a200b387080218dd7eac1b4d9374b1a","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/in_order_example.jpg","hash":"bf3e1a67c7b64a061001ce1345ffade39934b755","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/label_oracle.png","hash":"019b9aa7f01afcdb35e5d9bfdfab171ad7dc8bcf","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/multi_headed_attention.jpg","hash":"47669cd77b6c688f9971526a668fb901ea347527","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/single_attention.jpg","hash":"138646f0a6138ac75a0cabbb89ba6a9728695f80","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/span_based_bottom_up_tree.png","hash":"0a5062c924fee9dc2c61f28d48f0fb7f73e748a9","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/structural_oracle.png","hash":"99cedbc9173600c819ed8e12c637c6ae0b241844","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/syntactic_distance_example.jpg","hash":"1eaff00cffc52db1a8b88f67d9b9a4260a697aa3","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/top_down.jpg","hash":"a1a4ef127208c14e2463028132792810a198e1d6","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/top_down_example.jpg","hash":"87008d6318973baa9f5e499c39f9195a0083a501","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/transition_framework.png","hash":"59b2cd8386ef4c428441c70ca64f76c974894559","modified":1564651052000},{"_id":"source/_posts/hexo-blog/1.jpg","hash":"ca247c820179e3c10e3009215a89bde6ff49fd6a","modified":1564651052000},{"_id":"source/_posts/hexo-blog/10.jpg","hash":"e74a46614b596918677641930c6268b45a9a2d71","modified":1564651052000},{"_id":"source/_posts/hexo-blog/13.jpg","hash":"265522726740882b738cc6696a6a94b21de4f499","modified":1564651052000},{"_id":"source/_posts/hexo-blog/14.jpg","hash":"9b13137196ed0e0f93546e502d03536ad3fa50cf","modified":1564651052000},{"_id":"source/_posts/hexo-blog/15.jpg","hash":"7b1ff0147b5d84e258cf301eb9e8d8152227ee51","modified":1564651052000},{"_id":"source/_posts/hexo-blog/16.jpg","hash":"11052f5e8146a3d38f22002e20f0172a8b1ca23f","modified":1564651052000},{"_id":"source/_posts/hexo-blog/18.jpg","hash":"4259425fd6a59a8e1c914c3f3105555d87f96f4d","modified":1564651052000},{"_id":"source/_posts/hexo-blog/19.jpg","hash":"2207c8147f6334e2e2eedd70279c0984094a01f5","modified":1564651052000},{"_id":"source/_posts/hexo-blog/2.jpg","hash":"92be8c2267281c00990b04ec687c5f4a152b7128","modified":1564651052000},{"_id":"source/_posts/hexo-blog/20.jpg","hash":"7e6022459b17ddc05d61e4c6a88517d294a5848e","modified":1564651052000},{"_id":"source/_posts/hexo-blog/3.jpg","hash":"c3b9a6c76d660c297fba1868a6f34989abd685ec","modified":1564651052000},{"_id":"source/_posts/hexo-blog/4.jpg","hash":"ff4993e70a9a81a29fbbd836cc43b7a1daf6e2d7","modified":1564651052000},{"_id":"source/_posts/hexo-blog/6.jpg","hash":"6ec043f8250a5fa0fcc2f3a8e8167655eabd88ba","modified":1564651052000},{"_id":"source/_posts/hexo-blog/7.jpg","hash":"c7afa32a6363549cef23b622e539a84625615db4","modified":1564651052000},{"_id":"source/_posts/hexo-blog/5.jpg","hash":"9435ca71f3593101384c4ff69c1ce57a90c367a2","modified":1564651052000},{"_id":"source/_posts/hexo-blog/8.jpg","hash":"59c13e2fbc8d37ca0087d8f25a79c4e5feeb0f91","modified":1564651052000},{"_id":"source/_posts/hexo-blog/9.jpg","hash":"185d3bfea5d5c844abdc8925cf0ab9a9767ba168","modified":1564651052000},{"_id":"source/_posts/wordcloud/2.jpg","hash":"e7c5920ed3efb7c9d6f38eee22cc6c3465652bbf","modified":1564651052000},{"_id":"source/_posts/wordcloud/5.jpg","hash":"d58b3ed470bb0b936ddd9dd4ddcfe9e3880ff0cd","modified":1564651052000},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"9fd521dd3893259f78272e46f6c78be479befd36","modified":1564909218471},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"8c91d2088c9bb323246b054d4940bde6cead6828","modified":1564651052000},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1564651052000},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"a0f53d1a9b579d52e52ccad8c6e330bf3b89547e","modified":1564651052000},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"c0c84ed24979f5e9cb9f81c503389ce199e89fa6","modified":1564872758358},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"c07893e507971db87a3d3509cbd1c0440ab1b691","modified":1564651052000},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1564651052000},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"0abfb51dc80ad063fb2118bee28de6bb8d99ed4e","modified":1564651052000},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1564651052000},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"daf14dd25eaeb14329f32ef6bf1eee0f8686d173","modified":1564651052000},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"6583c00323d891a03343b6a621a0484a68d74f8a","modified":1564651052000},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"e253c813b3ee5ed924700a95133741802e58adc5","modified":1564651052000},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"39b3eb68bc57c4a02f63ad7610ee0bd7fb673574","modified":1564910145008},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1564651052000},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"b6c4623a5513b7ce1719656af5bb283785c39699","modified":1564912085540},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"68a24cad2b2049c4dc3a250aa30bf4256f9e50cb","modified":1564651052000},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"5b423384b9c0fe77acc4247a8a85304022e5bd2a","modified":1564651052000},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"d4114c22126704cc1754d6d28cb00aec020b428b","modified":1564651052000},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"86901bca1d63b3b4d276e5e54e807b80f23f6041","modified":1564651052000},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"2b2fe8e8e94e65c52a4dbd454168e9b9df6baf10","modified":1564651052000},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"c2592669b44936eaff28a7715636eaf979b7f144","modified":1564651052000},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"3d61d4acde8d27a63072145130d2661df8c05df7","modified":1564651052000},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"3dff4f6a73973b0b32f40604244255f3c2a5bb78","modified":1564651052000},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"942609b9240d5c8c09b24562fc8fb31eabe1cae4","modified":1564651052000},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"34f8e4250bb66012026aa50686a7c89a0414ca1b","modified":1564651052000},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"e53f4c9cf677c08dd6d7132caf78b3fe433bda00","modified":1564651052000},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"90527186fc8ed906eb1f20b59bc7f86caab9087b","modified":1564651052000},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"f5561dd7d53d68897a33090bf677719213459b19","modified":1564651052000},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"a5a10d6fa66a389d0253d7a52e0a646af6e8e9be","modified":1564651052000},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"684450f0b42f89ab70370c5248b34e55b7adf6fc","modified":1564651052000},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"fa265ce162941995e0a11faeac4691e5bb59a402","modified":1565013544704},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"f81eb2891bea326908057029e2a063001371ba9b","modified":1564651052000},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"b9bf70ec5d97b0e14bb1b4f60f92db7680be5949","modified":1564651052000},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"bb8609e8739c7625e5ebfc1998acfac259386273","modified":1564651052000},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"0b0a3eb6af29bf0d55d535958c44b01c0f18d10d","modified":1564651052000},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"af0604623db37ef800bb7ad48028d18d99efbbc3","modified":1564651052000},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"babaa0cb32146870785449c70748721235e4eff0","modified":1564651052000},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"a3725f0e3a405acb595b04630a27765b537fb580","modified":1564651052000},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"3a991d7292e0cf98e0eb7d899d0aba5a3ad8cf03","modified":1564651052000},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"2879765ade67ec333aca7a29f134bf216e8320b8","modified":1565000851318},{"_id":"themes/matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1564651052000},{"_id":"themes/matery/source/css/matery.css","hash":"0e0d09974aa443f8959bd4fa77a2acac3412cbd3","modified":1565023661057},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1564651052000},{"_id":"themes/matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1564651052000},{"_id":"themes/matery/source/js/matery.js","hash":"92f07106944f5ef7cd72e84bb3534513d00eebe1","modified":1564651052000},{"_id":"themes/matery/source/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1564651052000},{"_id":"themes/matery/source/medias/avatar.jpg","hash":"b7f8ca0c682f95d93f002c845aafbcb508ec2b0f","modified":1564857417066},{"_id":"themes/matery/source/medias/logo.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/binarized_syntactic_tree.png","hash":"2a02fb2ca94a74f822f2b1bf4ed8060ffe8eeac9","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/chart_based.png","hash":"31079c81252844826b3bd2ac53ce1ae0eac501d7","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/results.jpg","hash":"02a515bada08b0b10cbe61447741121b9fcb5e56","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/span_based_bottom_up.png","hash":"ace34948b1f4690ae8ef57be0f17dd2f87234d4f","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/span_based_bottom_up_example.png","hash":"724d6fb737b8e842f0604d2a50115471a328585d","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/syntactic_tree.png","hash":"cfcb94aaad70f50d7e336f10fda9450cc3a051a7","modified":1564651052000},{"_id":"source/_posts/hexo-blog/11.jpg","hash":"ddf41b537f6e6e95d2192b84ed3208c1be9b4bfd","modified":1564651052000},{"_id":"source/_posts/hexo-blog/17.jpg","hash":"12331a0bb13ad1a35859a95b83a9ab76683fb6f6","modified":1564651052000},{"_id":"source/_posts/hexo-blog/21.jpg","hash":"807ad483d0660f6dd82753ba804cdc1c026a3151","modified":1564651052000},{"_id":"source/_posts/latex-pdf/1.jpg","hash":"584247a929b25b2882f2210fa3d293174a3d68fa","modified":1564651052000},{"_id":"source/_posts/latex-pdf/2.jpg","hash":"0f543fdc1d349d9a088fcc82a3a13d801352bc5a","modified":1564651052000},{"_id":"source/_posts/latex-pdf/3.jpg","hash":"27dc46db2469da34781ac82d9e150fc1c6f72d8f","modified":1564651052000},{"_id":"source/_posts/latex-pdf/5.jpg","hash":"16f7b34189b344b7f3d9c6ca32088b565e5b0a92","modified":1564651052000},{"_id":"source/_posts/hexo-blog/12.jpg","hash":"ebaa2a0db37495492da2dbe1493fc0d1afc85189","modified":1564651052000},{"_id":"source/_posts/sublime/sublime.png","hash":"ec02cf02afa67afbcd7f6c4772639782563ebe03","modified":1564651052000},{"_id":"source/_posts/wordcloud/4.jpg","hash":"9817f92fd2fb1ac5283bbb7a057dccfbdc11bc21","modified":1564651052000},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1564651052000},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1564651052000},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1564651052000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1564651052000},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1564651052000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1564651052000},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1564651052000},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1564651052000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1564651052000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1564651052000},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1564651052000},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1564651052000},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1564651052000},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1564651052000},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1564651052000},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","hash":"6850c3643f81caf79c8be7c454a501f0d3962e14","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/hwsun.jpg","hash":"688b39f795c09d0e7663414d50f217a1fe63e7e4","modified":1564683502630},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/ivipc.png","hash":"5fb301649e0db31fc95757f9cc3821f7ac776633","modified":1564861816515},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1564651052000},{"_id":"themes/matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1564857417077},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1564588293000},{"_id":"themes/matery/source/medias/reward/alipay.bmp","hash":"67f928bce50922bc3e6f9c426531437b938e787d","modified":1564731043984},{"_id":"themes/matery/source/medias/reward/wechat.bmp","hash":"438fdba034a289a8964a57615e9ed03aa8f7adb9","modified":1564730977426},{"_id":"source/_posts/latex-pdf/4.jpg","hash":"74aedf6718772123e95291100ac12e2e440bbadf","modified":1564651052000},{"_id":"source/_posts/sublime/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564651052000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1564651052000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1564651052000},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1564651052000},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1564651052000},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"031c1a5640d64ab3b829395ad5a7596b9fb122e6","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1564651052000},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1564588293000},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1564588293000},{"_id":"source/_posts/ecnu-ppt/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1564651052000},{"_id":"source/_posts/ecnu-ppt/1.png","hash":"df0b35cf3ba0dbdbdd4ee7e194ce1e93938e4c8a","modified":1564651052000},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1564651052000},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1564651052000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1564651052000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1564651052000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1564651052000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1564651052000},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1564651052000},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1564651052000},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1564651052000},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1564651052000},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1564651052000},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"80ae4aa0dba3634dd9bf59586d541d2dd8d8191c","modified":1564651052000},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1564651052000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1564651052000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1564651052000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1564651052000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1564651052000},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1564651052000},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1564651052000},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1564651052000},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1564651052000},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1564651052000},{"_id":"source/_posts/wordcloud/3.jpg","hash":"89254b470e398cd2ecf81e77b2254dd1e2b4be1a","modified":1564651052000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1564651052000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1564651052000},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1564651052000},{"_id":"source/_posts/wordcloud/1.png","hash":"61eb49a6b221ca3cc2443e9554e3255486817722","modified":1564651052000},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"c2980f75f2c047d0957e3c8227b3f8d84e67f752","modified":1564651052000},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"a9e8e4566baf93f24547a87fcc2b6e27a3f751a7","modified":1564651052000},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"8e3e0f116faba9997d0dfb760cb17e7be72a4bd0","modified":1564651052000},{"_id":"source/_posts/hexo-blog/header.jpg","hash":"41f4966fd962f6a37af870da805a3722a60ff20d","modified":1564651052000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1564651052000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1564651052000},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"fcb19134a4186b2a298e7aba2a14bf2e797c2a63","modified":1564651052000},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1564651052000},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"8835aa2f200e103c3887c8201972cae4fcc7d044","modified":1564879896377},{"_id":"themes/matery/source/medias/banner/7.jpg","hash":"c006076870d7c2c59a8886ecd3ece65721932485","modified":1564879914676},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1564651052000},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"8ef4bb2ac995a6d7a2ec2b7384af1293c2ecf687","modified":1564879867751},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1564651052000},{"_id":"source/_posts/constituent-parsing-summary/header.jpg","hash":"fb9880a4a0af48937207098da1446966c35d326d","modified":1564651052000},{"_id":"source/_posts/latex-pdf/header.jpg","hash":"16202f2dfa34e3b685219294e418cf58fbab64d9","modified":1564651052000},{"_id":"source/_posts/algorithm-code-tricks/header.jpg","hash":"0ac255cfb6bbd62e09c15967828262bf450239bb","modified":1564651052000},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"0ac255cfb6bbd62e09c15967828262bf450239bb","modified":1564651052000},{"_id":"themes/matery/source/medias/music/tiantangdemogui.mp3","hash":"3e9a91d47c673303cfb7745141fcb2372a78b938","modified":1564651052000},{"_id":"themes/matery/source/medias/music/daoshu.mp3","hash":"b5439266629548f6301d5844282bb4ffd3d5ad06","modified":1564651052000},{"_id":"themes/matery/source/medias/music/yiluxiangbei.mp3","hash":"19109e0e2d8a9dc1e118f54f05394096144210fd","modified":1564651052000},{"_id":"public/baidusitemap.xml","hash":"6baa32f23caa8790dfb6ef3070bb5c3edb29cf27","modified":1565029964283},{"_id":"public/sitemap.xml","hash":"f6fe99ae1a42cd559e0e68a219e142a5d4108d30","modified":1565029964284},{"_id":"public/search.xml","hash":"b8ae11c039de560a4368195a3d7afaa1fa6315a6","modified":1565029964736},{"_id":"public/atom.xml","hash":"baa62a1ff42e0f4c6a3bc6291fab56c063ff87fe","modified":1565029964848},{"_id":"public/404.html","hash":"de761f81cb0e432137e51a5751f092532ed79515","modified":1565029964873},{"_id":"public/AV/index.html","hash":"6cac1394c0a1ac43c37ec4e74f78bfaeb9c6027e","modified":1565029964873},{"_id":"public/archives/index.html","hash":"8f7a98ed691b34a102da9f53a62b36d39561c6f8","modified":1565029964873},{"_id":"public/categories/index.html","hash":"2cae4c14fd4b787b4eeebab71e2b08f3329314ab","modified":1565029964873},{"_id":"public/about/index.html","hash":"976aa413766172f5d3028714b566855ff94bae40","modified":1565029964873},{"_id":"public/contact/index.html","hash":"3600cfcc1da3b40b83f11081dbdc2021d5e51adc","modified":1565029964873},{"_id":"public/music/index.html","hash":"425e2133421a05addf542fc733b338d83c8454f8","modified":1565029964873},{"_id":"public/friends/index.html","hash":"5080b0f584401b9179b66e3f3761e8a83830adee","modified":1565029964874},{"_id":"public/tags/index.html","hash":"178c640515175cdc793de600e5cc97340d1aa826","modified":1565029964874},{"_id":"public/2019/07/27/wordcloud/index.html","hash":"465d298416daaedd2a9fa4d770fab43eb8921892","modified":1565029964874},{"_id":"public/2019/07/12/algorithm-code-tricks/index.html","hash":"77507672319b44dfca2f2739aeb343798a3a77f7","modified":1565029964874},{"_id":"public/2019/01/13/latex-pdf/index.html","hash":"81605c99fa07d7819405d6d12611c2ee62427570","modified":1565029964874},{"_id":"public/2018/09/26/constituent-parsing-summary/index.html","hash":"016ad971e2bb7952af27ce624799dd04865bb02f","modified":1565029964874},{"_id":"public/2018/04/13/hexo-blog/index.html","hash":"bbe6475be6d624bfd6e6ee1a8b29efe2455a69b4","modified":1565029964874},{"_id":"public/2017/12/29/ecnu-ppt/index.html","hash":"f0fda89db09c6ecdef14028fdfeaf13e4a9a9983","modified":1565029964874},{"_id":"public/archives/2017/index.html","hash":"de97286ad1692e8b6b39a5aa51db1ab9f45943e4","modified":1565029964874},{"_id":"public/2017/10/02/sublime/index.html","hash":"07a642f2470487a3a153fb0aefd29ab3a3615a71","modified":1565029964874},{"_id":"public/archives/2017/10/index.html","hash":"d78c3cad5037646b70675f53a8bd6b2c64e31fe2","modified":1565029964874},{"_id":"public/archives/2017/12/index.html","hash":"03b15e4ea6b7bc76e4afa4e0e07a250e8e4c5efd","modified":1565029964874},{"_id":"public/archives/2018/index.html","hash":"336d2fe1fa4696ca1b5b5d43a7afcfecdcc6e21c","modified":1565029964874},{"_id":"public/archives/2018/04/index.html","hash":"f47b092e1a6955874e9e52be0f1098390c613c3c","modified":1565029964874},{"_id":"public/archives/2018/09/index.html","hash":"48fc4a88d866d0e719a5758e1cf73e9efd9f3ce7","modified":1565029964874},{"_id":"public/archives/2019/index.html","hash":"85d9f4de1c33d0db4d31bf37cf2be4afad6915af","modified":1565029964874},{"_id":"public/archives/2019/01/index.html","hash":"ed6b040df48ee858e0aed221f217ac6a806ad8c7","modified":1565029964874},{"_id":"public/archives/2019/07/index.html","hash":"2812104657ca504e1b3d3522120a684a059fae5a","modified":1565029964875},{"_id":"public/categories/程序设计/index.html","hash":"21f17264492a5ea05cb1418badef48c30ba1ac1e","modified":1565029964875},{"_id":"public/categories/句法分析/index.html","hash":"786de0700053d36abe0b7142ee77f166a887f1f5","modified":1565029964875},{"_id":"public/categories/模板/index.html","hash":"33c5ee0d77d4637bbd5dec62455aa7f60c64cb9c","modified":1565029964875},{"_id":"public/categories/软件安装与配置/index.html","hash":"b09d8c3c3bd91cb9ac5361f88df3247905d21e69","modified":1565029964875},{"_id":"public/index.html","hash":"d655c5b895bf665d1081684e6f51e7f9b6b41db6","modified":1565029964875},{"_id":"public/tags/算法/index.html","hash":"9131b806497d335503a1131995a08c2b7c369ca1","modified":1565029964876},{"_id":"public/tags/机试/index.html","hash":"91d05cd6dfa78660e16def2cd3358ddbf09c5f8f","modified":1565029964876},{"_id":"public/tags/NLP/index.html","hash":"2c20eb2c8b8531c5cd4ba445e181d5a23cb47653","modified":1565029964876},{"_id":"public/tags/深度学习/index.html","hash":"dd7188d3b97e5881f14ad0d5cf74797946683c22","modified":1565029964876},{"_id":"public/tags/神经网络/index.html","hash":"53ab12c3249c1840761d6b9e5fb781885eb4a219","modified":1565029964876},{"_id":"public/tags/句法分析/index.html","hash":"88feea4121691fd55d1321889749e58e84965b19","modified":1565029964876},{"_id":"public/tags/LaTeX/index.html","hash":"92378d21040e171336e9b8b9164e4c97a977cf17","modified":1565029964876},{"_id":"public/tags/Beamer/index.html","hash":"dbab60a94e0906edcfb2412c0a8cc70deeed491b","modified":1565029964876},{"_id":"public/tags/ppt/index.html","hash":"16bb079c0d26dfa1bc875420331167f85d47b47c","modified":1565029964876},{"_id":"public/tags/Sublime/index.html","hash":"80058612b1c6e2f8a292d4986127e605f34a5626","modified":1565029964876},{"_id":"public/tags/词云/index.html","hash":"30c4f7b4afbef14848b7b8a8f007b4b08bb9655e","modified":1565029964876},{"_id":"public/tags/自然语言处理/index.html","hash":"a2d36bb0a921d20eafaa28fc1b97330895460e16","modified":1565029964876},{"_id":"public/tags/Hexo/index.html","hash":"7d1e63691eeab65250b1bfb3d39db192c05335cd","modified":1565029964876},{"_id":"public/tags/Github/index.html","hash":"f797d0363626a22f282b393fc1fd075c7d4843ad","modified":1565029964877},{"_id":"public/tags/博客/index.html","hash":"73e091cf932ace26cec4ee304a378b4bf062f258","modified":1565029964877},{"_id":"public/medias/avatar.jpg","hash":"b7f8ca0c682f95d93f002c845aafbcb508ec2b0f","modified":1565029964877},{"_id":"public/medias/logo.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1565029964877},{"_id":"public/medias/avatars/avatar.jpg","hash":"6850c3643f81caf79c8be7c454a501f0d3962e14","modified":1565029964877},{"_id":"public/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1565029964877},{"_id":"public/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1565029964877},{"_id":"public/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1565029964877},{"_id":"public/medias/avatars/hwsun.jpg","hash":"688b39f795c09d0e7663414d50f217a1fe63e7e4","modified":1565029964877},{"_id":"public/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1565029964877},{"_id":"public/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1565029964877},{"_id":"public/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1565029964877},{"_id":"public/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1565029964877},{"_id":"public/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1565029964877},{"_id":"public/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1565029964877},{"_id":"public/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1565029964877},{"_id":"public/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1565029964877},{"_id":"public/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1565029964877},{"_id":"public/medias/avatars/ivipc.png","hash":"5fb301649e0db31fc95757f9cc3821f7ac776633","modified":1565029964877},{"_id":"public/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1565029964877},{"_id":"public/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1565029964877},{"_id":"public/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1565029964878},{"_id":"public/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1565029964878},{"_id":"public/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1565029964878},{"_id":"public/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1565029964878},{"_id":"public/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1565029964878},{"_id":"public/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1565029964878},{"_id":"public/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1565029964878},{"_id":"public/medias/reward/alipay.bmp","hash":"67f928bce50922bc3e6f9c426531437b938e787d","modified":1565029964878},{"_id":"public/medias/reward/wechat.bmp","hash":"438fdba034a289a8964a57615e9ed03aa8f7adb9","modified":1565029964878},{"_id":"public/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1565029964878},{"_id":"public/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1565029964878},{"_id":"public/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1565029964878},{"_id":"public/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1565029964878},{"_id":"public/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1565029964878},{"_id":"public/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1565029964878},{"_id":"public/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1565029964878},{"_id":"public/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1565029964878},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1565029964878},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1565029964878},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1565029964878},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1565029964878},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1565029964878},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1565029964878},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1565029964878},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1565029964879},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1565029964879},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1565029964879},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1565029964879},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1565029964879},{"_id":"public/favicon.png","hash":"5bc1bb76e65cb112a356430ab71fbd15d30bf387","modified":1565029964897},{"_id":"public/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1565029964897},{"_id":"public/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1565029964901},{"_id":"public/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1565029964902},{"_id":"public/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1565029964902},{"_id":"public/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1565029964902},{"_id":"public/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1565029964902},{"_id":"public/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1565029964902},{"_id":"public/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1565029964902},{"_id":"public/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1565029964902},{"_id":"public/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1565029964902},{"_id":"public/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1565029964902},{"_id":"public/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1565029964902},{"_id":"public/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1565029964902},{"_id":"public/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1565029964902},{"_id":"public/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1565029964903},{"_id":"public/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1565029964903},{"_id":"public/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1565029964903},{"_id":"public/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1565029964903},{"_id":"public/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1565029964903},{"_id":"public/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1565029964903},{"_id":"public/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1565029964903},{"_id":"public/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1565029964903},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1565029964903},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1565029964903},{"_id":"public/2019/07/12/algorithm-code-tricks/3337-1.jpg","hash":"a0a35453b50ee3879d1d733e7962fe664da89770","modified":1565029964903},{"_id":"public/2019/07/12/algorithm-code-tricks/3337-2.jpg","hash":"422e25f7a14fdeb9cad05037e5930a0a70d8ad0e","modified":1565029964903},{"_id":"public/2019/07/27/wordcloud/2.jpg","hash":"e7c5920ed3efb7c9d6f38eee22cc6c3465652bbf","modified":1565029964903},{"_id":"public/2019/07/27/wordcloud/5.jpg","hash":"d58b3ed470bb0b936ddd9dd4ddcfe9e3880ff0cd","modified":1565029964903},{"_id":"public/2018/09/26/constituent-parsing-summary/bi_lstm.jpg","hash":"3034b96bb5c0f5cdfda18f232588512d3b1a7bec","modified":1565029964904},{"_id":"public/2018/09/26/constituent-parsing-summary/bottom_up.jpg","hash":"1f910be02546dad14bea9ed0ef20773ce74f80fb","modified":1565029964904},{"_id":"public/2018/09/26/constituent-parsing-summary/bottom_up_example.jpg","hash":"638162ad47de9e46aec43727bcaa2ba494bd5eb7","modified":1565029964904},{"_id":"public/2018/09/26/constituent-parsing-summary/in_order.jpg","hash":"dcb16a1904b0b6167e47b8afbb93d473099ecbcc","modified":1565029964904},{"_id":"public/2018/09/26/constituent-parsing-summary/in_order_example.jpg","hash":"bf3e1a67c7b64a061001ce1345ffade39934b755","modified":1565029964904},{"_id":"public/2018/09/26/constituent-parsing-summary/composition.png","hash":"538491cb9a200b387080218dd7eac1b4d9374b1a","modified":1565029964904},{"_id":"public/2018/09/26/constituent-parsing-summary/multi_headed_attention.jpg","hash":"47669cd77b6c688f9971526a668fb901ea347527","modified":1565029964904},{"_id":"public/2018/09/26/constituent-parsing-summary/label_oracle.png","hash":"019b9aa7f01afcdb35e5d9bfdfab171ad7dc8bcf","modified":1565029964904},{"_id":"public/2018/09/26/constituent-parsing-summary/single_attention.jpg","hash":"138646f0a6138ac75a0cabbb89ba6a9728695f80","modified":1565029964904},{"_id":"public/2018/09/26/constituent-parsing-summary/span_based_bottom_up_tree.png","hash":"0a5062c924fee9dc2c61f28d48f0fb7f73e748a9","modified":1565029964904},{"_id":"public/2018/09/26/constituent-parsing-summary/syntactic_distance_example.jpg","hash":"1eaff00cffc52db1a8b88f67d9b9a4260a697aa3","modified":1565029964904},{"_id":"public/2018/09/26/constituent-parsing-summary/structural_oracle.png","hash":"99cedbc9173600c819ed8e12c637c6ae0b241844","modified":1565029964904},{"_id":"public/2018/09/26/constituent-parsing-summary/top_down.jpg","hash":"a1a4ef127208c14e2463028132792810a198e1d6","modified":1565029964904},{"_id":"public/2018/09/26/constituent-parsing-summary/top_down_example.jpg","hash":"87008d6318973baa9f5e499c39f9195a0083a501","modified":1565029964905},{"_id":"public/2018/04/13/hexo-blog/1.jpg","hash":"ca247c820179e3c10e3009215a89bde6ff49fd6a","modified":1565029964905},{"_id":"public/2018/04/13/hexo-blog/10.jpg","hash":"e74a46614b596918677641930c6268b45a9a2d71","modified":1565029964905},{"_id":"public/2018/09/26/constituent-parsing-summary/transition_framework.png","hash":"59b2cd8386ef4c428441c70ca64f76c974894559","modified":1565029964905},{"_id":"public/2018/04/13/hexo-blog/13.jpg","hash":"265522726740882b738cc6696a6a94b21de4f499","modified":1565029964905},{"_id":"public/2018/04/13/hexo-blog/14.jpg","hash":"9b13137196ed0e0f93546e502d03536ad3fa50cf","modified":1565029964905},{"_id":"public/2018/04/13/hexo-blog/15.jpg","hash":"7b1ff0147b5d84e258cf301eb9e8d8152227ee51","modified":1565029964905},{"_id":"public/2018/04/13/hexo-blog/16.jpg","hash":"11052f5e8146a3d38f22002e20f0172a8b1ca23f","modified":1565029964905},{"_id":"public/2018/04/13/hexo-blog/18.jpg","hash":"4259425fd6a59a8e1c914c3f3105555d87f96f4d","modified":1565029964905},{"_id":"public/2018/04/13/hexo-blog/2.jpg","hash":"92be8c2267281c00990b04ec687c5f4a152b7128","modified":1565029964905},{"_id":"public/2018/04/13/hexo-blog/19.jpg","hash":"2207c8147f6334e2e2eedd70279c0984094a01f5","modified":1565029964905},{"_id":"public/2018/04/13/hexo-blog/20.jpg","hash":"7e6022459b17ddc05d61e4c6a88517d294a5848e","modified":1565029964905},{"_id":"public/2018/04/13/hexo-blog/3.jpg","hash":"c3b9a6c76d660c297fba1868a6f34989abd685ec","modified":1565029964905},{"_id":"public/2018/04/13/hexo-blog/4.jpg","hash":"ff4993e70a9a81a29fbbd836cc43b7a1daf6e2d7","modified":1565029964906},{"_id":"public/2018/04/13/hexo-blog/6.jpg","hash":"6ec043f8250a5fa0fcc2f3a8e8167655eabd88ba","modified":1565029964906},{"_id":"public/2018/04/13/hexo-blog/5.jpg","hash":"9435ca71f3593101384c4ff69c1ce57a90c367a2","modified":1565029964906},{"_id":"public/2018/04/13/hexo-blog/7.jpg","hash":"c7afa32a6363549cef23b622e539a84625615db4","modified":1565029964906},{"_id":"public/2018/04/13/hexo-blog/8.jpg","hash":"59c13e2fbc8d37ca0087d8f25a79c4e5feeb0f91","modified":1565029964906},{"_id":"public/2018/04/13/hexo-blog/9.jpg","hash":"185d3bfea5d5c844abdc8925cf0ab9a9767ba168","modified":1565029964906},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1565029964906},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1565029964920},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1565029964920},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1565029964922},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1565029964922},{"_id":"public/js/matery.js","hash":"92f07106944f5ef7cd72e84bb3534513d00eebe1","modified":1565029964922},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1565029964922},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1565029964922},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1565029964922},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1565029964922},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1565029964923},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1565029964923},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1565029964923},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1565029964923},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1565029964923},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1565029964923},{"_id":"public/css/matery.css","hash":"0e0d09974aa443f8959bd4fa77a2acac3412cbd3","modified":1565029964923},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1565029964923},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1565029964923},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1565029964923},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1565029964923},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1565029964923},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1565029964923},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1565029964923},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1565029964923},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1565029964923},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1565029964923},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1565029964923},{"_id":"public/libs/valine/Valine.min.js","hash":"031c1a5640d64ab3b829395ad5a7596b9fb122e6","modified":1565029964923},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1565029964923},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1565029964923},{"_id":"public/libs/materialize/materialize.min.css","hash":"580459a012f556fba86438953062013a94b201af","modified":1565029964924},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1565029964924},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1565029964924},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1565029964924},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1565029964924},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1565029964924},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1565029964924},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1565029964924},{"_id":"public/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1565029964924},{"_id":"public/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1565029964924},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1565029964924},{"_id":"public/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1565029964924},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1565029964924},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1565029964925},{"_id":"public/2019/01/13/latex-pdf/2.jpg","hash":"0f543fdc1d349d9a088fcc82a3a13d801352bc5a","modified":1565029964925},{"_id":"public/2018/09/26/constituent-parsing-summary/binarized_syntactic_tree.png","hash":"2a02fb2ca94a74f822f2b1bf4ed8060ffe8eeac9","modified":1565029964925},{"_id":"public/2018/09/26/constituent-parsing-summary/chart_based.png","hash":"31079c81252844826b3bd2ac53ce1ae0eac501d7","modified":1565029964925},{"_id":"public/2018/09/26/constituent-parsing-summary/results.jpg","hash":"02a515bada08b0b10cbe61447741121b9fcb5e56","modified":1565029964925},{"_id":"public/2018/09/26/constituent-parsing-summary/span_based_bottom_up.png","hash":"ace34948b1f4690ae8ef57be0f17dd2f87234d4f","modified":1565029964925},{"_id":"public/2018/09/26/constituent-parsing-summary/span_based_bottom_up_example.png","hash":"724d6fb737b8e842f0604d2a50115471a328585d","modified":1565029964925},{"_id":"public/2018/09/26/constituent-parsing-summary/syntactic_tree.png","hash":"cfcb94aaad70f50d7e336f10fda9450cc3a051a7","modified":1565029964925},{"_id":"public/2018/04/13/hexo-blog/11.jpg","hash":"ddf41b537f6e6e95d2192b84ed3208c1be9b4bfd","modified":1565029964925},{"_id":"public/2018/04/13/hexo-blog/17.jpg","hash":"12331a0bb13ad1a35859a95b83a9ab76683fb6f6","modified":1565029964925},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1565029964933},{"_id":"public/2017/10/02/sublime/sublime.png","hash":"ec02cf02afa67afbcd7f6c4772639782563ebe03","modified":1565029964933},{"_id":"public/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1565029964934},{"_id":"public/2019/01/13/latex-pdf/4.jpg","hash":"74aedf6718772123e95291100ac12e2e440bbadf","modified":1565029964934},{"_id":"public/2017/10/02/sublime/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1565029964934},{"_id":"public/2019/07/27/wordcloud/4.jpg","hash":"9817f92fd2fb1ac5283bbb7a057dccfbdc11bc21","modified":1565029964934},{"_id":"public/2019/01/13/latex-pdf/3.jpg","hash":"27dc46db2469da34781ac82d9e150fc1c6f72d8f","modified":1565029964934},{"_id":"public/2018/04/13/hexo-blog/21.jpg","hash":"807ad483d0660f6dd82753ba804cdc1c026a3151","modified":1565029964935},{"_id":"public/2019/01/13/latex-pdf/1.jpg","hash":"584247a929b25b2882f2210fa3d293174a3d68fa","modified":1565029964947},{"_id":"public/2019/01/13/latex-pdf/5.jpg","hash":"16f7b34189b344b7f3d9c6ca32088b565e5b0a92","modified":1565029964947},{"_id":"public/2018/04/13/hexo-blog/12.jpg","hash":"ebaa2a0db37495492da2dbe1493fc0d1afc85189","modified":1565029964947},{"_id":"public/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1565029964953},{"_id":"public/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1565029964953},{"_id":"public/2017/12/29/ecnu-ppt/header.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1565029964960},{"_id":"public/2017/12/29/ecnu-ppt/1.png","hash":"df0b35cf3ba0dbdbdd4ee7e194ce1e93938e4c8a","modified":1565029964960},{"_id":"public/medias/banner/4.jpg","hash":"8e3e0f116faba9997d0dfb760cb17e7be72a4bd0","modified":1565029964965},{"_id":"public/medias/banner/3.jpg","hash":"a9e8e4566baf93f24547a87fcc2b6e27a3f751a7","modified":1565029964966},{"_id":"public/medias/banner/2.jpg","hash":"c2980f75f2c047d0957e3c8227b3f8d84e67f752","modified":1565029964974},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1565029964974},{"_id":"public/2019/07/27/wordcloud/3.jpg","hash":"89254b470e398cd2ecf81e77b2254dd1e2b4be1a","modified":1565029964975},{"_id":"public/2019/07/27/wordcloud/1.png","hash":"61eb49a6b221ca3cc2443e9554e3255486817722","modified":1565029964975},{"_id":"public/2018/04/13/hexo-blog/header.jpg","hash":"41f4966fd962f6a37af870da805a3722a60ff20d","modified":1565029964975},{"_id":"public/medias/banner/5.jpg","hash":"fcb19134a4186b2a298e7aba2a14bf2e797c2a63","modified":1565029964984},{"_id":"public/medias/banner/1.jpg","hash":"8835aa2f200e103c3887c8201972cae4fcc7d044","modified":1565029964989},{"_id":"public/medias/banner/7.jpg","hash":"c006076870d7c2c59a8886ecd3ece65721932485","modified":1565029965002},{"_id":"public/medias/banner/0.jpg","hash":"8ef4bb2ac995a6d7a2ec2b7384af1293c2ecf687","modified":1565029965002},{"_id":"public/2018/09/26/constituent-parsing-summary/header.jpg","hash":"fb9880a4a0af48937207098da1446966c35d326d","modified":1565029965017},{"_id":"public/2019/01/13/latex-pdf/header.jpg","hash":"16202f2dfa34e3b685219294e418cf58fbab64d9","modified":1565029965021},{"_id":"public/2019/07/12/algorithm-code-tricks/header.jpg","hash":"0ac255cfb6bbd62e09c15967828262bf450239bb","modified":1565029965028},{"_id":"public/medias/banner/6.jpg","hash":"0ac255cfb6bbd62e09c15967828262bf450239bb","modified":1565029965029},{"_id":"public/medias/music/tiantangdemogui.mp3","hash":"3e9a91d47c673303cfb7745141fcb2372a78b938","modified":1565029965041},{"_id":"public/medias/music/daoshu.mp3","hash":"b5439266629548f6301d5844282bb4ffd3d5ad06","modified":1565029965062},{"_id":"public/medias/music/yiluxiangbei.mp3","hash":"19109e0e2d8a9dc1e118f54f05394096144210fd","modified":1565029965088}],"Category":[{"name":"程序设计","_id":"cjyyqfjii00057cahyhao598n"},{"name":"句法分析","_id":"cjyyqfjiv000a7cah1ran7l54"},{"name":"模板","_id":"cjyyqfjj3000f7cahmf0mi4qw"},{"name":"软件安装与配置","_id":"cjyyqfjj5000k7cahccren189"}],"Data":[{"_id":"friends","data":[{"name":"IVIPC","url":"http://ivipc.uestc.edu.cn/","title":"访问主页","introduction":"UESTC智能视觉信息处理与通信实验室(IVIPC)欢迎您的加入！","avatar":"/medias/avatars/ivipc.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://static.blinkfox.com/20190601.png","name":"码农","introduction":"这里不隐含扭曲的价值观，而是整合并充盈正能量","url":"https://www.90c.vip/","title":"前去学习"},{"avatar":"https://jiangliuhong.gitee.io/images/avatar.jpg","name":"编程常青树","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://jiangliuhong.gitee.io/","title":"前去学习"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"}]},{"_id":"musics","data":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}]}],"Page":[{"title":"404","date":"2019-07-19T08:41:10.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2019-08-01T09:17:32.000Z","path":"404.html","comments":1,"_id":"cjyyqfjh700007cahbew1z9q0","content":"","site":{"data":{"friends":[{"name":"IVIPC","url":"http://ivipc.uestc.edu.cn/","title":"访问主页","introduction":"UESTC智能视觉信息处理与通信实验室(IVIPC)欢迎您的加入！","avatar":"/medias/avatars/ivipc.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://static.blinkfox.com/20190601.png","name":"码农","introduction":"这里不隐含扭曲的价值观，而是整合并充盈正能量","url":"https://www.90c.vip/","title":"前去学习"},{"avatar":"https://jiangliuhong.gitee.io/images/avatar.jpg","name":"编程常青树","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://jiangliuhong.gitee.io/","title":"前去学习"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"}],"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}]}},"excerpt":"","more":""},{"title":"放松一下","date":"2019-07-19T08:41:10.000Z","type":"av","layout":"av","_content":"\n\n# 影音资源共享\n* <b>这里准备用来分享各类好玩的资源</b>\n* <b>待更新......<b>\n\n\n# 联系方式\n* <b>电子邮箱</b>\nhwsun@std.uestc.edu.cn\n948840751@qq.com\n* <b>地址</b>\n成都市高新区（西区）西源大道2006号科研大楼B438，邮编611731   \n* <b>微信</b>\nsunhwee\n* <b>QQ</b>\n948840751","source":"AV/index.md","raw":"---\ntitle: 放松一下\ndate: 2019-07-19 16:41:10\ntype: \"av\"\nlayout: \"av\"\n---\n\n\n# 影音资源共享\n* <b>这里准备用来分享各类好玩的资源</b>\n* <b>待更新......<b>\n\n\n# 联系方式\n* <b>电子邮箱</b>\nhwsun@std.uestc.edu.cn\n948840751@qq.com\n* <b>地址</b>\n成都市高新区（西区）西源大道2006号科研大楼B438，邮编611731   \n* <b>微信</b>\nsunhwee\n* <b>QQ</b>\n948840751","updated":"2019-08-05T17:07:07.928Z","path":"AV/index.html","comments":1,"_id":"cjyyqfji800017cah4c923p37","content":"<h1 id=\"影音资源共享\"><a href=\"#影音资源共享\" class=\"headerlink\" title=\"影音资源共享\"></a>影音资源共享</h1><ul>\n<li><b>这里准备用来分享各类好玩的资源</b></li>\n<li><b>待更新……<b></b></b></li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:hwsun@std.uestc.edu.cn\" target=\"_blank\" rel=\"noopener\">hwsun@std.uestc.edu.cn</a><br><a href=\"mailto:948840751@qq.com\" target=\"_blank\" rel=\"noopener\">948840751@qq.com</a></li>\n<li><b>地址</b><br>成都市高新区（西区）西源大道2006号科研大楼B438，邮编611731   </li>\n<li><b>微信</b><br>sunhwee</li>\n<li><b>QQ</b><br>948840751</li>\n</ul>\n","site":{"data":{"friends":[{"name":"IVIPC","url":"http://ivipc.uestc.edu.cn/","title":"访问主页","introduction":"UESTC智能视觉信息处理与通信实验室(IVIPC)欢迎您的加入！","avatar":"/medias/avatars/ivipc.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://static.blinkfox.com/20190601.png","name":"码农","introduction":"这里不隐含扭曲的价值观，而是整合并充盈正能量","url":"https://www.90c.vip/","title":"前去学习"},{"avatar":"https://jiangliuhong.gitee.io/images/avatar.jpg","name":"编程常青树","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://jiangliuhong.gitee.io/","title":"前去学习"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"}],"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}]}},"excerpt":"","more":"<h1 id=\"影音资源共享\"><a href=\"#影音资源共享\" class=\"headerlink\" title=\"影音资源共享\"></a>影音资源共享</h1><ul>\n<li><b>这里准备用来分享各类好玩的资源</b></li>\n<li><b>待更新……<b></b></b></li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:hwsun@std.uestc.edu.cn\" target=\"_blank\" rel=\"noopener\">hwsun@std.uestc.edu.cn</a><br><a href=\"mailto:948840751@qq.com\" target=\"_blank\" rel=\"noopener\">948840751@qq.com</a></li>\n<li><b>地址</b><br>成都市高新区（西区）西源大道2006号科研大楼B438，邮编611731   </li>\n<li><b>微信</b><br>sunhwee</li>\n<li><b>QQ</b><br>948840751</li>\n</ul>\n"},{"title":"about","date":"2019-07-19T08:41:10.000Z","type":"about","layout":"about","_content":"\n\n# 教育经历\n* <b>硕士 电子与通信专业</b>\n电子科技大学\n* <b>本科 电子信息工程专业</b>\n西南科技大学\n* <b>中学 理科火箭班</b>\n大足中学\n\n# 获得荣誉\n* <b>优秀研究生干部</b>\n2019 研一学年 电子科技大学信息与通信工程学院\n* <b>待更......</b>\n\n\n# 联系方式\n* <b>电子邮箱</b>\nhwsun@std.uestc.edu.cn\n948840751@qq.com\n* <b>地址</b>\n成都市高新区（西区）西源大道2006号科研大楼B438，邮编611731   \n* <b>微信</b>\nsunhwee\n* <b>QQ</b>\n948840751","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-07-19 16:41:10\ntype: \"about\"\nlayout: \"about\"\n---\n\n\n# 教育经历\n* <b>硕士 电子与通信专业</b>\n电子科技大学\n* <b>本科 电子信息工程专业</b>\n西南科技大学\n* <b>中学 理科火箭班</b>\n大足中学\n\n# 获得荣誉\n* <b>优秀研究生干部</b>\n2019 研一学年 电子科技大学信息与通信工程学院\n* <b>待更......</b>\n\n\n# 联系方式\n* <b>电子邮箱</b>\nhwsun@std.uestc.edu.cn\n948840751@qq.com\n* <b>地址</b>\n成都市高新区（西区）西源大道2006号科研大楼B438，邮编611731   \n* <b>微信</b>\nsunhwee\n* <b>QQ</b>\n948840751","updated":"2019-08-03T22:35:11.815Z","path":"about/index.html","comments":1,"_id":"cjyyqfjif00037cahb4xgmn9c","content":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li><b>硕士 电子与通信专业</b><br>电子科技大学</li>\n<li><b>本科 电子信息工程专业</b><br>西南科技大学</li>\n<li><b>中学 理科火箭班</b><br>大足中学</li>\n</ul>\n<h1 id=\"获得荣誉\"><a href=\"#获得荣誉\" class=\"headerlink\" title=\"获得荣誉\"></a>获得荣誉</h1><ul>\n<li><b>优秀研究生干部</b><br>2019 研一学年 电子科技大学信息与通信工程学院</li>\n<li><b>待更……</b></li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:hwsun@std.uestc.edu.cn\" target=\"_blank\" rel=\"noopener\">hwsun@std.uestc.edu.cn</a><br><a href=\"mailto:948840751@qq.com\" target=\"_blank\" rel=\"noopener\">948840751@qq.com</a></li>\n<li><b>地址</b><br>成都市高新区（西区）西源大道2006号科研大楼B438，邮编611731   </li>\n<li><b>微信</b><br>sunhwee</li>\n<li><b>QQ</b><br>948840751</li>\n</ul>\n","site":{"data":{"friends":[{"name":"IVIPC","url":"http://ivipc.uestc.edu.cn/","title":"访问主页","introduction":"UESTC智能视觉信息处理与通信实验室(IVIPC)欢迎您的加入！","avatar":"/medias/avatars/ivipc.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://static.blinkfox.com/20190601.png","name":"码农","introduction":"这里不隐含扭曲的价值观，而是整合并充盈正能量","url":"https://www.90c.vip/","title":"前去学习"},{"avatar":"https://jiangliuhong.gitee.io/images/avatar.jpg","name":"编程常青树","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://jiangliuhong.gitee.io/","title":"前去学习"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"}],"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}]}},"excerpt":"","more":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li><b>硕士 电子与通信专业</b><br>电子科技大学</li>\n<li><b>本科 电子信息工程专业</b><br>西南科技大学</li>\n<li><b>中学 理科火箭班</b><br>大足中学</li>\n</ul>\n<h1 id=\"获得荣誉\"><a href=\"#获得荣誉\" class=\"headerlink\" title=\"获得荣誉\"></a>获得荣誉</h1><ul>\n<li><b>优秀研究生干部</b><br>2019 研一学年 电子科技大学信息与通信工程学院</li>\n<li><b>待更……</b></li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:hwsun@std.uestc.edu.cn\" target=\"_blank\" rel=\"noopener\">hwsun@std.uestc.edu.cn</a><br><a href=\"mailto:948840751@qq.com\" target=\"_blank\" rel=\"noopener\">948840751@qq.com</a></li>\n<li><b>地址</b><br>成都市高新区（西区）西源大道2006号科研大楼B438，邮编611731   </li>\n<li><b>微信</b><br>sunhwee</li>\n<li><b>QQ</b><br>948840751</li>\n</ul>\n"},{"title":"archives","date":"2019-07-19T08:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-07-19 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2019-08-01T09:17:32.000Z","path":"archives/index.html","comments":1,"_id":"cjyyqfjk8001k7cahglvm2g5x","content":"","site":{"data":{"friends":[{"name":"IVIPC","url":"http://ivipc.uestc.edu.cn/","title":"访问主页","introduction":"UESTC智能视觉信息处理与通信实验室(IVIPC)欢迎您的加入！","avatar":"/medias/avatars/ivipc.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://static.blinkfox.com/20190601.png","name":"码农","introduction":"这里不隐含扭曲的价值观，而是整合并充盈正能量","url":"https://www.90c.vip/","title":"前去学习"},{"avatar":"https://jiangliuhong.gitee.io/images/avatar.jpg","name":"编程常青树","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://jiangliuhong.gitee.io/","title":"前去学习"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"}],"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}]}},"excerpt":"","more":""},{"title":"categories","date":"2019-07-19T08:39:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-19 16:39:20\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2019-08-01T09:17:32.000Z","path":"categories/index.html","comments":1,"_id":"cjyyqfjk8001l7cahymxm7ouh","content":"","site":{"data":{"friends":[{"name":"IVIPC","url":"http://ivipc.uestc.edu.cn/","title":"访问主页","introduction":"UESTC智能视觉信息处理与通信实验室(IVIPC)欢迎您的加入！","avatar":"/medias/avatars/ivipc.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://static.blinkfox.com/20190601.png","name":"码农","introduction":"这里不隐含扭曲的价值观，而是整合并充盈正能量","url":"https://www.90c.vip/","title":"前去学习"},{"avatar":"https://jiangliuhong.gitee.io/images/avatar.jpg","name":"编程常青树","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://jiangliuhong.gitee.io/","title":"前去学习"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"}],"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}]}},"excerpt":"","more":""},{"title":"contact","date":"2019-07-26T09:17:02.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2019-07-26 17:17:02\ntype: \"contact\"\nlayout: \"contact\"\n---","updated":"2019-08-01T09:17:32.000Z","path":"contact/index.html","comments":1,"_id":"cjyyqfjk9001m7cah1k0j3ygw","content":"","site":{"data":{"friends":[{"name":"IVIPC","url":"http://ivipc.uestc.edu.cn/","title":"访问主页","introduction":"UESTC智能视觉信息处理与通信实验室(IVIPC)欢迎您的加入！","avatar":"/medias/avatars/ivipc.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://static.blinkfox.com/20190601.png","name":"码农","introduction":"这里不隐含扭曲的价值观，而是整合并充盈正能量","url":"https://www.90c.vip/","title":"前去学习"},{"avatar":"https://jiangliuhong.gitee.io/images/avatar.jpg","name":"编程常青树","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://jiangliuhong.gitee.io/","title":"前去学习"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"}],"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}]}},"excerpt":"","more":""},{"title":"AV","date":"2019-07-19T08:41:10.000Z","type":"AV","layout":"AV","_content":"\n\n# 教育经历\n* <b>硕士 电子与通信专业</b>\n电子科技大学\n* <b>本科 电子信息工程专业</b>\n西南科技大学\n* <b>中学 理科火箭班</b>\n大足中学\n\n# 获得荣誉\n* <b>优秀研究生干部</b>\n2019 研一学年 电子科技大学信息与通信工程学院\n* <b>待更......</b>\n\n\n# 联系方式\n* <b>电子邮箱</b>\nhwsun@std.uestc.edu.cn\n948840751@qq.com\n* <b>地址</b>\n成都市高新区（西区）西源大道2006号科研大楼B438，邮编611731   \n* <b>微信</b>\nsunhwee\n* <b>QQ</b>\n948840751","source":"music/index.md","raw":"---\ntitle: AV\ndate: 2019-07-19 16:41:10\ntype: \"AV\"\nlayout: \"AV\"\n---\n\n\n# 教育经历\n* <b>硕士 电子与通信专业</b>\n电子科技大学\n* <b>本科 电子信息工程专业</b>\n西南科技大学\n* <b>中学 理科火箭班</b>\n大足中学\n\n# 获得荣誉\n* <b>优秀研究生干部</b>\n2019 研一学年 电子科技大学信息与通信工程学院\n* <b>待更......</b>\n\n\n# 联系方式\n* <b>电子邮箱</b>\nhwsun@std.uestc.edu.cn\n948840751@qq.com\n* <b>地址</b>\n成都市高新区（西区）西源大道2006号科研大楼B438，邮编611731   \n* <b>微信</b>\nsunhwee\n* <b>QQ</b>\n948840751","updated":"2019-08-04T08:59:44.382Z","path":"music/index.html","comments":1,"_id":"cjyyqfjka001n7cahw1t0msy7","content":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li><b>硕士 电子与通信专业</b><br>电子科技大学</li>\n<li><b>本科 电子信息工程专业</b><br>西南科技大学</li>\n<li><b>中学 理科火箭班</b><br>大足中学</li>\n</ul>\n<h1 id=\"获得荣誉\"><a href=\"#获得荣誉\" class=\"headerlink\" title=\"获得荣誉\"></a>获得荣誉</h1><ul>\n<li><b>优秀研究生干部</b><br>2019 研一学年 电子科技大学信息与通信工程学院</li>\n<li><b>待更……</b></li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:hwsun@std.uestc.edu.cn\" target=\"_blank\" rel=\"noopener\">hwsun@std.uestc.edu.cn</a><br><a href=\"mailto:948840751@qq.com\" target=\"_blank\" rel=\"noopener\">948840751@qq.com</a></li>\n<li><b>地址</b><br>成都市高新区（西区）西源大道2006号科研大楼B438，邮编611731   </li>\n<li><b>微信</b><br>sunhwee</li>\n<li><b>QQ</b><br>948840751</li>\n</ul>\n","site":{"data":{"friends":[{"name":"IVIPC","url":"http://ivipc.uestc.edu.cn/","title":"访问主页","introduction":"UESTC智能视觉信息处理与通信实验室(IVIPC)欢迎您的加入！","avatar":"/medias/avatars/ivipc.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://static.blinkfox.com/20190601.png","name":"码农","introduction":"这里不隐含扭曲的价值观，而是整合并充盈正能量","url":"https://www.90c.vip/","title":"前去学习"},{"avatar":"https://jiangliuhong.gitee.io/images/avatar.jpg","name":"编程常青树","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://jiangliuhong.gitee.io/","title":"前去学习"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"}],"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}]}},"excerpt":"","more":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li><b>硕士 电子与通信专业</b><br>电子科技大学</li>\n<li><b>本科 电子信息工程专业</b><br>西南科技大学</li>\n<li><b>中学 理科火箭班</b><br>大足中学</li>\n</ul>\n<h1 id=\"获得荣誉\"><a href=\"#获得荣誉\" class=\"headerlink\" title=\"获得荣誉\"></a>获得荣誉</h1><ul>\n<li><b>优秀研究生干部</b><br>2019 研一学年 电子科技大学信息与通信工程学院</li>\n<li><b>待更……</b></li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:hwsun@std.uestc.edu.cn\" target=\"_blank\" rel=\"noopener\">hwsun@std.uestc.edu.cn</a><br><a href=\"mailto:948840751@qq.com\" target=\"_blank\" rel=\"noopener\">948840751@qq.com</a></li>\n<li><b>地址</b><br>成都市高新区（西区）西源大道2006号科研大楼B438，邮编611731   </li>\n<li><b>微信</b><br>sunhwee</li>\n<li><b>QQ</b><br>948840751</li>\n</ul>\n"},{"title":"friends","date":"2019-07-19T08:42:10.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-07-19 16:42:10\ntype: \"friends\"\nlayout: \"friends\"\n---","updated":"2019-08-01T09:17:32.000Z","path":"friends/index.html","comments":1,"_id":"cjyyqfjkc001o7cahw5grqnhs","content":"","site":{"data":{"friends":[{"name":"IVIPC","url":"http://ivipc.uestc.edu.cn/","title":"访问主页","introduction":"UESTC智能视觉信息处理与通信实验室(IVIPC)欢迎您的加入！","avatar":"/medias/avatars/ivipc.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://static.blinkfox.com/20190601.png","name":"码农","introduction":"这里不隐含扭曲的价值观，而是整合并充盈正能量","url":"https://www.90c.vip/","title":"前去学习"},{"avatar":"https://jiangliuhong.gitee.io/images/avatar.jpg","name":"编程常青树","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://jiangliuhong.gitee.io/","title":"前去学习"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"}],"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}]}},"excerpt":"","more":""},{"title":"tags","date":"2019-07-19T08:40:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-19 16:40:27\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2019-08-01T09:17:32.000Z","path":"tags/index.html","comments":1,"_id":"cjyyqfjke001p7cah9bb8j9zs","content":"","site":{"data":{"friends":[{"name":"IVIPC","url":"http://ivipc.uestc.edu.cn/","title":"访问主页","introduction":"UESTC智能视觉信息处理与通信实验室(IVIPC)欢迎您的加入！","avatar":"/medias/avatars/ivipc.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://static.blinkfox.com/20190601.png","name":"码农","introduction":"这里不隐含扭曲的价值观，而是整合并充盈正能量","url":"https://www.90c.vip/","title":"前去学习"},{"avatar":"https://jiangliuhong.gitee.io/images/avatar.jpg","name":"编程常青树","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://jiangliuhong.gitee.io/","title":"前去学习"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"}],"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}]}},"excerpt":"","more":""}],"Post":[{"title":"算法编程小白机试指南（大佬勿进）","date":"2019-07-12T06:26:27.000Z","top":true,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n> 大佬就不用往下看了，这篇文章没有任何逻辑，没有任何进阶的指导意义，纯粹为了应付各种机试（夏令营机试、保研机试、程序设计实践考试等等），对正经编程竞赛没有任何帮助。我就想到哪写到哪了，不定期想到新的在更新。\n\n# 暴力打表法\n## 题目1\n给定$n$个数字$1, 2, \\ldots, n$，求任意取一个排列，任意第$i$个位置上的元素都不等于$i$的概率是多少？\n\n如果知道结论的话，这就是一道普通的错位排列题，常规做法是求出递推式\n\\\\[f(n) = (n-1)(f(n-1)+f(n-2))\\\\]\n然后除以全排列的数量$n!$就行了，这里就不讲怎么求的了，百度有很多。这里讲讲如果不会求怎么办？\n\n首先想到的暴力方法就是暴力枚举所有排列，然后看看有多少排列满足题目中的错位的条件。C++中的库函数``next_permutation``正好可以帮助我们枚举全排列，代码如下：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\n\nLL a[30] = {0, 0, 1};\nint b[30];\n\nint main() {\n    for (int n = 3; n <= 20; ++n) {\n        for (int i = 1; i <= n; ++i) {\n            b[i] = i;\n        }\n        int cnt = 0;\n        do {\n            int flag = 1;\n            for (int i = 1; i <= n; ++i) {\n                if (b[i] == i) {\n                    flag = 0;\n                    break;\n                }\n            }\n            cnt += flag;\n        } while (next_permutation(b + 1, b + n + 1));\n        a[n] = cnt;\n        printf(\"%d, \", cnt);\n    }\n    return 0;\n}\n```\n\n然后就可以跑出$n \\le 12$的结果，但是再大就跑不出来了，因为全排列数量太多了，跑得太慢了。但是不用管，因为题目要求的不是错位排列的数量，而是除以全排列数量之后的概率，巧的是，$n > 12$之后概率保留两位小数的结果是完全相同的，所以直接取$n = 12$的概率就行了，代码如下：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\n\nLL p[30] = {1, 1, 2};\nLL a[30] = {0, 0, 1, 2, 9, 44, 265, 1854, 14833, 133496, 1334961, 14684570, 176214841};\n\nint main() {\n    for (int i = 3; i < 30; ++i) {\n        p[i] = p[i - 1] * (LL)i;\n    }\n    int T;\n    scanf(\"%d\", &T);\n    while (T--) {\n        int n;\n        scanf(\"%d\", &n);\n        if (n > 12)\n            n = 12;\n        double res = (double)a[n] / p[n] * 100.0;\n        printf(\"%.2f%%\\n\", res);\n    }\n    return 0;\n}\n```\n\n这样即使你完全不会计算，也可以100分通过这题啦。\n\n\n## 题目2\n[原题链接](https://acm.ecnu.edu.cn/problem/3337/)\n\n这题其实就是给你$n$个数组，计算任意两个指定数组相同元素的个数。\n\n首先想到的最暴力的方法就是，两层循环遍历两个数组咯，看有多少一样的元素就行了。那我们试试：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 40000 + 10;\nvector<int> G[MAXN];\nint len[MAXN];\n\nint main() {\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 0; i < m; ++i) {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    for (int i = 1; i <= n; ++i) {\n        len[i] = G[i].size();\n    }\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        int s, t;\n        scanf(\"%d%d\", &s, &t);\n        int cnt = 0;\n        for (int i = 0; i < len[s]; ++i) {\n            for (int j = 0; j < len[t]; ++j) {\n                if (G[s][i] == G[t][j]) {\n                    cnt++;\n                }\n            }\n        }\n        printf(\"%d\\n\", cnt);\n    }\n    return 0;\n}\n```\n\n![](3337-1.jpg)\n\n结果已经不错了，过了大多数样例了，这时你实在不想做了，拿了这点分数也可以做下一题了。\n\n但是你稍微动点脑子，就可以发现，可以把所有数组提前排个序啊，然后遍历的时候就不需要每次都从头找起了，代码如下：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 40000 + 10;\nvector<int> G[MAXN];\nint len[MAXN];\n\nint main() {\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 0; i < m; ++i) {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    for (int i = 1; i <= n; ++i) {\n        sort(G[i].begin(), G[i].end());\n        len[i] = G[i].size();\n    }\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        int s, t;\n        scanf(\"%d%d\", &s, &t);\n        int i = 0, j = 0, cnt = 0;\n        while (i < len[s] && j < len[t]) {\n            if (G[s][i] > G[t][j]) {\n                ++j;\n            } else {\n                if (G[s][i] == G[t][j]) {\n                    ++cnt;\n                }\n                ++i;\n            }\n        }\n        printf(\"%d\\n\", cnt);\n    }\n    return 0;\n}\n```\n![](3337-2.jpg)\n\n然后你就会发现，结果并没有任何变化。。。不过理论上来说是会快一点的，这里数据可能比较小。\n\n所以这里应该想不到啥优化的好方法了，不会做的话就下一题吧，分数够了，下面是正确代码，用`bitset`实现的：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 40000 + 10;\nbitset<MAXN> G[MAXN];\n\nint main() {\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 0; i < m; ++i) {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        G[u][v] = G[v][u] = 1;\n    }\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        int s, t;\n        scanf(\"%d%d\", &s, &t);\n        printf(\"%d\\n\", (G[s] & G[t]).count());\n    }\n    return 0;\n}\n```\n\n# 猜答案\n[原题链接](https://acm.ecnu.edu.cn/problem/2819/)\n看到这题，首先想到的就是算啊，这是一道数学题，结果可能算半天还是没有推出来结果，还浪费时间。\n\n所以如果形式很简单的话，先猜答案看看。看这三组样例，先猜一个答案等于$\\left\\lfloor\\frac{3n-1}{2}\\right\\rfloor$，别问我怎么猜到的，因为我已经算出来了。。好开个玩笑，代入发现都是对的，当然这就是正确结果。那这是怎么猜到的呢？可以这么想，一块钱可以买一块糖，得到一张糖纸，而一张糖纸相当于$\\frac{1}{3}$块糖，那么如此继续下去，一块钱一共可以买到$1+\\frac{1}{3}+\\frac{1}{3^2}+\\cdots$块糖，算出来就是$\\left\\lfloor\\frac{3n}{2}\\right\\rfloor$。但是代进数据发现会差个常数1，所以稍稍修改就得到正确结果了。下面是实现代码：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int T;\n    scanf(\"%d\", &T);\n    while (T--) {\n        long long n, ans;\n        scanf(\"%lld\", &n);\n        ans = (3 * n - 1) / 2;\n        printf(\"%lld\\n\", ans);\n    }\n    return 0;\n}\n```\n当然要是猜不出来也没事，可以直接用暴力方法求解，我就模拟换糖的过程就行了，刚开始得到了$n$块糖纸，换到了$\\left\\lfloor\\frac{n}{3}\\right\\rfloor$块糖，现在还剩下$\\left\\lfloor\\frac{n}{3}\\right\\rfloor + n % 3$块糖纸，依次模拟下去就行了，代码如下：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int T;\n    scanf(\"%d\", &T);\n    while (T--) {\n        int n;\n        scanf(\"%d\", &n);\n        int ans = n;\n        while (n > 2) {\n            ans += n / 3;\n            n = n / 3 + n % 3;\n        }\n        printf(\"%d\\n\", ans);\n    }\n    return 0;\n}\n```","source":"_posts/algorithm-code-tricks.md","raw":"---\ntitle: 算法编程小白机试指南（大佬勿进）\ndate: 2019-07-12 14:26:27\ntop: true\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- 算法\n- 机试\ncategories:\n- 程序设计\n---\n\n> 大佬就不用往下看了，这篇文章没有任何逻辑，没有任何进阶的指导意义，纯粹为了应付各种机试（夏令营机试、保研机试、程序设计实践考试等等），对正经编程竞赛没有任何帮助。我就想到哪写到哪了，不定期想到新的在更新。\n\n# 暴力打表法\n## 题目1\n给定$n$个数字$1, 2, \\ldots, n$，求任意取一个排列，任意第$i$个位置上的元素都不等于$i$的概率是多少？\n\n如果知道结论的话，这就是一道普通的错位排列题，常规做法是求出递推式\n\\\\[f(n) = (n-1)(f(n-1)+f(n-2))\\\\]\n然后除以全排列的数量$n!$就行了，这里就不讲怎么求的了，百度有很多。这里讲讲如果不会求怎么办？\n\n首先想到的暴力方法就是暴力枚举所有排列，然后看看有多少排列满足题目中的错位的条件。C++中的库函数``next_permutation``正好可以帮助我们枚举全排列，代码如下：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\n\nLL a[30] = {0, 0, 1};\nint b[30];\n\nint main() {\n    for (int n = 3; n <= 20; ++n) {\n        for (int i = 1; i <= n; ++i) {\n            b[i] = i;\n        }\n        int cnt = 0;\n        do {\n            int flag = 1;\n            for (int i = 1; i <= n; ++i) {\n                if (b[i] == i) {\n                    flag = 0;\n                    break;\n                }\n            }\n            cnt += flag;\n        } while (next_permutation(b + 1, b + n + 1));\n        a[n] = cnt;\n        printf(\"%d, \", cnt);\n    }\n    return 0;\n}\n```\n\n然后就可以跑出$n \\le 12$的结果，但是再大就跑不出来了，因为全排列数量太多了，跑得太慢了。但是不用管，因为题目要求的不是错位排列的数量，而是除以全排列数量之后的概率，巧的是，$n > 12$之后概率保留两位小数的结果是完全相同的，所以直接取$n = 12$的概率就行了，代码如下：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\n\nLL p[30] = {1, 1, 2};\nLL a[30] = {0, 0, 1, 2, 9, 44, 265, 1854, 14833, 133496, 1334961, 14684570, 176214841};\n\nint main() {\n    for (int i = 3; i < 30; ++i) {\n        p[i] = p[i - 1] * (LL)i;\n    }\n    int T;\n    scanf(\"%d\", &T);\n    while (T--) {\n        int n;\n        scanf(\"%d\", &n);\n        if (n > 12)\n            n = 12;\n        double res = (double)a[n] / p[n] * 100.0;\n        printf(\"%.2f%%\\n\", res);\n    }\n    return 0;\n}\n```\n\n这样即使你完全不会计算，也可以100分通过这题啦。\n\n\n## 题目2\n[原题链接](https://acm.ecnu.edu.cn/problem/3337/)\n\n这题其实就是给你$n$个数组，计算任意两个指定数组相同元素的个数。\n\n首先想到的最暴力的方法就是，两层循环遍历两个数组咯，看有多少一样的元素就行了。那我们试试：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 40000 + 10;\nvector<int> G[MAXN];\nint len[MAXN];\n\nint main() {\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 0; i < m; ++i) {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    for (int i = 1; i <= n; ++i) {\n        len[i] = G[i].size();\n    }\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        int s, t;\n        scanf(\"%d%d\", &s, &t);\n        int cnt = 0;\n        for (int i = 0; i < len[s]; ++i) {\n            for (int j = 0; j < len[t]; ++j) {\n                if (G[s][i] == G[t][j]) {\n                    cnt++;\n                }\n            }\n        }\n        printf(\"%d\\n\", cnt);\n    }\n    return 0;\n}\n```\n\n![](3337-1.jpg)\n\n结果已经不错了，过了大多数样例了，这时你实在不想做了，拿了这点分数也可以做下一题了。\n\n但是你稍微动点脑子，就可以发现，可以把所有数组提前排个序啊，然后遍历的时候就不需要每次都从头找起了，代码如下：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 40000 + 10;\nvector<int> G[MAXN];\nint len[MAXN];\n\nint main() {\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 0; i < m; ++i) {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    for (int i = 1; i <= n; ++i) {\n        sort(G[i].begin(), G[i].end());\n        len[i] = G[i].size();\n    }\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        int s, t;\n        scanf(\"%d%d\", &s, &t);\n        int i = 0, j = 0, cnt = 0;\n        while (i < len[s] && j < len[t]) {\n            if (G[s][i] > G[t][j]) {\n                ++j;\n            } else {\n                if (G[s][i] == G[t][j]) {\n                    ++cnt;\n                }\n                ++i;\n            }\n        }\n        printf(\"%d\\n\", cnt);\n    }\n    return 0;\n}\n```\n![](3337-2.jpg)\n\n然后你就会发现，结果并没有任何变化。。。不过理论上来说是会快一点的，这里数据可能比较小。\n\n所以这里应该想不到啥优化的好方法了，不会做的话就下一题吧，分数够了，下面是正确代码，用`bitset`实现的：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 40000 + 10;\nbitset<MAXN> G[MAXN];\n\nint main() {\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 0; i < m; ++i) {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        G[u][v] = G[v][u] = 1;\n    }\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        int s, t;\n        scanf(\"%d%d\", &s, &t);\n        printf(\"%d\\n\", (G[s] & G[t]).count());\n    }\n    return 0;\n}\n```\n\n# 猜答案\n[原题链接](https://acm.ecnu.edu.cn/problem/2819/)\n看到这题，首先想到的就是算啊，这是一道数学题，结果可能算半天还是没有推出来结果，还浪费时间。\n\n所以如果形式很简单的话，先猜答案看看。看这三组样例，先猜一个答案等于$\\left\\lfloor\\frac{3n-1}{2}\\right\\rfloor$，别问我怎么猜到的，因为我已经算出来了。。好开个玩笑，代入发现都是对的，当然这就是正确结果。那这是怎么猜到的呢？可以这么想，一块钱可以买一块糖，得到一张糖纸，而一张糖纸相当于$\\frac{1}{3}$块糖，那么如此继续下去，一块钱一共可以买到$1+\\frac{1}{3}+\\frac{1}{3^2}+\\cdots$块糖，算出来就是$\\left\\lfloor\\frac{3n}{2}\\right\\rfloor$。但是代进数据发现会差个常数1，所以稍稍修改就得到正确结果了。下面是实现代码：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int T;\n    scanf(\"%d\", &T);\n    while (T--) {\n        long long n, ans;\n        scanf(\"%lld\", &n);\n        ans = (3 * n - 1) / 2;\n        printf(\"%lld\\n\", ans);\n    }\n    return 0;\n}\n```\n当然要是猜不出来也没事，可以直接用暴力方法求解，我就模拟换糖的过程就行了，刚开始得到了$n$块糖纸，换到了$\\left\\lfloor\\frac{n}{3}\\right\\rfloor$块糖，现在还剩下$\\left\\lfloor\\frac{n}{3}\\right\\rfloor + n % 3$块糖纸，依次模拟下去就行了，代码如下：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int T;\n    scanf(\"%d\", &T);\n    while (T--) {\n        int n;\n        scanf(\"%d\", &n);\n        int ans = n;\n        while (n > 2) {\n            ans += n / 3;\n            n = n / 3 + n % 3;\n        }\n        printf(\"%d\\n\", ans);\n    }\n    return 0;\n}\n```","slug":"algorithm-code-tricks","published":1,"updated":"2019-08-01T09:17:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyyqfji900027cah5enm1zum","content":"<blockquote>\n<p>大佬就不用往下看了，这篇文章没有任何逻辑，没有任何进阶的指导意义，纯粹为了应付各种机试（夏令营机试、保研机试、程序设计实践考试等等），对正经编程竞赛没有任何帮助。我就想到哪写到哪了，不定期想到新的在更新。</p>\n</blockquote>\n<h1 id=\"暴力打表法\"><a href=\"#暴力打表法\" class=\"headerlink\" title=\"暴力打表法\"></a>暴力打表法</h1><h2 id=\"题目1\"><a href=\"#题目1\" class=\"headerlink\" title=\"题目1\"></a>题目1</h2><p>给定$n$个数字$1, 2, \\ldots, n$，求任意取一个排列，任意第$i$个位置上的元素都不等于$i$的概率是多少？</p>\n<p>如果知道结论的话，这就是一道普通的错位排列题，常规做法是求出递推式<br>\\[f(n) = (n-1)(f(n-1)+f(n-2))\\]<br>然后除以全排列的数量$n!$就行了，这里就不讲怎么求的了，百度有很多。这里讲讲如果不会求怎么办？</p>\n<p>首先想到的暴力方法就是暴力枚举所有排列，然后看看有多少排列满足题目中的错位的条件。C++中的库函数<code>next_permutation</code>正好可以帮助我们枚举全排列，代码如下：</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> LL<span class=\"token punctuation\">;</span>\n\nLL a<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            cnt <span class=\"token operator\">+</span><span class=\"token operator\">=</span> flag<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">next_permutation</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">+</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cnt<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d, \"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>然后就可以跑出$n \\le 12$的结果，但是再大就跑不出来了，因为全排列数量太多了，跑得太慢了。但是不用管，因为题目要求的不是错位排列的数量，而是除以全排列数量之后的概率，巧的是，$n &gt; 12$之后概率保留两位小数的结果是完全相同的，所以直接取$n = 12$的概率就行了，代码如下：</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> LL<span class=\"token punctuation\">;</span>\n\nLL p<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nLL a<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">265</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1854</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14833</span><span class=\"token punctuation\">,</span> <span class=\"token number\">133496</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1334961</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14684570</span><span class=\"token punctuation\">,</span> <span class=\"token number\">176214841</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>LL<span class=\"token punctuation\">)</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> T<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n            n <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> p<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">100.0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2f%%\\n\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>这样即使你完全不会计算，也可以100分通过这题啦。</p>\n<h2 id=\"题目2\"><a href=\"#题目2\" class=\"headerlink\" title=\"题目2\"></a>题目2</h2><p><a href=\"https://acm.ecnu.edu.cn/problem/3337/\" target=\"_blank\" rel=\"noopener\">原题链接</a></p>\n<p>这题其实就是给你$n$个数组，计算任意两个指定数组相同元素的个数。</p>\n<p>首先想到的最暴力的方法就是，两层循环遍历两个数组咯，看有多少一样的元素就行了。那我们试试：</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAXN <span class=\"token operator\">=</span> <span class=\"token number\">40000</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> G<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> len<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        G<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        G<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        len<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> G<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> q<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> G<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"3337-1.jpg\" alt></p>\n<p>结果已经不错了，过了大多数样例了，这时你实在不想做了，拿了这点分数也可以做下一题了。</p>\n<p>但是你稍微动点脑子，就可以发现，可以把所有数组提前排个序啊，然后遍历的时候就不需要每次都从头找起了，代码如下：</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAXN <span class=\"token operator\">=</span> <span class=\"token number\">40000</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> G<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> len<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        G<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        G<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        len<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> G<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> q<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> G<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> G<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"3337-2.jpg\" alt></p>\n<p>然后你就会发现，结果并没有任何变化。。。不过理论上来说是会快一点的，这里数据可能比较小。</p>\n<p>所以这里应该想不到啥优化的好方法了，不会做的话就下一题吧，分数够了，下面是正确代码，用<code>bitset</code>实现的：</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAXN <span class=\"token operator\">=</span> <span class=\"token number\">40000</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nbitset<span class=\"token operator\">&lt;</span>MAXN<span class=\"token operator\">></span> G<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        G<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> G<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> q<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> G<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"猜答案\"><a href=\"#猜答案\" class=\"headerlink\" title=\"猜答案\"></a>猜答案</h1><p><a href=\"https://acm.ecnu.edu.cn/problem/2819/\" target=\"_blank\" rel=\"noopener\">原题链接</a><br>看到这题，首先想到的就是算啊，这是一道数学题，结果可能算半天还是没有推出来结果，还浪费时间。</p>\n<p>所以如果形式很简单的话，先猜答案看看。看这三组样例，先猜一个答案等于$\\left\\lfloor\\frac{3n-1}{2}\\right\\rfloor$，别问我怎么猜到的，因为我已经算出来了。。好开个玩笑，代入发现都是对的，当然这就是正确结果。那这是怎么猜到的呢？可以这么想，一块钱可以买一块糖，得到一张糖纸，而一张糖纸相当于$\\frac{1}{3}$块糖，那么如此继续下去，一块钱一共可以买到$1+\\frac{1}{3}+\\frac{1}{3^2}+\\cdots$块糖，算出来就是$\\left\\lfloor\\frac{3n}{2}\\right\\rfloor$。但是代进数据发现会差个常数1，所以稍稍修改就得到正确结果了。下面是实现代码：</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> T<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> n<span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>当然要是猜不出来也没事，可以直接用暴力方法求解，我就模拟换糖的过程就行了，刚开始得到了$n$块糖纸，换到了$\\left\\lfloor\\frac{n}{3}\\right\\rfloor$块糖，现在还剩下$\\left\\lfloor\\frac{n}{3}\\right\\rfloor + n % 3$块糖纸，依次模拟下去就行了，代码如下：</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> T<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ans <span class=\"token operator\">+</span><span class=\"token operator\">=</span> n <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n            n <span class=\"token operator\">=</span> n <span class=\"token operator\">/</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> n <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{"friends":[{"name":"IVIPC","url":"http://ivipc.uestc.edu.cn/","title":"访问主页","introduction":"UESTC智能视觉信息处理与通信实验室(IVIPC)欢迎您的加入！","avatar":"/medias/avatars/ivipc.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://static.blinkfox.com/20190601.png","name":"码农","introduction":"这里不隐含扭曲的价值观，而是整合并充盈正能量","url":"https://www.90c.vip/","title":"前去学习"},{"avatar":"https://jiangliuhong.gitee.io/images/avatar.jpg","name":"编程常青树","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://jiangliuhong.gitee.io/","title":"前去学习"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"}],"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}]}},"excerpt":"","more":"<blockquote>\n<p>大佬就不用往下看了，这篇文章没有任何逻辑，没有任何进阶的指导意义，纯粹为了应付各种机试（夏令营机试、保研机试、程序设计实践考试等等），对正经编程竞赛没有任何帮助。我就想到哪写到哪了，不定期想到新的在更新。</p>\n</blockquote>\n<h1 id=\"暴力打表法\"><a href=\"#暴力打表法\" class=\"headerlink\" title=\"暴力打表法\"></a>暴力打表法</h1><h2 id=\"题目1\"><a href=\"#题目1\" class=\"headerlink\" title=\"题目1\"></a>题目1</h2><p>给定$n$个数字$1, 2, \\ldots, n$，求任意取一个排列，任意第$i$个位置上的元素都不等于$i$的概率是多少？</p>\n<p>如果知道结论的话，这就是一道普通的错位排列题，常规做法是求出递推式<br>\\[f(n) = (n-1)(f(n-1)+f(n-2))\\]<br>然后除以全排列的数量$n!$就行了，这里就不讲怎么求的了，百度有很多。这里讲讲如果不会求怎么办？</p>\n<p>首先想到的暴力方法就是暴力枚举所有排列，然后看看有多少排列满足题目中的错位的条件。C++中的库函数<code>next_permutation</code>正好可以帮助我们枚举全排列，代码如下：</p>\n<pre><code class=\"cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\ntypedef long long LL;\n\nLL a[30] = {0, 0, 1};\nint b[30];\n\nint main() {\n    for (int n = 3; n &lt;= 20; ++n) {\n        for (int i = 1; i &lt;= n; ++i) {\n            b[i] = i;\n        }\n        int cnt = 0;\n        do {\n            int flag = 1;\n            for (int i = 1; i &lt;= n; ++i) {\n                if (b[i] == i) {\n                    flag = 0;\n                    break;\n                }\n            }\n            cnt += flag;\n        } while (next_permutation(b + 1, b + n + 1));\n        a[n] = cnt;\n        printf(&quot;%d, &quot;, cnt);\n    }\n    return 0;\n}</code></pre>\n<p>然后就可以跑出$n \\le 12$的结果，但是再大就跑不出来了，因为全排列数量太多了，跑得太慢了。但是不用管，因为题目要求的不是错位排列的数量，而是除以全排列数量之后的概率，巧的是，$n &gt; 12$之后概率保留两位小数的结果是完全相同的，所以直接取$n = 12$的概率就行了，代码如下：</p>\n<pre><code class=\"cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\ntypedef long long LL;\n\nLL p[30] = {1, 1, 2};\nLL a[30] = {0, 0, 1, 2, 9, 44, 265, 1854, 14833, 133496, 1334961, 14684570, 176214841};\n\nint main() {\n    for (int i = 3; i &lt; 30; ++i) {\n        p[i] = p[i - 1] * (LL)i;\n    }\n    int T;\n    scanf(&quot;%d&quot;, &amp;T);\n    while (T--) {\n        int n;\n        scanf(&quot;%d&quot;, &amp;n);\n        if (n &gt; 12)\n            n = 12;\n        double res = (double)a[n] / p[n] * 100.0;\n        printf(&quot;%.2f%%\\n&quot;, res);\n    }\n    return 0;\n}</code></pre>\n<p>这样即使你完全不会计算，也可以100分通过这题啦。</p>\n<h2 id=\"题目2\"><a href=\"#题目2\" class=\"headerlink\" title=\"题目2\"></a>题目2</h2><p><a href=\"https://acm.ecnu.edu.cn/problem/3337/\" target=\"_blank\" rel=\"noopener\">原题链接</a></p>\n<p>这题其实就是给你$n$个数组，计算任意两个指定数组相同元素的个数。</p>\n<p>首先想到的最暴力的方法就是，两层循环遍历两个数组咯，看有多少一样的元素就行了。那我们试试：</p>\n<pre><code class=\"cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int MAXN = 40000 + 10;\nvector&lt;int&gt; G[MAXN];\nint len[MAXN];\n\nint main() {\n    int n, m;\n    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);\n    for (int i = 0; i &lt; m; ++i) {\n        int u, v;\n        scanf(&quot;%d%d&quot;, &amp;u, &amp;v);\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    for (int i = 1; i &lt;= n; ++i) {\n        len[i] = G[i].size();\n    }\n    int q;\n    scanf(&quot;%d&quot;, &amp;q);\n    while (q--) {\n        int s, t;\n        scanf(&quot;%d%d&quot;, &amp;s, &amp;t);\n        int cnt = 0;\n        for (int i = 0; i &lt; len[s]; ++i) {\n            for (int j = 0; j &lt; len[t]; ++j) {\n                if (G[s][i] == G[t][j]) {\n                    cnt++;\n                }\n            }\n        }\n        printf(&quot;%d\\n&quot;, cnt);\n    }\n    return 0;\n}</code></pre>\n<p><img src=\"3337-1.jpg\" alt></p>\n<p>结果已经不错了，过了大多数样例了，这时你实在不想做了，拿了这点分数也可以做下一题了。</p>\n<p>但是你稍微动点脑子，就可以发现，可以把所有数组提前排个序啊，然后遍历的时候就不需要每次都从头找起了，代码如下：</p>\n<pre><code class=\"cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int MAXN = 40000 + 10;\nvector&lt;int&gt; G[MAXN];\nint len[MAXN];\n\nint main() {\n    int n, m;\n    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);\n    for (int i = 0; i &lt; m; ++i) {\n        int u, v;\n        scanf(&quot;%d%d&quot;, &amp;u, &amp;v);\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    for (int i = 1; i &lt;= n; ++i) {\n        sort(G[i].begin(), G[i].end());\n        len[i] = G[i].size();\n    }\n    int q;\n    scanf(&quot;%d&quot;, &amp;q);\n    while (q--) {\n        int s, t;\n        scanf(&quot;%d%d&quot;, &amp;s, &amp;t);\n        int i = 0, j = 0, cnt = 0;\n        while (i &lt; len[s] &amp;&amp; j &lt; len[t]) {\n            if (G[s][i] &gt; G[t][j]) {\n                ++j;\n            } else {\n                if (G[s][i] == G[t][j]) {\n                    ++cnt;\n                }\n                ++i;\n            }\n        }\n        printf(&quot;%d\\n&quot;, cnt);\n    }\n    return 0;\n}</code></pre>\n<p><img src=\"3337-2.jpg\" alt></p>\n<p>然后你就会发现，结果并没有任何变化。。。不过理论上来说是会快一点的，这里数据可能比较小。</p>\n<p>所以这里应该想不到啥优化的好方法了，不会做的话就下一题吧，分数够了，下面是正确代码，用<code>bitset</code>实现的：</p>\n<pre><code class=\"cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int MAXN = 40000 + 10;\nbitset&lt;MAXN&gt; G[MAXN];\n\nint main() {\n    int n, m;\n    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);\n    for (int i = 0; i &lt; m; ++i) {\n        int u, v;\n        scanf(&quot;%d%d&quot;, &amp;u, &amp;v);\n        G[u][v] = G[v][u] = 1;\n    }\n    int q;\n    scanf(&quot;%d&quot;, &amp;q);\n    while (q--) {\n        int s, t;\n        scanf(&quot;%d%d&quot;, &amp;s, &amp;t);\n        printf(&quot;%d\\n&quot;, (G[s] &amp; G[t]).count());\n    }\n    return 0;\n}</code></pre>\n<h1 id=\"猜答案\"><a href=\"#猜答案\" class=\"headerlink\" title=\"猜答案\"></a>猜答案</h1><p><a href=\"https://acm.ecnu.edu.cn/problem/2819/\" target=\"_blank\" rel=\"noopener\">原题链接</a><br>看到这题，首先想到的就是算啊，这是一道数学题，结果可能算半天还是没有推出来结果，还浪费时间。</p>\n<p>所以如果形式很简单的话，先猜答案看看。看这三组样例，先猜一个答案等于$\\left\\lfloor\\frac{3n-1}{2}\\right\\rfloor$，别问我怎么猜到的，因为我已经算出来了。。好开个玩笑，代入发现都是对的，当然这就是正确结果。那这是怎么猜到的呢？可以这么想，一块钱可以买一块糖，得到一张糖纸，而一张糖纸相当于$\\frac{1}{3}$块糖，那么如此继续下去，一块钱一共可以买到$1+\\frac{1}{3}+\\frac{1}{3^2}+\\cdots$块糖，算出来就是$\\left\\lfloor\\frac{3n}{2}\\right\\rfloor$。但是代进数据发现会差个常数1，所以稍稍修改就得到正确结果了。下面是实现代码：</p>\n<pre><code class=\"cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int T;\n    scanf(&quot;%d&quot;, &amp;T);\n    while (T--) {\n        long long n, ans;\n        scanf(&quot;%lld&quot;, &amp;n);\n        ans = (3 * n - 1) / 2;\n        printf(&quot;%lld\\n&quot;, ans);\n    }\n    return 0;\n}</code></pre>\n<p>当然要是猜不出来也没事，可以直接用暴力方法求解，我就模拟换糖的过程就行了，刚开始得到了$n$块糖纸，换到了$\\left\\lfloor\\frac{n}{3}\\right\\rfloor$块糖，现在还剩下$\\left\\lfloor\\frac{n}{3}\\right\\rfloor + n % 3$块糖纸，依次模拟下去就行了，代码如下：</p>\n<pre><code class=\"cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int T;\n    scanf(&quot;%d&quot;, &amp;T);\n    while (T--) {\n        int n;\n        scanf(&quot;%d&quot;, &amp;n);\n        int ans = n;\n        while (n &gt; 2) {\n            ans += n / 3;\n            n = n / 3 + n % 3;\n        }\n        printf(&quot;%d\\n&quot;, ans);\n    }\n    return 0;\n}</code></pre>\n"},{"title":"成分句法分析综述","date":"2018-09-26T04:53:10.000Z","top":true,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=461153715&auto=1&height=66\"></iframe></div>\n\n> 一直以来想对保研到现在一年多看过的论文进行一个总结，正好赶上下周二要讲组会，所以将自己看过的成分句法分析相关的论文梳理一下，写一个粗略的综述。可能有很多细节还不是很懂，理解有误，还请大家指正。\n\n**PPT地址：**[A Summary of Constituent Parsing](https://github.com/godweiyang/files-backup/tree/master/lecture/ppt1)\n**代码地址：**[Constituent Parsing](https://github.com/godweiyang/ConstituentParsing)\n\n# 介绍\n---\n成分句法分析（constituent parsing）是自然语言处理中的一个基础任务，它的任务是给定一个句子，分析出句子的短语结构句法树。例如给定句子“The little boy likes red tomatoes .”，它的成分句法树如下图所示：\n![](syntactic_tree.png)\n成分句法分析可以利用到许多下游任务中去，比如情感分析可以利用句子的成分句法树来进行递归神经网络建模，从而分析出句子的情感。也可以利用在其他基础任务中去，比如可以将训练好的成分句法树直接转为依存句法树，从而提升依存句法分析的准确率。\n\n传统的成分句法分析方法主要是规则（grammar）和统计的，比如结合两者的概率上下文无关文法（PCFG），在此基础上产生了应用广泛的CKY解码算法。CKY算法本质上是一种动态规划算法，本文之后要讲到的chart-based模型的解码算法也是基于动态规划算法的，和CKY算法十分地相似。\n\nSocher在2013年又提出了组合向量文法（CVG），将递归神经网络应用到了成分句法分析中，给每个短语结构赋予了向量表示。但是这种方法还是需要用到规则，采用CKY算法解码，时间效率比较低。还有一种基于CRF的神经网络句法分析方法，将离散的特征转化为了连续的特征表示。\n\n不过，上面这些方法统统都不在本文的讨论范围之内。本文讨论近两年来研究最热门的几种模型，主要包括基于转移系统（transition-based）的模型、基于动态规划（chart-based）解码的模型、基于自顶向下贪心（greedy top-down）解码的模型和一些将预测树结构转化为预测序列（sequence to sequence）的模型。\n\n# 基于转移系统的模型\n---\n基于转移系统的模型主要分为三大类。第一种是自底向上（bottom-up）的系统，代表性论文有Transition-based Neural Constituent Parsing等。第二种是自顶向下（top-down）的系统，代表性论文有Recurrent Neural Network Grammars和Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles等。最后一种是2017年提出的基于中序遍历（in-order）的系统，代表性论文有In-Order Transition-based Constituent Parsing等。\n\n在这三类系统的基础之上，许多人又做了非常多的改进。例如提出了动态指导（dynamic oracle）技术，来解决序列预测中的exposure bias问题（具体含义之后会讲到）。还有使用强化学习中的policy gradient来代替dynamic oracle，解决了针对不同转移系统需要设计不同的dynamic oracle的问题。\n\n基于转移的句法分析系统主要包含两个组成成分，一个是栈（stack），用来存放已分析的句法结构，另一个是缓存（buffer），用来存放待分析的句子。而预测句法树结构就转化为了预测转移系统每一个时刻应该采取的动作（action）序列。下面我们分别介绍几种不同的转移系统，我们用三元组$[S, B, T]$来表示转移系统每一个时刻的状态，分别代表栈、buffer的第一个单词下标、句法分析结束标志。\n\n## 自底向上的转移系统\n自底向上的转移系统是根据句法树的后序遍历（post-order）顺序进行句法分析的，首先将buffer中的单词移进栈里，然后将栈顶的若干个单词归约为它们的父结点，直至最后buffer为空并且栈里只有一个根节点。\n\n在句法分析之前，首先要对句法树进行二叉化，这一点在传统的CKY算法中也会用到。例如对于之前的那棵句法树，二叉化后就变成了下图所示：\n![](binarized_syntactic_tree.png)\n\n自底向上转移系统的action形式化定义如下：\n![](bottom_up.jpg)\n其中SHIFT动作就是将buffer里面的第一个单词移进栈里。REDUCE-L/R-X动作就是将栈顶的两个元素出栈，并且归约为它们的父结点X，然后再将父结点入栈，而L和R就是用来区分左儿子和右儿子谁是头结点（head branch）。Unary-X动作就是将栈顶元素出栈，并且归约为父结点X，这个动作是用来预测一元产生式的。最后FINISH动作用来判断句法分析是否结束。\n\n注意到这里有一个问题：为什么这里一定要提前对句法树进行二叉化？主要原因是因为自底向上系统有个弊端，就是在不停地SHIFT之后，你不仅要预测哪一步开始REDUCE，还得预测REDUCE的话要REDUCE栈顶的多少个元素，这样预测的状态数就大大增加，导致训练时间也增加了许多。而二叉化后每次预测就只需要预测哪一步REDUCE就行了，每次REDUCE只REDUCE栈顶的两个元素。\n\n对于上面的句法树，用自底向上系统分析的过程如下图所示：\n![](bottom_up_example.jpg)\n自底向上转移系统的优点就是可以充分利用已经生成的子树信息，来辅助后面的子树预测。\n\n但是缺点也很显然，因为无法知道父结点以及再上层的父结点信息，所以丢失了许多有用的全局信息，这也有点类似于CKY算法的弊端了，同样只能根据局部的子树信息预测当前子树。\n\n另一个缺点就是需要提前进行二叉化，虽然二叉化加入了head结点信息，事实证明是很有用的，但是head结点的标注需要许多语义学知识，也可以用神经网络来自己学习到head结点，但是二叉化总归是比较麻烦的。一个较为简洁的做法就是，用空结点$\\emptyset$来作为本不应该归约的两个结点的临时结点，在还原树结构的时候忽略这种空结点，这样就可以隐式地进行二叉化操作了。\n\n## 自顶向下的转移系统\n自顶向下的转移系统利用的是句法树的前序遍历（pre-order）序列，首先将父结点入栈，然后不断操作直到它的子结点全部入栈，这时将父结点连同所有子结点全部归约为上一层的父结点。\n\n自顶向下转移系统的action形式化定义如下：\n![](top_down.jpg)\n其中SHIFT动作和之前一样，都是将buffer的第一个单词入栈。而NT-X动作就是将父结点X入栈。REDUCE动作就是将栈顶若干个元素直到它们的第一个父结点为止都出栈，然后归约为一个结点，再次入栈。注意到这里不同于自底向上系统的地方是没有FINISH动作，笔者也没有找到相关解释，猜测可能是因为自底向上系统存在一元动作Unary-X，所以最后根节点可能会无限归约下去，需要通过FINISH来提前终止分析。当然其实转移系统的动作定义并没有严格的要求，不同论文定义的也都不一样，但是都大同小异，也就是都存在SHIFT-REDUCE动作。\n\n对于上面的句法树，用自顶向下系统分析的过程如下图所示：\n![](top_down_example.jpg)\n\n自顶向下系统的优缺点和自底向上系统恰好互补。优点就是可以充分利用全局信息，例如父结点的信息，并且不需要进行二叉化，因为REDUCE的时候只要往栈里找到第一个父结点就行了。而缺点就是无法利用局部信息，也就是子树信息，同样NT-X动作也可能会出现无限多次执行的情况，所以要加上一些限制条件。\n\n## In-order转移系统\nZhang和Liu两人在2017年提出了in-order转移系统，它利用的是句法树的中序遍历（in-order）序列，首先将一个子结点SHIFT入栈，然后将父结点入栈，再不断操作直到该父结点的剩余子结点全部入栈，然后对它们进行归约。\n\nin-order转移系统的action形式化定义如下：\n![](in_order.jpg)\n其中SHIFT动作和之前一样，都是将buffer的第一个单词入栈。PJ-X动作是预测出当前栈顶的元素的父结点X。REDUCE动作就是将栈顶的若干个元素归约为最里面倒数第二个元素，也就是它们的父结点。\n\n对于上面的句法树，用in-order系统分析的过程如下图所示：\n![](in_order_example.jpg)\n\nin-order转移系统提出的动机也很符合人类的直觉，在你读一个句子的时候，如果你第一个看到的单词是“The”，那么你脑海中可能会想到后面紧跟着的可能是个名词短语NP，然后你继续往后看，果然验证了你的猜想，后面的单词序列是“red tomatoes”。\n\nin-order转移系统的优点恰好结合了前面两种转移系统，既可以考虑到局部信息，又可以考虑到全局信息。\n\n**模型变体：**in-order系统就是在自顶向下系统的基础上，在父结点入栈之前先入栈了1个子结点。那么如果稍加修改，还可以提前入栈两个、三个等等。假设在父结点入栈之前先入栈了$k$个子结点，那么称这种转移系统为k-in-order系统。特别地，如果$k = 0$，那么这就是自顶向下转移系统；如果$k = 1$，那么这就是in-order转移系统；$k = \\infty$，那么这就是自底向上转移系统。\n\n## 模型框架\n上面说到的三种基于转移的句法分析系统，都可以概括为预测每一个时刻的action，那么每一个时刻的状态如何表示就是最重要的问题。在每一个时刻，最重要的组成部分有三个，分别是当前栈的状态、当前buffer的状态、当前已生成的action序列的状态。\n\n当前状态的表示通过下图所示的三个LSTM得到：\n![](transition_framework.png)\n其中栈和buffer的编码使用的是stack-LSTM，而action的编码使用的是普通的LSTM。最后将三种LSTM输出拼接到一起，用softmax预测出正确的action。\n\n另一个问题就是如何编码栈里的短语。在以前都是通过递归神经网络或者树状LSTM来编码树状结构短语的，而在这里的话直接将父结点和子结点合为一个序列，送入到双向LSTM中就行了，具体形式如下图所示：\n![](composition.png)\n\n## 系统改进\n**基于span的自底向上的转移系统**\n黄亮在2016年论文里提出了转移系统的栈里用span的左右边界数值来代替分析出来的子树，并且将REDUCE动作和预测label分开来进行，他们的转移系统action形式化定义如下：\n![](span_based_bottom_up.png)\n可以看出，在第偶数个时刻，只预测结构化动作sh和comb(对应于之前转移系统的SHIFT和REDUCE)，sh动作从buffer中移进栈里一个单词$w_{j+1}$，栈顶的span就变为了$span(j, j+1)$。而comb动作就是将栈顶的两个span归约为一个span。在第奇数个时刻，只预测栈顶span的label，如果这个span的确能构成一个短语，那么就预测它的label，否则的话说明只是个临时结点，就预测为空结点，这一点在之前就已经提到过了。\n\n论文里给出了一个具体的例子：\n![](span_based_bottom_up_tree.png)\n![](span_based_bottom_up_example.png)\n\n文章开头提供的代码也是基于这个转移系统的，一个好处是用span来表示的话比较方便，代码也好写。另一个好处就是每一个时刻的状态可以不再用三个LSTM动态地算出来了，而是可以提前用双向LSTM对句子进行编码，然后用两个单词输出的差值作为单词之间span的表示，最后用它来计算转移状态的向量表示。\n\n例如在某个时刻，栈首元素为$(i, k, j)$，那么结构化预测就采用四个span特征：$span(0, i), span(i, k), span(k, j), span(j, n)$，为什么要用这四个呢？因为comb动作涉及到栈首的两个span，而之前已经生成的$span(0, i)$也可以作为局部信息指导预测，buffer中的$span(j, n)$也要考虑到，因为可能预测为sh动作，同时也可以作为全局信息参考。\n\n而label预测就只要用到三个span特征：$span(0, k), span(k, j), span(j, n)$，因为label动作只需要对栈首的span进行预测，所以三个特征就足够了。\n\n**生成模型RNNG**\nRNNG是2016年提出的一种文法，全称叫做“Recurrent Neural Network Grammar”，是一种生成式模型。RNNG本质上就是自顶向下的转移系统，动作定义和之前介绍的基本一致。只是之前介绍的自顶向下的转移系统是判别式模型，每次SHIFT的单词都是buffer中给定的。而RNNG每次SHIFT的单词需要通过动作GEN(x)预测得出，最终模型对预测出来的句子分析出句法树。\n\n正式一点就是，对于句子$x$和对应的句法树$y$，判别式模型是对条件概率$p(y | x)$进行建模，而生成式模型是对联合概率$p(x, y)$进行建模。\n\n而RNNG的另一个重要应用是语言模型（language model），也就是建模$p(x)$。因为$p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}$，所以只需要枚举出所有可能的句法树$y$即可，但是这是指数级别的，显然不现实，这时候就需要用到“重要性采样（importance sampling）”。\n\n令$q(y | x)$为RNNG作为判别式模型的时候产生句子$y$的条件概率，那么$p(x)$可以改写为\n\\\\[p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}  = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {q(y|x)w(x,y)}  = {E_{q(y|x)}}w(x,y)\\\\]\n然后就可以采用蒙特卡罗方法进行采样了，从分布$q(y | x)$中采样$N$个样本：\n\\\\[{y^{(i)}} \\sim q(y|x),i = 1,2, \\ldots ,N\\\\]\n那么$p(x)$就可以近似表示为：\n\\\\[p(x) = {E_{q(y|x)}}w(x,y)\\mathop  \\approx \\limits^{MC} \\frac{1}{N}\\sum\\limits_{i = 1}^N {w(x,{y^{(i)}})} \\\\]\n\n**Dynamic Oracle**\n文章开头提到了一个转移系统会遇到的问题：“exposure bias问题”，这个问题意思就是训练的时候转移系统的每个时刻都是按照标准的action来进行训练的，但是如果测试的时候遇到了一个训练时从来没有遇见过的状态，这时候该怎么预测？如果预测错了，那么之后的时刻可能错的越来越离谱，偏差越来越大。\n\n解决的方法就是采用Dynamic Oracle技术，在预测错误的时候，按照标准树的结构指导转移系统向着错误尽可能小的状态进行转移。但是比较麻烦的是，对于每一个转移系统，可能大家定义的状态都不尽相同，所以Dynamic Oracle要针对特定的转移系统单独设计，一个解决方法就是之后要提到的Policy Gradient方法。\n\n这里举一个针对上面的“基于span的自底向上的转移系统”的Dynamic Oracle例子。\n\n首先是结构化oracle，如果当前的栈首span是$span(i, j)$，那么就在标准树中寻找所有包含$span(i, j)$并且最小的span，记为$span(p, q)$，那么下一步可以采取的动作定义如下：\n![](structural_oracle.png)\n也就是说，如果$span(p, q)$比$span(i, j)$右边界多出一部分，那么为了向着标准span靠近，就只能sh单词入栈；否则如果左边界多出一部分，那么就必须先comb之前的两个span，扩大span左边的边界；否则的话左右两边都有空出，那就随机预测一个动作就行了。\n\n然后是label oracle，这个就很简单了，如果当前的栈首span是$span(i, j)$，只需要在标准树中寻找是否存在$span(i, j)$，如果存在，那么就给他正常预测label就行了；如果不存在，那么直接预测为空结点。oracle定义如下:\n![](label_oracle.png)\n而关于这个Dynamic Oracle的证明和更加深入的理解，参见我之前写过的一篇博客：[深入理解成分句法分析中的Dynamic Oracle](https://godweiyang.com/2018/08/03/dynamic-oracles/)。\n\n但是如果直接按照这个Dynamic Oracle来实现代码的话，效果不会有什么提升，原因就是训练的时候遇到的错误情形还是太少了，不足以应付所有的测试阶段遇到的未知情形。所以要在训练阶段加上exploration操作，也就是转移的每一个时刻，不要总是预测概率最大的action，而是以一定的概率随机选择一个action，诱导系统进入一个错误的状态，这样系统就能学到更多错误状态下的回正技巧了。\n\n**Policy Gradient**\n序列预测存在着两个问题：一个就是之前提到的exposure bias问题，另一个就是loss mismatch问题，意思就是在每一个状态的loss累和得到最终整个序列的loss，但是因为是贪心解码，并没有考虑到之后的结果，所以某一个状态的loss其实并不能代表整个序列的loss。\n\nDynamic Oracle可以解决第一个问题，如果修改一下也可以解决第二个问题，但是Dynamic Oracle需要针对特定的转移系统单独设计，不能通用，所以这里引入了强化学习中的Policy Gradient来解决这个问题。\n\n首先用风险函数（risk objective）代替原来的损失函数：\n\\\\[\\mathcal{R}(\\theta ) = \\sum\\limits_{i = 1}^N {\\sum\\limits_y {p(y|{x^{(i)}};\\theta )\\Delta (y,{y^{(i)}})} } \\\\]\n其中$(x^{(i)}, y^{(i)})$是训练集中的标准数据。可以看出，风险函数其实就是所有可能的句法树和标准树的差异${\\Delta (y,{y^{(i)}})}$的期望，训练的目的就是最小化所有句法树和标准树的差异，这样就消除了之前提到的两个问题。\n\n但是可以发现，显然不可能枚举所有可能的句法树，这时候想到了之前用到的重要性采样方法。\n\n但是不能直接对风险函数进行重要性采样，不然就会发现采样后的函数$\\theta$消失了！那就没办法求导了。所以先对风险函数求导：\n\\\\[\\begin{array}{l}\\nabla \\mathcal{R}(\\theta ) = \\sum\\limits_{i = 1}^N {\\sum\\limits_y {p(y|{x^{(i)}})\\Delta (y,{y^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )} } \\\\ \\approx \\sum\\limits_{i = 1}^N {\\sum\\limits_{y \\in \\mathcal{Y}({x^{(i)}})} {\\Delta (y,{y^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )} } \\end{array}\\\\]\n这里的$y$是根据分布${p(y|{x^{(i)}})}$采样得到的结果。实验中可以将标准树也加入到采样结果中，可以提升准确率。\n至于$\\log$项是怎么来的，可以如下推导得来：\n\\\\[\\nabla p(y|{x^{(i)}};\\theta ) = p(y|{x^{(i)}})\\frac{ {\\nabla p(y|{x^{(i)}};\\theta )}}{ {p(y|{x^{(i)}};\\theta )}} = p(y|{x^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )\\\\]\n\n\n# 编码解码模型\n---\n上面介绍完了基于转移的句法分析系统，下面开始介绍编码解码（Encoder-Decoder）模型。\n\n模型的大致框架如下图所示：\n![](chart_based.png)\n首先通过编码器将句子编码成向量，然后用解码器对向量操作，解码出句法树。\n\n## 编码器（Encoder）\n编码器的主要目的是将每个短语编码成语义向量，用来给解码器预测splits和labels。\n\n编码器主要有两种，一种是简单的双向LSTM编码，下图是一个用双向LSTM对句子进行编码的示例：\n![](bi_lstm.jpg)\n例如要编码“played soccer in”这个短语，那么就用“in”处的前向LSTM输出减去“She”处的前向LSTM输出，得到了短语的前向LSTM表示。类似的，用“played”处的反向LSTM输出减去“the”处的反向LSTM输出，得到了短语的反向LSTM表示。\n\n另一种是multi-headed self-attention编码。Attention是谷歌在“Attention is all you need”中提出的一种方法，严格来说它并不能算作一种模型，只能说是一种机制。具体原理在这里就不细讲了，可以直接去看一下原文。\n\n大体框架就是，每个单词的词向量经过三个不同的$W$矩阵变换之后得到了三个不同的向量表示$q, k, v$，分别拼接起来组成了矩阵$Q, K, V$，其中$Q, K$相乘就得到了任意两个单词之间的相似度矩阵，然后对矩阵每一行进行softmax就得到了每一个单词对于其他所有单词的权重。再乘上矩阵$V$就得到了它对其他所有单词的加权求和，以此来作为它的向量表示。\n\n下图就是self-attention的框架图：\n![](single_attention.jpg)\n形式化定义就是：\n\\\\[S(X) = \\left[ { {\\rm{softmax}}\\left( {\\frac{ {Q{K^{\\rm{T}}}}}{ {\\sqrt { {d_k}} }}} \\right)V} \\right]{W_O}\\\\]\n其中$Q = XW_Q, K = XW_K, V = XW_V$，$d_k$是向量$q, k$的维度，用它作为分母是为了防止数值太大溢出。最后的矩阵$W_O$是为了将输出映射到与输入相同的维度。\n\n而multi-headed self-attention就是将刚刚的attention计算8次，并且相加：\n\\\\[M(X) = \\sum\\limits_{i = 1}^8 {S(X)} \\\\]\n注意这8个attention的参数矩阵是不共享的，也可以不相加，改为直接拼接。\n\n最终的编码器模型如下图所示：\n![](multi_headed_attention.jpg)\n也就是说，将刚刚的multi-headed self-attention经过一层layernorm之后再经过一层前馈神经网络，最后再经过一层layernorm得到输出。将上述模型复制8份，首尾拼接，即前面的输出作为后面的输入，即可得到编码器最终的输出，也就是每个单词最终的向量表示。\n\n至于每个短语的表示，和双向LSTM编码一样，用短语边界两个单词向量的差值作为短语的表示。只是这里没有前向后向的概念，所以要将每个单词向量一分为二，前一半作为前向向量，后一半作为后向向量。当然在实际实现中，将单数维度提取出来作为前向表示，双数维度提取出来作为后向表示。\n\n## 解码器（Decoder）\n得到了每个短语的向量表示之后，就需要对它们进行解码，得到最终的句法树，解码的方法主要有两种。\n**基于动态规划解码的模型**\n这种方法在论文中被叫做“chart-based model”，正如其名，就是利用一个数组来进行动态规划，求出每个span的最优split和最优label。\n\n定义一棵句法树的分数为所有子结点的label分数之和，即：\n\\\\[{s_{tree}}(T) = \\sum\\limits_{(l,(i,j)) \\in T} { {s_{label}}(i,j,l)} \\\\]\n其实原本论文中的定义还多了一项span的分数，但是由于具体实现中去掉这一项并没有什么影响，所以为了简便我就只算label分数了。\n\n要使得句法树分数最大，不可能枚举所有的句法树，那就只能用动态规划算法求解了。对于任意一个$span(i, j)$，我们将它通过编码器产生的表示$s_{ij}$输入到前馈神经网络中，直接取得分最高的那一维作为最优label，即：\n\\\\[s_{label}(i, j, l) = [Vg(Ws_{ij}+b)]\\_l\\\\]\n而对于split，遍历所有的split，取两个子结点与自己结点得分之和最高的那个split即可：\n\\\\[s_{split}(i, j, k) = s_{label}(i, j, l_{ij}) + s_{label}(i, k, l_{ik}) + s_{label}(k, j, l_{kj})\\\\]\n\n最后的训练过程和以往一样，采用max-margin训练方法，即使得标准树的得分比预测树的得分至少高一个margin，在这里margin大小定义为两棵树不同短语的数量，最终的损失函数定义为：\n\\\\[\\mathcal{L}(\\theta ) = \\max \\left( {0,\\Delta (\\hat T,T) - {s_{tree}}(T) + {s_{tree}}(\\hat T)} \\right)\\\\]\n\n**基于自顶向下贪心解码的模型**\n基于动态规划的解码算法时间复杂度为$O(n^3)$，对于长度大一点的句子来说还是有点不可接受的。但是如果采用自顶向下、贪心地去选择每一个span的最优split和最优label，那么时间复杂度将降到$O(n^2)$。具体操作过程如下，首先从根节点也就是$span(0, n)$开始，选择一个split，使得两个子结点与自己结点得分之和最高，而label还是向之前那样直接通过短语的向量计算得出。具体公式为：\n\\\\[\\begin{array}{l}\\hat l = \\mathop {\\arg \\max }\\limits_l [{s_{label}}(i,j,l)]\\\\\\hat k = \\mathop {\\arg \\max }\\limits_k [{s_{split}}(i,k,l)]\\end{array}\\\\]\n而由于贪心解码和转移系统action预测一样，在预测阶段可能会遇到训练阶段没有碰到过的状态，所以也需要用到Dynamic Oracle。同样也需要用到exploration，来增加训练阶段遇到的错误状态数。\n\n# Sequence to Sequence模型\n---\n上面最主流的两大模型：转移系统和编码解码模型都已经介绍完了，下面介绍几种比较新颖的方法。\n\n大家都知道句法树和某些序列存在一一对应关系，句法树可以唯一转换成序列，序列也可以唯一转换成句法树，所以预测句法树的问题就转变为了预测序列问题，下面几种方法都是将句法树转换为了某种序列来进行预测。\n\n## 树结构转化为括号序列\n这种方法思路特别简单，因为训练集里原始数据的表示形式就是括号序列嘛，所以就采用语言模型直接预测出括号序列的概率。\n\n但是不可能枚举出所有的句法树括号序列，所以最终还是只对其他句法分析器预测出来的最好的若干棵树进行预测概率，然后重排序选出概率最高的一棵树。\n\n## 句法距离（Syntactic Distance）\n这个方法就很新颖了，本质上也是将树结构转换成了唯一对应的序列。\n![](syntactic_distance_example.jpg)\n首先看上面一张图，对于长度为$n$的句子，存在一个长度为$n - 1$的数字序列，满足如下条件：$n$个单词存在$n - 1$个两两相邻的单词对，而两个相邻的单词的最近公共祖先（LCA）在句法树中有一个高度，所以这$n - 1$个数的大小关系恰好对应了从左向右任意两个相邻单词对的LCA的高度的大小关系。\n\n拿上面那张图为例，“She”和“enjoys”的最近公共祖先是“S”，所以高度最高，对应的数字也最大。“enjoys”和“playing”的最近公共祖先是“VP”，高度排第三，所以对应的数字大小也是排第三。依次类推，剩下的数也满足这个性质。可以证明，这个数字序列和句法树是一一对应的。更进一步可以发现，这个序列其实就是“中序遍历的结点的高度”，文中将其称为句法距离。\n\n预测这个序列也很简单，通过一个双向LSTM，然后将每相邻两个单词的输出做一次卷积操作（因为要预测相邻两个单词的LCA高度嘛），然后再将输出送到一个双向LSTM中去，最后通过一个前馈神经网络得到每相邻两个单词的数字。\n\n而从树到序列和从序列到树的算法都很简单，这里就不详述了，可以直接去看论文。\n\n# 总结\n---\n## 实验结果\n下面列出了成分句法分析领域目前为止最好的一些结果：\n![](results.jpg)\n最好的是采用self-attention编码器+外部预训练词向量ELMo的模型，第二是模型融合+重排序之后的结果，之后的模型也基本都是本文介绍过的，最厉害的就是最后一个2006年的模型，十几年了依然如此强悍。\n\n## 心得体会\n虽然看起来貌似已经看了不少的成分句法分析相关的工作了，但是其实还有很多细节性的工作还没有去了解。前两年ACL等顶会成分句法分析的论文都很少，但是18年又好像多了起来，但终究还是伯克利Dan Klein、斯坦福Socher、黄亮等一批大佬在做这个，想在巨人的肩膀上面做出点东西还是很有挑战性的。\n\n目前能想到的工作只有在编码器上面做文章，学习出语义更加丰富的短语表示。或者可以采用失传多年的递归神经网络，解码时对句法树进行建模，但是随便试了一下，速度很慢而且存在梯度消失的问题，效果也不是很好。转移系统的话暂时也想不出什么好的点子，序列预测的话如果能再想出个新颖的一一对应的序列就好了。\n\n前路还很长，说长也不长了，只有三年不到的时间了，做不出东西就要延毕了。但愿能在有限的三年时间里做出点成果，提高自己的代码能力，对这个领域也有更加深入的理解！\n\n# 参考文献\n---\n[ACL15] Transition-based Neural Constituent Parsing\n[NAACL16] Recurrent Neural Network Grammars\n[EMNLP16] Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles\n[TACL17] In-Order Transition-based Constituent Parsing\n[EMNLP17] Effective Inference for Generative Neural Parsing\n[ACL18] Policy Gradient as a Proxy for Dynamic Oracles in Constituency Parsing\n[ACL17] A Minimal Span-Based Neural Constituency Parser\n[ACL18] Constituency Parsing with a Self-Attentive Encoder\n[EMNLP16] Parsing as Language Modeling\n[ACL18] Straight to the Tree: Constituency Parsing with Neural Syntactic Distance\n","source":"_posts/constituent-parsing-summary.md","raw":"---\ntitle: 成分句法分析综述\ndate: 2018-09-26 12:53:10\ntop: true\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- NLP\n- 神经网络\n- 深度学习\n- 句法分析\ncategories:\n- 句法分析\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=461153715&auto=1&height=66\"></iframe></div>\n\n> 一直以来想对保研到现在一年多看过的论文进行一个总结，正好赶上下周二要讲组会，所以将自己看过的成分句法分析相关的论文梳理一下，写一个粗略的综述。可能有很多细节还不是很懂，理解有误，还请大家指正。\n\n**PPT地址：**[A Summary of Constituent Parsing](https://github.com/godweiyang/files-backup/tree/master/lecture/ppt1)\n**代码地址：**[Constituent Parsing](https://github.com/godweiyang/ConstituentParsing)\n\n# 介绍\n---\n成分句法分析（constituent parsing）是自然语言处理中的一个基础任务，它的任务是给定一个句子，分析出句子的短语结构句法树。例如给定句子“The little boy likes red tomatoes .”，它的成分句法树如下图所示：\n![](syntactic_tree.png)\n成分句法分析可以利用到许多下游任务中去，比如情感分析可以利用句子的成分句法树来进行递归神经网络建模，从而分析出句子的情感。也可以利用在其他基础任务中去，比如可以将训练好的成分句法树直接转为依存句法树，从而提升依存句法分析的准确率。\n\n传统的成分句法分析方法主要是规则（grammar）和统计的，比如结合两者的概率上下文无关文法（PCFG），在此基础上产生了应用广泛的CKY解码算法。CKY算法本质上是一种动态规划算法，本文之后要讲到的chart-based模型的解码算法也是基于动态规划算法的，和CKY算法十分地相似。\n\nSocher在2013年又提出了组合向量文法（CVG），将递归神经网络应用到了成分句法分析中，给每个短语结构赋予了向量表示。但是这种方法还是需要用到规则，采用CKY算法解码，时间效率比较低。还有一种基于CRF的神经网络句法分析方法，将离散的特征转化为了连续的特征表示。\n\n不过，上面这些方法统统都不在本文的讨论范围之内。本文讨论近两年来研究最热门的几种模型，主要包括基于转移系统（transition-based）的模型、基于动态规划（chart-based）解码的模型、基于自顶向下贪心（greedy top-down）解码的模型和一些将预测树结构转化为预测序列（sequence to sequence）的模型。\n\n# 基于转移系统的模型\n---\n基于转移系统的模型主要分为三大类。第一种是自底向上（bottom-up）的系统，代表性论文有Transition-based Neural Constituent Parsing等。第二种是自顶向下（top-down）的系统，代表性论文有Recurrent Neural Network Grammars和Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles等。最后一种是2017年提出的基于中序遍历（in-order）的系统，代表性论文有In-Order Transition-based Constituent Parsing等。\n\n在这三类系统的基础之上，许多人又做了非常多的改进。例如提出了动态指导（dynamic oracle）技术，来解决序列预测中的exposure bias问题（具体含义之后会讲到）。还有使用强化学习中的policy gradient来代替dynamic oracle，解决了针对不同转移系统需要设计不同的dynamic oracle的问题。\n\n基于转移的句法分析系统主要包含两个组成成分，一个是栈（stack），用来存放已分析的句法结构，另一个是缓存（buffer），用来存放待分析的句子。而预测句法树结构就转化为了预测转移系统每一个时刻应该采取的动作（action）序列。下面我们分别介绍几种不同的转移系统，我们用三元组$[S, B, T]$来表示转移系统每一个时刻的状态，分别代表栈、buffer的第一个单词下标、句法分析结束标志。\n\n## 自底向上的转移系统\n自底向上的转移系统是根据句法树的后序遍历（post-order）顺序进行句法分析的，首先将buffer中的单词移进栈里，然后将栈顶的若干个单词归约为它们的父结点，直至最后buffer为空并且栈里只有一个根节点。\n\n在句法分析之前，首先要对句法树进行二叉化，这一点在传统的CKY算法中也会用到。例如对于之前的那棵句法树，二叉化后就变成了下图所示：\n![](binarized_syntactic_tree.png)\n\n自底向上转移系统的action形式化定义如下：\n![](bottom_up.jpg)\n其中SHIFT动作就是将buffer里面的第一个单词移进栈里。REDUCE-L/R-X动作就是将栈顶的两个元素出栈，并且归约为它们的父结点X，然后再将父结点入栈，而L和R就是用来区分左儿子和右儿子谁是头结点（head branch）。Unary-X动作就是将栈顶元素出栈，并且归约为父结点X，这个动作是用来预测一元产生式的。最后FINISH动作用来判断句法分析是否结束。\n\n注意到这里有一个问题：为什么这里一定要提前对句法树进行二叉化？主要原因是因为自底向上系统有个弊端，就是在不停地SHIFT之后，你不仅要预测哪一步开始REDUCE，还得预测REDUCE的话要REDUCE栈顶的多少个元素，这样预测的状态数就大大增加，导致训练时间也增加了许多。而二叉化后每次预测就只需要预测哪一步REDUCE就行了，每次REDUCE只REDUCE栈顶的两个元素。\n\n对于上面的句法树，用自底向上系统分析的过程如下图所示：\n![](bottom_up_example.jpg)\n自底向上转移系统的优点就是可以充分利用已经生成的子树信息，来辅助后面的子树预测。\n\n但是缺点也很显然，因为无法知道父结点以及再上层的父结点信息，所以丢失了许多有用的全局信息，这也有点类似于CKY算法的弊端了，同样只能根据局部的子树信息预测当前子树。\n\n另一个缺点就是需要提前进行二叉化，虽然二叉化加入了head结点信息，事实证明是很有用的，但是head结点的标注需要许多语义学知识，也可以用神经网络来自己学习到head结点，但是二叉化总归是比较麻烦的。一个较为简洁的做法就是，用空结点$\\emptyset$来作为本不应该归约的两个结点的临时结点，在还原树结构的时候忽略这种空结点，这样就可以隐式地进行二叉化操作了。\n\n## 自顶向下的转移系统\n自顶向下的转移系统利用的是句法树的前序遍历（pre-order）序列，首先将父结点入栈，然后不断操作直到它的子结点全部入栈，这时将父结点连同所有子结点全部归约为上一层的父结点。\n\n自顶向下转移系统的action形式化定义如下：\n![](top_down.jpg)\n其中SHIFT动作和之前一样，都是将buffer的第一个单词入栈。而NT-X动作就是将父结点X入栈。REDUCE动作就是将栈顶若干个元素直到它们的第一个父结点为止都出栈，然后归约为一个结点，再次入栈。注意到这里不同于自底向上系统的地方是没有FINISH动作，笔者也没有找到相关解释，猜测可能是因为自底向上系统存在一元动作Unary-X，所以最后根节点可能会无限归约下去，需要通过FINISH来提前终止分析。当然其实转移系统的动作定义并没有严格的要求，不同论文定义的也都不一样，但是都大同小异，也就是都存在SHIFT-REDUCE动作。\n\n对于上面的句法树，用自顶向下系统分析的过程如下图所示：\n![](top_down_example.jpg)\n\n自顶向下系统的优缺点和自底向上系统恰好互补。优点就是可以充分利用全局信息，例如父结点的信息，并且不需要进行二叉化，因为REDUCE的时候只要往栈里找到第一个父结点就行了。而缺点就是无法利用局部信息，也就是子树信息，同样NT-X动作也可能会出现无限多次执行的情况，所以要加上一些限制条件。\n\n## In-order转移系统\nZhang和Liu两人在2017年提出了in-order转移系统，它利用的是句法树的中序遍历（in-order）序列，首先将一个子结点SHIFT入栈，然后将父结点入栈，再不断操作直到该父结点的剩余子结点全部入栈，然后对它们进行归约。\n\nin-order转移系统的action形式化定义如下：\n![](in_order.jpg)\n其中SHIFT动作和之前一样，都是将buffer的第一个单词入栈。PJ-X动作是预测出当前栈顶的元素的父结点X。REDUCE动作就是将栈顶的若干个元素归约为最里面倒数第二个元素，也就是它们的父结点。\n\n对于上面的句法树，用in-order系统分析的过程如下图所示：\n![](in_order_example.jpg)\n\nin-order转移系统提出的动机也很符合人类的直觉，在你读一个句子的时候，如果你第一个看到的单词是“The”，那么你脑海中可能会想到后面紧跟着的可能是个名词短语NP，然后你继续往后看，果然验证了你的猜想，后面的单词序列是“red tomatoes”。\n\nin-order转移系统的优点恰好结合了前面两种转移系统，既可以考虑到局部信息，又可以考虑到全局信息。\n\n**模型变体：**in-order系统就是在自顶向下系统的基础上，在父结点入栈之前先入栈了1个子结点。那么如果稍加修改，还可以提前入栈两个、三个等等。假设在父结点入栈之前先入栈了$k$个子结点，那么称这种转移系统为k-in-order系统。特别地，如果$k = 0$，那么这就是自顶向下转移系统；如果$k = 1$，那么这就是in-order转移系统；$k = \\infty$，那么这就是自底向上转移系统。\n\n## 模型框架\n上面说到的三种基于转移的句法分析系统，都可以概括为预测每一个时刻的action，那么每一个时刻的状态如何表示就是最重要的问题。在每一个时刻，最重要的组成部分有三个，分别是当前栈的状态、当前buffer的状态、当前已生成的action序列的状态。\n\n当前状态的表示通过下图所示的三个LSTM得到：\n![](transition_framework.png)\n其中栈和buffer的编码使用的是stack-LSTM，而action的编码使用的是普通的LSTM。最后将三种LSTM输出拼接到一起，用softmax预测出正确的action。\n\n另一个问题就是如何编码栈里的短语。在以前都是通过递归神经网络或者树状LSTM来编码树状结构短语的，而在这里的话直接将父结点和子结点合为一个序列，送入到双向LSTM中就行了，具体形式如下图所示：\n![](composition.png)\n\n## 系统改进\n**基于span的自底向上的转移系统**\n黄亮在2016年论文里提出了转移系统的栈里用span的左右边界数值来代替分析出来的子树，并且将REDUCE动作和预测label分开来进行，他们的转移系统action形式化定义如下：\n![](span_based_bottom_up.png)\n可以看出，在第偶数个时刻，只预测结构化动作sh和comb(对应于之前转移系统的SHIFT和REDUCE)，sh动作从buffer中移进栈里一个单词$w_{j+1}$，栈顶的span就变为了$span(j, j+1)$。而comb动作就是将栈顶的两个span归约为一个span。在第奇数个时刻，只预测栈顶span的label，如果这个span的确能构成一个短语，那么就预测它的label，否则的话说明只是个临时结点，就预测为空结点，这一点在之前就已经提到过了。\n\n论文里给出了一个具体的例子：\n![](span_based_bottom_up_tree.png)\n![](span_based_bottom_up_example.png)\n\n文章开头提供的代码也是基于这个转移系统的，一个好处是用span来表示的话比较方便，代码也好写。另一个好处就是每一个时刻的状态可以不再用三个LSTM动态地算出来了，而是可以提前用双向LSTM对句子进行编码，然后用两个单词输出的差值作为单词之间span的表示，最后用它来计算转移状态的向量表示。\n\n例如在某个时刻，栈首元素为$(i, k, j)$，那么结构化预测就采用四个span特征：$span(0, i), span(i, k), span(k, j), span(j, n)$，为什么要用这四个呢？因为comb动作涉及到栈首的两个span，而之前已经生成的$span(0, i)$也可以作为局部信息指导预测，buffer中的$span(j, n)$也要考虑到，因为可能预测为sh动作，同时也可以作为全局信息参考。\n\n而label预测就只要用到三个span特征：$span(0, k), span(k, j), span(j, n)$，因为label动作只需要对栈首的span进行预测，所以三个特征就足够了。\n\n**生成模型RNNG**\nRNNG是2016年提出的一种文法，全称叫做“Recurrent Neural Network Grammar”，是一种生成式模型。RNNG本质上就是自顶向下的转移系统，动作定义和之前介绍的基本一致。只是之前介绍的自顶向下的转移系统是判别式模型，每次SHIFT的单词都是buffer中给定的。而RNNG每次SHIFT的单词需要通过动作GEN(x)预测得出，最终模型对预测出来的句子分析出句法树。\n\n正式一点就是，对于句子$x$和对应的句法树$y$，判别式模型是对条件概率$p(y | x)$进行建模，而生成式模型是对联合概率$p(x, y)$进行建模。\n\n而RNNG的另一个重要应用是语言模型（language model），也就是建模$p(x)$。因为$p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}$，所以只需要枚举出所有可能的句法树$y$即可，但是这是指数级别的，显然不现实，这时候就需要用到“重要性采样（importance sampling）”。\n\n令$q(y | x)$为RNNG作为判别式模型的时候产生句子$y$的条件概率，那么$p(x)$可以改写为\n\\\\[p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}  = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {q(y|x)w(x,y)}  = {E_{q(y|x)}}w(x,y)\\\\]\n然后就可以采用蒙特卡罗方法进行采样了，从分布$q(y | x)$中采样$N$个样本：\n\\\\[{y^{(i)}} \\sim q(y|x),i = 1,2, \\ldots ,N\\\\]\n那么$p(x)$就可以近似表示为：\n\\\\[p(x) = {E_{q(y|x)}}w(x,y)\\mathop  \\approx \\limits^{MC} \\frac{1}{N}\\sum\\limits_{i = 1}^N {w(x,{y^{(i)}})} \\\\]\n\n**Dynamic Oracle**\n文章开头提到了一个转移系统会遇到的问题：“exposure bias问题”，这个问题意思就是训练的时候转移系统的每个时刻都是按照标准的action来进行训练的，但是如果测试的时候遇到了一个训练时从来没有遇见过的状态，这时候该怎么预测？如果预测错了，那么之后的时刻可能错的越来越离谱，偏差越来越大。\n\n解决的方法就是采用Dynamic Oracle技术，在预测错误的时候，按照标准树的结构指导转移系统向着错误尽可能小的状态进行转移。但是比较麻烦的是，对于每一个转移系统，可能大家定义的状态都不尽相同，所以Dynamic Oracle要针对特定的转移系统单独设计，一个解决方法就是之后要提到的Policy Gradient方法。\n\n这里举一个针对上面的“基于span的自底向上的转移系统”的Dynamic Oracle例子。\n\n首先是结构化oracle，如果当前的栈首span是$span(i, j)$，那么就在标准树中寻找所有包含$span(i, j)$并且最小的span，记为$span(p, q)$，那么下一步可以采取的动作定义如下：\n![](structural_oracle.png)\n也就是说，如果$span(p, q)$比$span(i, j)$右边界多出一部分，那么为了向着标准span靠近，就只能sh单词入栈；否则如果左边界多出一部分，那么就必须先comb之前的两个span，扩大span左边的边界；否则的话左右两边都有空出，那就随机预测一个动作就行了。\n\n然后是label oracle，这个就很简单了，如果当前的栈首span是$span(i, j)$，只需要在标准树中寻找是否存在$span(i, j)$，如果存在，那么就给他正常预测label就行了；如果不存在，那么直接预测为空结点。oracle定义如下:\n![](label_oracle.png)\n而关于这个Dynamic Oracle的证明和更加深入的理解，参见我之前写过的一篇博客：[深入理解成分句法分析中的Dynamic Oracle](https://godweiyang.com/2018/08/03/dynamic-oracles/)。\n\n但是如果直接按照这个Dynamic Oracle来实现代码的话，效果不会有什么提升，原因就是训练的时候遇到的错误情形还是太少了，不足以应付所有的测试阶段遇到的未知情形。所以要在训练阶段加上exploration操作，也就是转移的每一个时刻，不要总是预测概率最大的action，而是以一定的概率随机选择一个action，诱导系统进入一个错误的状态，这样系统就能学到更多错误状态下的回正技巧了。\n\n**Policy Gradient**\n序列预测存在着两个问题：一个就是之前提到的exposure bias问题，另一个就是loss mismatch问题，意思就是在每一个状态的loss累和得到最终整个序列的loss，但是因为是贪心解码，并没有考虑到之后的结果，所以某一个状态的loss其实并不能代表整个序列的loss。\n\nDynamic Oracle可以解决第一个问题，如果修改一下也可以解决第二个问题，但是Dynamic Oracle需要针对特定的转移系统单独设计，不能通用，所以这里引入了强化学习中的Policy Gradient来解决这个问题。\n\n首先用风险函数（risk objective）代替原来的损失函数：\n\\\\[\\mathcal{R}(\\theta ) = \\sum\\limits_{i = 1}^N {\\sum\\limits_y {p(y|{x^{(i)}};\\theta )\\Delta (y,{y^{(i)}})} } \\\\]\n其中$(x^{(i)}, y^{(i)})$是训练集中的标准数据。可以看出，风险函数其实就是所有可能的句法树和标准树的差异${\\Delta (y,{y^{(i)}})}$的期望，训练的目的就是最小化所有句法树和标准树的差异，这样就消除了之前提到的两个问题。\n\n但是可以发现，显然不可能枚举所有可能的句法树，这时候想到了之前用到的重要性采样方法。\n\n但是不能直接对风险函数进行重要性采样，不然就会发现采样后的函数$\\theta$消失了！那就没办法求导了。所以先对风险函数求导：\n\\\\[\\begin{array}{l}\\nabla \\mathcal{R}(\\theta ) = \\sum\\limits_{i = 1}^N {\\sum\\limits_y {p(y|{x^{(i)}})\\Delta (y,{y^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )} } \\\\ \\approx \\sum\\limits_{i = 1}^N {\\sum\\limits_{y \\in \\mathcal{Y}({x^{(i)}})} {\\Delta (y,{y^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )} } \\end{array}\\\\]\n这里的$y$是根据分布${p(y|{x^{(i)}})}$采样得到的结果。实验中可以将标准树也加入到采样结果中，可以提升准确率。\n至于$\\log$项是怎么来的，可以如下推导得来：\n\\\\[\\nabla p(y|{x^{(i)}};\\theta ) = p(y|{x^{(i)}})\\frac{ {\\nabla p(y|{x^{(i)}};\\theta )}}{ {p(y|{x^{(i)}};\\theta )}} = p(y|{x^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )\\\\]\n\n\n# 编码解码模型\n---\n上面介绍完了基于转移的句法分析系统，下面开始介绍编码解码（Encoder-Decoder）模型。\n\n模型的大致框架如下图所示：\n![](chart_based.png)\n首先通过编码器将句子编码成向量，然后用解码器对向量操作，解码出句法树。\n\n## 编码器（Encoder）\n编码器的主要目的是将每个短语编码成语义向量，用来给解码器预测splits和labels。\n\n编码器主要有两种，一种是简单的双向LSTM编码，下图是一个用双向LSTM对句子进行编码的示例：\n![](bi_lstm.jpg)\n例如要编码“played soccer in”这个短语，那么就用“in”处的前向LSTM输出减去“She”处的前向LSTM输出，得到了短语的前向LSTM表示。类似的，用“played”处的反向LSTM输出减去“the”处的反向LSTM输出，得到了短语的反向LSTM表示。\n\n另一种是multi-headed self-attention编码。Attention是谷歌在“Attention is all you need”中提出的一种方法，严格来说它并不能算作一种模型，只能说是一种机制。具体原理在这里就不细讲了，可以直接去看一下原文。\n\n大体框架就是，每个单词的词向量经过三个不同的$W$矩阵变换之后得到了三个不同的向量表示$q, k, v$，分别拼接起来组成了矩阵$Q, K, V$，其中$Q, K$相乘就得到了任意两个单词之间的相似度矩阵，然后对矩阵每一行进行softmax就得到了每一个单词对于其他所有单词的权重。再乘上矩阵$V$就得到了它对其他所有单词的加权求和，以此来作为它的向量表示。\n\n下图就是self-attention的框架图：\n![](single_attention.jpg)\n形式化定义就是：\n\\\\[S(X) = \\left[ { {\\rm{softmax}}\\left( {\\frac{ {Q{K^{\\rm{T}}}}}{ {\\sqrt { {d_k}} }}} \\right)V} \\right]{W_O}\\\\]\n其中$Q = XW_Q, K = XW_K, V = XW_V$，$d_k$是向量$q, k$的维度，用它作为分母是为了防止数值太大溢出。最后的矩阵$W_O$是为了将输出映射到与输入相同的维度。\n\n而multi-headed self-attention就是将刚刚的attention计算8次，并且相加：\n\\\\[M(X) = \\sum\\limits_{i = 1}^8 {S(X)} \\\\]\n注意这8个attention的参数矩阵是不共享的，也可以不相加，改为直接拼接。\n\n最终的编码器模型如下图所示：\n![](multi_headed_attention.jpg)\n也就是说，将刚刚的multi-headed self-attention经过一层layernorm之后再经过一层前馈神经网络，最后再经过一层layernorm得到输出。将上述模型复制8份，首尾拼接，即前面的输出作为后面的输入，即可得到编码器最终的输出，也就是每个单词最终的向量表示。\n\n至于每个短语的表示，和双向LSTM编码一样，用短语边界两个单词向量的差值作为短语的表示。只是这里没有前向后向的概念，所以要将每个单词向量一分为二，前一半作为前向向量，后一半作为后向向量。当然在实际实现中，将单数维度提取出来作为前向表示，双数维度提取出来作为后向表示。\n\n## 解码器（Decoder）\n得到了每个短语的向量表示之后，就需要对它们进行解码，得到最终的句法树，解码的方法主要有两种。\n**基于动态规划解码的模型**\n这种方法在论文中被叫做“chart-based model”，正如其名，就是利用一个数组来进行动态规划，求出每个span的最优split和最优label。\n\n定义一棵句法树的分数为所有子结点的label分数之和，即：\n\\\\[{s_{tree}}(T) = \\sum\\limits_{(l,(i,j)) \\in T} { {s_{label}}(i,j,l)} \\\\]\n其实原本论文中的定义还多了一项span的分数，但是由于具体实现中去掉这一项并没有什么影响，所以为了简便我就只算label分数了。\n\n要使得句法树分数最大，不可能枚举所有的句法树，那就只能用动态规划算法求解了。对于任意一个$span(i, j)$，我们将它通过编码器产生的表示$s_{ij}$输入到前馈神经网络中，直接取得分最高的那一维作为最优label，即：\n\\\\[s_{label}(i, j, l) = [Vg(Ws_{ij}+b)]\\_l\\\\]\n而对于split，遍历所有的split，取两个子结点与自己结点得分之和最高的那个split即可：\n\\\\[s_{split}(i, j, k) = s_{label}(i, j, l_{ij}) + s_{label}(i, k, l_{ik}) + s_{label}(k, j, l_{kj})\\\\]\n\n最后的训练过程和以往一样，采用max-margin训练方法，即使得标准树的得分比预测树的得分至少高一个margin，在这里margin大小定义为两棵树不同短语的数量，最终的损失函数定义为：\n\\\\[\\mathcal{L}(\\theta ) = \\max \\left( {0,\\Delta (\\hat T,T) - {s_{tree}}(T) + {s_{tree}}(\\hat T)} \\right)\\\\]\n\n**基于自顶向下贪心解码的模型**\n基于动态规划的解码算法时间复杂度为$O(n^3)$，对于长度大一点的句子来说还是有点不可接受的。但是如果采用自顶向下、贪心地去选择每一个span的最优split和最优label，那么时间复杂度将降到$O(n^2)$。具体操作过程如下，首先从根节点也就是$span(0, n)$开始，选择一个split，使得两个子结点与自己结点得分之和最高，而label还是向之前那样直接通过短语的向量计算得出。具体公式为：\n\\\\[\\begin{array}{l}\\hat l = \\mathop {\\arg \\max }\\limits_l [{s_{label}}(i,j,l)]\\\\\\hat k = \\mathop {\\arg \\max }\\limits_k [{s_{split}}(i,k,l)]\\end{array}\\\\]\n而由于贪心解码和转移系统action预测一样，在预测阶段可能会遇到训练阶段没有碰到过的状态，所以也需要用到Dynamic Oracle。同样也需要用到exploration，来增加训练阶段遇到的错误状态数。\n\n# Sequence to Sequence模型\n---\n上面最主流的两大模型：转移系统和编码解码模型都已经介绍完了，下面介绍几种比较新颖的方法。\n\n大家都知道句法树和某些序列存在一一对应关系，句法树可以唯一转换成序列，序列也可以唯一转换成句法树，所以预测句法树的问题就转变为了预测序列问题，下面几种方法都是将句法树转换为了某种序列来进行预测。\n\n## 树结构转化为括号序列\n这种方法思路特别简单，因为训练集里原始数据的表示形式就是括号序列嘛，所以就采用语言模型直接预测出括号序列的概率。\n\n但是不可能枚举出所有的句法树括号序列，所以最终还是只对其他句法分析器预测出来的最好的若干棵树进行预测概率，然后重排序选出概率最高的一棵树。\n\n## 句法距离（Syntactic Distance）\n这个方法就很新颖了，本质上也是将树结构转换成了唯一对应的序列。\n![](syntactic_distance_example.jpg)\n首先看上面一张图，对于长度为$n$的句子，存在一个长度为$n - 1$的数字序列，满足如下条件：$n$个单词存在$n - 1$个两两相邻的单词对，而两个相邻的单词的最近公共祖先（LCA）在句法树中有一个高度，所以这$n - 1$个数的大小关系恰好对应了从左向右任意两个相邻单词对的LCA的高度的大小关系。\n\n拿上面那张图为例，“She”和“enjoys”的最近公共祖先是“S”，所以高度最高，对应的数字也最大。“enjoys”和“playing”的最近公共祖先是“VP”，高度排第三，所以对应的数字大小也是排第三。依次类推，剩下的数也满足这个性质。可以证明，这个数字序列和句法树是一一对应的。更进一步可以发现，这个序列其实就是“中序遍历的结点的高度”，文中将其称为句法距离。\n\n预测这个序列也很简单，通过一个双向LSTM，然后将每相邻两个单词的输出做一次卷积操作（因为要预测相邻两个单词的LCA高度嘛），然后再将输出送到一个双向LSTM中去，最后通过一个前馈神经网络得到每相邻两个单词的数字。\n\n而从树到序列和从序列到树的算法都很简单，这里就不详述了，可以直接去看论文。\n\n# 总结\n---\n## 实验结果\n下面列出了成分句法分析领域目前为止最好的一些结果：\n![](results.jpg)\n最好的是采用self-attention编码器+外部预训练词向量ELMo的模型，第二是模型融合+重排序之后的结果，之后的模型也基本都是本文介绍过的，最厉害的就是最后一个2006年的模型，十几年了依然如此强悍。\n\n## 心得体会\n虽然看起来貌似已经看了不少的成分句法分析相关的工作了，但是其实还有很多细节性的工作还没有去了解。前两年ACL等顶会成分句法分析的论文都很少，但是18年又好像多了起来，但终究还是伯克利Dan Klein、斯坦福Socher、黄亮等一批大佬在做这个，想在巨人的肩膀上面做出点东西还是很有挑战性的。\n\n目前能想到的工作只有在编码器上面做文章，学习出语义更加丰富的短语表示。或者可以采用失传多年的递归神经网络，解码时对句法树进行建模，但是随便试了一下，速度很慢而且存在梯度消失的问题，效果也不是很好。转移系统的话暂时也想不出什么好的点子，序列预测的话如果能再想出个新颖的一一对应的序列就好了。\n\n前路还很长，说长也不长了，只有三年不到的时间了，做不出东西就要延毕了。但愿能在有限的三年时间里做出点成果，提高自己的代码能力，对这个领域也有更加深入的理解！\n\n# 参考文献\n---\n[ACL15] Transition-based Neural Constituent Parsing\n[NAACL16] Recurrent Neural Network Grammars\n[EMNLP16] Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles\n[TACL17] In-Order Transition-based Constituent Parsing\n[EMNLP17] Effective Inference for Generative Neural Parsing\n[ACL18] Policy Gradient as a Proxy for Dynamic Oracles in Constituency Parsing\n[ACL17] A Minimal Span-Based Neural Constituency Parser\n[ACL18] Constituency Parsing with a Self-Attentive Encoder\n[EMNLP16] Parsing as Language Modeling\n[ACL18] Straight to the Tree: Constituency Parsing with Neural Syntactic Distance\n","slug":"constituent-parsing-summary","published":1,"updated":"2019-08-01T09:17:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyyqfjig00047cahh3ox8cf6","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=461153715&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>一直以来想对保研到现在一年多看过的论文进行一个总结，正好赶上下周二要讲组会，所以将自己看过的成分句法分析相关的论文梳理一下，写一个粗略的综述。可能有很多细节还不是很懂，理解有误，还请大家指正。</p>\n</blockquote>\n<p><strong>PPT地址：</strong><a href=\"https://github.com/godweiyang/files-backup/tree/master/lecture/ppt1\" target=\"_blank\" rel=\"noopener\">A Summary of Constituent Parsing</a><br><strong>代码地址：</strong><a href=\"https://github.com/godweiyang/ConstituentParsing\" target=\"_blank\" rel=\"noopener\">Constituent Parsing</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>成分句法分析（constituent parsing）是自然语言处理中的一个基础任务，它的任务是给定一个句子，分析出句子的短语结构句法树。例如给定句子“The little boy likes red tomatoes .”，它的成分句法树如下图所示：<br><img src=\"syntactic_tree.png\" alt><br>成分句法分析可以利用到许多下游任务中去，比如情感分析可以利用句子的成分句法树来进行递归神经网络建模，从而分析出句子的情感。也可以利用在其他基础任务中去，比如可以将训练好的成分句法树直接转为依存句法树，从而提升依存句法分析的准确率。</p>\n<p>传统的成分句法分析方法主要是规则（grammar）和统计的，比如结合两者的概率上下文无关文法（PCFG），在此基础上产生了应用广泛的CKY解码算法。CKY算法本质上是一种动态规划算法，本文之后要讲到的chart-based模型的解码算法也是基于动态规划算法的，和CKY算法十分地相似。</p>\n<p>Socher在2013年又提出了组合向量文法（CVG），将递归神经网络应用到了成分句法分析中，给每个短语结构赋予了向量表示。但是这种方法还是需要用到规则，采用CKY算法解码，时间效率比较低。还有一种基于CRF的神经网络句法分析方法，将离散的特征转化为了连续的特征表示。</p>\n<p>不过，上面这些方法统统都不在本文的讨论范围之内。本文讨论近两年来研究最热门的几种模型，主要包括基于转移系统（transition-based）的模型、基于动态规划（chart-based）解码的模型、基于自顶向下贪心（greedy top-down）解码的模型和一些将预测树结构转化为预测序列（sequence to sequence）的模型。</p>\n<h1 id=\"基于转移系统的模型\"><a href=\"#基于转移系统的模型\" class=\"headerlink\" title=\"基于转移系统的模型\"></a>基于转移系统的模型</h1><hr>\n<p>基于转移系统的模型主要分为三大类。第一种是自底向上（bottom-up）的系统，代表性论文有Transition-based Neural Constituent Parsing等。第二种是自顶向下（top-down）的系统，代表性论文有Recurrent Neural Network Grammars和Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles等。最后一种是2017年提出的基于中序遍历（in-order）的系统，代表性论文有In-Order Transition-based Constituent Parsing等。</p>\n<p>在这三类系统的基础之上，许多人又做了非常多的改进。例如提出了动态指导（dynamic oracle）技术，来解决序列预测中的exposure bias问题（具体含义之后会讲到）。还有使用强化学习中的policy gradient来代替dynamic oracle，解决了针对不同转移系统需要设计不同的dynamic oracle的问题。</p>\n<p>基于转移的句法分析系统主要包含两个组成成分，一个是栈（stack），用来存放已分析的句法结构，另一个是缓存（buffer），用来存放待分析的句子。而预测句法树结构就转化为了预测转移系统每一个时刻应该采取的动作（action）序列。下面我们分别介绍几种不同的转移系统，我们用三元组$[S, B, T]$来表示转移系统每一个时刻的状态，分别代表栈、buffer的第一个单词下标、句法分析结束标志。</p>\n<h2 id=\"自底向上的转移系统\"><a href=\"#自底向上的转移系统\" class=\"headerlink\" title=\"自底向上的转移系统\"></a>自底向上的转移系统</h2><p>自底向上的转移系统是根据句法树的后序遍历（post-order）顺序进行句法分析的，首先将buffer中的单词移进栈里，然后将栈顶的若干个单词归约为它们的父结点，直至最后buffer为空并且栈里只有一个根节点。</p>\n<p>在句法分析之前，首先要对句法树进行二叉化，这一点在传统的CKY算法中也会用到。例如对于之前的那棵句法树，二叉化后就变成了下图所示：<br><img src=\"binarized_syntactic_tree.png\" alt></p>\n<p>自底向上转移系统的action形式化定义如下：<br><img src=\"bottom_up.jpg\" alt><br>其中SHIFT动作就是将buffer里面的第一个单词移进栈里。REDUCE-L/R-X动作就是将栈顶的两个元素出栈，并且归约为它们的父结点X，然后再将父结点入栈，而L和R就是用来区分左儿子和右儿子谁是头结点（head branch）。Unary-X动作就是将栈顶元素出栈，并且归约为父结点X，这个动作是用来预测一元产生式的。最后FINISH动作用来判断句法分析是否结束。</p>\n<p>注意到这里有一个问题：为什么这里一定要提前对句法树进行二叉化？主要原因是因为自底向上系统有个弊端，就是在不停地SHIFT之后，你不仅要预测哪一步开始REDUCE，还得预测REDUCE的话要REDUCE栈顶的多少个元素，这样预测的状态数就大大增加，导致训练时间也增加了许多。而二叉化后每次预测就只需要预测哪一步REDUCE就行了，每次REDUCE只REDUCE栈顶的两个元素。</p>\n<p>对于上面的句法树，用自底向上系统分析的过程如下图所示：<br><img src=\"bottom_up_example.jpg\" alt><br>自底向上转移系统的优点就是可以充分利用已经生成的子树信息，来辅助后面的子树预测。</p>\n<p>但是缺点也很显然，因为无法知道父结点以及再上层的父结点信息，所以丢失了许多有用的全局信息，这也有点类似于CKY算法的弊端了，同样只能根据局部的子树信息预测当前子树。</p>\n<p>另一个缺点就是需要提前进行二叉化，虽然二叉化加入了head结点信息，事实证明是很有用的，但是head结点的标注需要许多语义学知识，也可以用神经网络来自己学习到head结点，但是二叉化总归是比较麻烦的。一个较为简洁的做法就是，用空结点$\\emptyset$来作为本不应该归约的两个结点的临时结点，在还原树结构的时候忽略这种空结点，这样就可以隐式地进行二叉化操作了。</p>\n<h2 id=\"自顶向下的转移系统\"><a href=\"#自顶向下的转移系统\" class=\"headerlink\" title=\"自顶向下的转移系统\"></a>自顶向下的转移系统</h2><p>自顶向下的转移系统利用的是句法树的前序遍历（pre-order）序列，首先将父结点入栈，然后不断操作直到它的子结点全部入栈，这时将父结点连同所有子结点全部归约为上一层的父结点。</p>\n<p>自顶向下转移系统的action形式化定义如下：<br><img src=\"top_down.jpg\" alt><br>其中SHIFT动作和之前一样，都是将buffer的第一个单词入栈。而NT-X动作就是将父结点X入栈。REDUCE动作就是将栈顶若干个元素直到它们的第一个父结点为止都出栈，然后归约为一个结点，再次入栈。注意到这里不同于自底向上系统的地方是没有FINISH动作，笔者也没有找到相关解释，猜测可能是因为自底向上系统存在一元动作Unary-X，所以最后根节点可能会无限归约下去，需要通过FINISH来提前终止分析。当然其实转移系统的动作定义并没有严格的要求，不同论文定义的也都不一样，但是都大同小异，也就是都存在SHIFT-REDUCE动作。</p>\n<p>对于上面的句法树，用自顶向下系统分析的过程如下图所示：<br><img src=\"top_down_example.jpg\" alt></p>\n<p>自顶向下系统的优缺点和自底向上系统恰好互补。优点就是可以充分利用全局信息，例如父结点的信息，并且不需要进行二叉化，因为REDUCE的时候只要往栈里找到第一个父结点就行了。而缺点就是无法利用局部信息，也就是子树信息，同样NT-X动作也可能会出现无限多次执行的情况，所以要加上一些限制条件。</p>\n<h2 id=\"In-order转移系统\"><a href=\"#In-order转移系统\" class=\"headerlink\" title=\"In-order转移系统\"></a>In-order转移系统</h2><p>Zhang和Liu两人在2017年提出了in-order转移系统，它利用的是句法树的中序遍历（in-order）序列，首先将一个子结点SHIFT入栈，然后将父结点入栈，再不断操作直到该父结点的剩余子结点全部入栈，然后对它们进行归约。</p>\n<p>in-order转移系统的action形式化定义如下：<br><img src=\"in_order.jpg\" alt><br>其中SHIFT动作和之前一样，都是将buffer的第一个单词入栈。PJ-X动作是预测出当前栈顶的元素的父结点X。REDUCE动作就是将栈顶的若干个元素归约为最里面倒数第二个元素，也就是它们的父结点。</p>\n<p>对于上面的句法树，用in-order系统分析的过程如下图所示：<br><img src=\"in_order_example.jpg\" alt></p>\n<p>in-order转移系统提出的动机也很符合人类的直觉，在你读一个句子的时候，如果你第一个看到的单词是“The”，那么你脑海中可能会想到后面紧跟着的可能是个名词短语NP，然后你继续往后看，果然验证了你的猜想，后面的单词序列是“red tomatoes”。</p>\n<p>in-order转移系统的优点恰好结合了前面两种转移系统，既可以考虑到局部信息，又可以考虑到全局信息。</p>\n<p><strong>模型变体：</strong>in-order系统就是在自顶向下系统的基础上，在父结点入栈之前先入栈了1个子结点。那么如果稍加修改，还可以提前入栈两个、三个等等。假设在父结点入栈之前先入栈了$k$个子结点，那么称这种转移系统为k-in-order系统。特别地，如果$k = 0$，那么这就是自顶向下转移系统；如果$k = 1$，那么这就是in-order转移系统；$k = \\infty$，那么这就是自底向上转移系统。</p>\n<h2 id=\"模型框架\"><a href=\"#模型框架\" class=\"headerlink\" title=\"模型框架\"></a>模型框架</h2><p>上面说到的三种基于转移的句法分析系统，都可以概括为预测每一个时刻的action，那么每一个时刻的状态如何表示就是最重要的问题。在每一个时刻，最重要的组成部分有三个，分别是当前栈的状态、当前buffer的状态、当前已生成的action序列的状态。</p>\n<p>当前状态的表示通过下图所示的三个LSTM得到：<br><img src=\"transition_framework.png\" alt><br>其中栈和buffer的编码使用的是stack-LSTM，而action的编码使用的是普通的LSTM。最后将三种LSTM输出拼接到一起，用softmax预测出正确的action。</p>\n<p>另一个问题就是如何编码栈里的短语。在以前都是通过递归神经网络或者树状LSTM来编码树状结构短语的，而在这里的话直接将父结点和子结点合为一个序列，送入到双向LSTM中就行了，具体形式如下图所示：<br><img src=\"composition.png\" alt></p>\n<h2 id=\"系统改进\"><a href=\"#系统改进\" class=\"headerlink\" title=\"系统改进\"></a>系统改进</h2><p><strong>基于span的自底向上的转移系统</strong><br>黄亮在2016年论文里提出了转移系统的栈里用span的左右边界数值来代替分析出来的子树，并且将REDUCE动作和预测label分开来进行，他们的转移系统action形式化定义如下：<br><img src=\"span_based_bottom_up.png\" alt><br>可以看出，在第偶数个时刻，只预测结构化动作sh和comb(对应于之前转移系统的SHIFT和REDUCE)，sh动作从buffer中移进栈里一个单词$w_{j+1}$，栈顶的span就变为了$span(j, j+1)$。而comb动作就是将栈顶的两个span归约为一个span。在第奇数个时刻，只预测栈顶span的label，如果这个span的确能构成一个短语，那么就预测它的label，否则的话说明只是个临时结点，就预测为空结点，这一点在之前就已经提到过了。</p>\n<p>论文里给出了一个具体的例子：<br><img src=\"span_based_bottom_up_tree.png\" alt><br><img src=\"span_based_bottom_up_example.png\" alt></p>\n<p>文章开头提供的代码也是基于这个转移系统的，一个好处是用span来表示的话比较方便，代码也好写。另一个好处就是每一个时刻的状态可以不再用三个LSTM动态地算出来了，而是可以提前用双向LSTM对句子进行编码，然后用两个单词输出的差值作为单词之间span的表示，最后用它来计算转移状态的向量表示。</p>\n<p>例如在某个时刻，栈首元素为$(i, k, j)$，那么结构化预测就采用四个span特征：$span(0, i), span(i, k), span(k, j), span(j, n)$，为什么要用这四个呢？因为comb动作涉及到栈首的两个span，而之前已经生成的$span(0, i)$也可以作为局部信息指导预测，buffer中的$span(j, n)$也要考虑到，因为可能预测为sh动作，同时也可以作为全局信息参考。</p>\n<p>而label预测就只要用到三个span特征：$span(0, k), span(k, j), span(j, n)$，因为label动作只需要对栈首的span进行预测，所以三个特征就足够了。</p>\n<p><strong>生成模型RNNG</strong><br>RNNG是2016年提出的一种文法，全称叫做“Recurrent Neural Network Grammar”，是一种生成式模型。RNNG本质上就是自顶向下的转移系统，动作定义和之前介绍的基本一致。只是之前介绍的自顶向下的转移系统是判别式模型，每次SHIFT的单词都是buffer中给定的。而RNNG每次SHIFT的单词需要通过动作GEN(x)预测得出，最终模型对预测出来的句子分析出句法树。</p>\n<p>正式一点就是，对于句子$x$和对应的句法树$y$，判别式模型是对条件概率$p(y | x)$进行建模，而生成式模型是对联合概率$p(x, y)$进行建模。</p>\n<p>而RNNG的另一个重要应用是语言模型（language model），也就是建模$p(x)$。因为$p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}$，所以只需要枚举出所有可能的句法树$y$即可，但是这是指数级别的，显然不现实，这时候就需要用到“重要性采样（importance sampling）”。</p>\n<p>令$q(y | x)$为RNNG作为判别式模型的时候产生句子$y$的条件概率，那么$p(x)$可以改写为<br>\\[p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}  = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {q(y|x)w(x,y)}  = {E_{q(y|x)}}w(x,y)\\]<br>然后就可以采用蒙特卡罗方法进行采样了，从分布$q(y | x)$中采样$N$个样本：<br>\\[{y^{(i)}} \\sim q(y|x),i = 1,2, \\ldots ,N\\]<br>那么$p(x)$就可以近似表示为：<br>\\[p(x) = {E_{q(y|x)}}w(x,y)\\mathop  \\approx \\limits^{MC} \\frac{1}{N}\\sum\\limits_{i = 1}^N {w(x,{y^{(i)}})} \\]</p>\n<p><strong>Dynamic Oracle</strong><br>文章开头提到了一个转移系统会遇到的问题：“exposure bias问题”，这个问题意思就是训练的时候转移系统的每个时刻都是按照标准的action来进行训练的，但是如果测试的时候遇到了一个训练时从来没有遇见过的状态，这时候该怎么预测？如果预测错了，那么之后的时刻可能错的越来越离谱，偏差越来越大。</p>\n<p>解决的方法就是采用Dynamic Oracle技术，在预测错误的时候，按照标准树的结构指导转移系统向着错误尽可能小的状态进行转移。但是比较麻烦的是，对于每一个转移系统，可能大家定义的状态都不尽相同，所以Dynamic Oracle要针对特定的转移系统单独设计，一个解决方法就是之后要提到的Policy Gradient方法。</p>\n<p>这里举一个针对上面的“基于span的自底向上的转移系统”的Dynamic Oracle例子。</p>\n<p>首先是结构化oracle，如果当前的栈首span是$span(i, j)$，那么就在标准树中寻找所有包含$span(i, j)$并且最小的span，记为$span(p, q)$，那么下一步可以采取的动作定义如下：<br><img src=\"structural_oracle.png\" alt><br>也就是说，如果$span(p, q)$比$span(i, j)$右边界多出一部分，那么为了向着标准span靠近，就只能sh单词入栈；否则如果左边界多出一部分，那么就必须先comb之前的两个span，扩大span左边的边界；否则的话左右两边都有空出，那就随机预测一个动作就行了。</p>\n<p>然后是label oracle，这个就很简单了，如果当前的栈首span是$span(i, j)$，只需要在标准树中寻找是否存在$span(i, j)$，如果存在，那么就给他正常预测label就行了；如果不存在，那么直接预测为空结点。oracle定义如下:<br><img src=\"label_oracle.png\" alt><br>而关于这个Dynamic Oracle的证明和更加深入的理解，参见我之前写过的一篇博客：<a href=\"https://godweiyang.com/2018/08/03/dynamic-oracles/\" target=\"_blank\" rel=\"noopener\">深入理解成分句法分析中的Dynamic Oracle</a>。</p>\n<p>但是如果直接按照这个Dynamic Oracle来实现代码的话，效果不会有什么提升，原因就是训练的时候遇到的错误情形还是太少了，不足以应付所有的测试阶段遇到的未知情形。所以要在训练阶段加上exploration操作，也就是转移的每一个时刻，不要总是预测概率最大的action，而是以一定的概率随机选择一个action，诱导系统进入一个错误的状态，这样系统就能学到更多错误状态下的回正技巧了。</p>\n<p><strong>Policy Gradient</strong><br>序列预测存在着两个问题：一个就是之前提到的exposure bias问题，另一个就是loss mismatch问题，意思就是在每一个状态的loss累和得到最终整个序列的loss，但是因为是贪心解码，并没有考虑到之后的结果，所以某一个状态的loss其实并不能代表整个序列的loss。</p>\n<p>Dynamic Oracle可以解决第一个问题，如果修改一下也可以解决第二个问题，但是Dynamic Oracle需要针对特定的转移系统单独设计，不能通用，所以这里引入了强化学习中的Policy Gradient来解决这个问题。</p>\n<p>首先用风险函数（risk objective）代替原来的损失函数：<br>\\[\\mathcal{R}(\\theta ) = \\sum\\limits_{i = 1}^N {\\sum\\limits_y {p(y|{x^{(i)}};\\theta )\\Delta (y,{y^{(i)}})} } \\]<br>其中$(x^{(i)}, y^{(i)})$是训练集中的标准数据。可以看出，风险函数其实就是所有可能的句法树和标准树的差异${\\Delta (y,{y^{(i)}})}$的期望，训练的目的就是最小化所有句法树和标准树的差异，这样就消除了之前提到的两个问题。</p>\n<p>但是可以发现，显然不可能枚举所有可能的句法树，这时候想到了之前用到的重要性采样方法。</p>\n<p>但是不能直接对风险函数进行重要性采样，不然就会发现采样后的函数$\\theta$消失了！那就没办法求导了。所以先对风险函数求导：<br>\\[\\begin{array}{l}\\nabla \\mathcal{R}(\\theta ) = \\sum\\limits_{i = 1}^N {\\sum\\limits_y {p(y|{x^{(i)}})\\Delta (y,{y^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )} } \\\\ \\approx \\sum\\limits_{i = 1}^N {\\sum\\limits_{y \\in \\mathcal{Y}({x^{(i)}})} {\\Delta (y,{y^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )} } \\end{array}\\]<br>这里的$y$是根据分布${p(y|{x^{(i)}})}$采样得到的结果。实验中可以将标准树也加入到采样结果中，可以提升准确率。<br>至于$\\log$项是怎么来的，可以如下推导得来：<br>\\[\\nabla p(y|{x^{(i)}};\\theta ) = p(y|{x^{(i)}})\\frac{ {\\nabla p(y|{x^{(i)}};\\theta )}}{ {p(y|{x^{(i)}};\\theta )}} = p(y|{x^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )\\]</p>\n<h1 id=\"编码解码模型\"><a href=\"#编码解码模型\" class=\"headerlink\" title=\"编码解码模型\"></a>编码解码模型</h1><hr>\n<p>上面介绍完了基于转移的句法分析系统，下面开始介绍编码解码（Encoder-Decoder）模型。</p>\n<p>模型的大致框架如下图所示：<br><img src=\"chart_based.png\" alt><br>首先通过编码器将句子编码成向量，然后用解码器对向量操作，解码出句法树。</p>\n<h2 id=\"编码器（Encoder）\"><a href=\"#编码器（Encoder）\" class=\"headerlink\" title=\"编码器（Encoder）\"></a>编码器（Encoder）</h2><p>编码器的主要目的是将每个短语编码成语义向量，用来给解码器预测splits和labels。</p>\n<p>编码器主要有两种，一种是简单的双向LSTM编码，下图是一个用双向LSTM对句子进行编码的示例：<br><img src=\"bi_lstm.jpg\" alt><br>例如要编码“played soccer in”这个短语，那么就用“in”处的前向LSTM输出减去“She”处的前向LSTM输出，得到了短语的前向LSTM表示。类似的，用“played”处的反向LSTM输出减去“the”处的反向LSTM输出，得到了短语的反向LSTM表示。</p>\n<p>另一种是multi-headed self-attention编码。Attention是谷歌在“Attention is all you need”中提出的一种方法，严格来说它并不能算作一种模型，只能说是一种机制。具体原理在这里就不细讲了，可以直接去看一下原文。</p>\n<p>大体框架就是，每个单词的词向量经过三个不同的$W$矩阵变换之后得到了三个不同的向量表示$q, k, v$，分别拼接起来组成了矩阵$Q, K, V$，其中$Q, K$相乘就得到了任意两个单词之间的相似度矩阵，然后对矩阵每一行进行softmax就得到了每一个单词对于其他所有单词的权重。再乘上矩阵$V$就得到了它对其他所有单词的加权求和，以此来作为它的向量表示。</p>\n<p>下图就是self-attention的框架图：<br><img src=\"single_attention.jpg\" alt><br>形式化定义就是：<br>\\[S(X) = \\left[ { {\\rm{softmax}}\\left( {\\frac{ {Q{K^{\\rm{T}}}}}{ {\\sqrt { {d_k}} }}} \\right)V} \\right]{W_O}\\]<br>其中$Q = XW_Q, K = XW_K, V = XW_V$，$d_k$是向量$q, k$的维度，用它作为分母是为了防止数值太大溢出。最后的矩阵$W_O$是为了将输出映射到与输入相同的维度。</p>\n<p>而multi-headed self-attention就是将刚刚的attention计算8次，并且相加：<br>\\[M(X) = \\sum\\limits_{i = 1}^8 {S(X)} \\]<br>注意这8个attention的参数矩阵是不共享的，也可以不相加，改为直接拼接。</p>\n<p>最终的编码器模型如下图所示：<br><img src=\"multi_headed_attention.jpg\" alt><br>也就是说，将刚刚的multi-headed self-attention经过一层layernorm之后再经过一层前馈神经网络，最后再经过一层layernorm得到输出。将上述模型复制8份，首尾拼接，即前面的输出作为后面的输入，即可得到编码器最终的输出，也就是每个单词最终的向量表示。</p>\n<p>至于每个短语的表示，和双向LSTM编码一样，用短语边界两个单词向量的差值作为短语的表示。只是这里没有前向后向的概念，所以要将每个单词向量一分为二，前一半作为前向向量，后一半作为后向向量。当然在实际实现中，将单数维度提取出来作为前向表示，双数维度提取出来作为后向表示。</p>\n<h2 id=\"解码器（Decoder）\"><a href=\"#解码器（Decoder）\" class=\"headerlink\" title=\"解码器（Decoder）\"></a>解码器（Decoder）</h2><p>得到了每个短语的向量表示之后，就需要对它们进行解码，得到最终的句法树，解码的方法主要有两种。<br><strong>基于动态规划解码的模型</strong><br>这种方法在论文中被叫做“chart-based model”，正如其名，就是利用一个数组来进行动态规划，求出每个span的最优split和最优label。</p>\n<p>定义一棵句法树的分数为所有子结点的label分数之和，即：<br>\\[{s_{tree}}(T) = \\sum\\limits_{(l,(i,j)) \\in T} { {s_{label}}(i,j,l)} \\]<br>其实原本论文中的定义还多了一项span的分数，但是由于具体实现中去掉这一项并没有什么影响，所以为了简便我就只算label分数了。</p>\n<p>要使得句法树分数最大，不可能枚举所有的句法树，那就只能用动态规划算法求解了。对于任意一个$span(i, j)$，我们将它通过编码器产生的表示$s_{ij}$输入到前馈神经网络中，直接取得分最高的那一维作为最优label，即：<br>\\[s_{label}(i, j, l) = [Vg(Ws_{ij}+b)]_l\\]<br>而对于split，遍历所有的split，取两个子结点与自己结点得分之和最高的那个split即可：<br>\\[s_{split}(i, j, k) = s_{label}(i, j, l_{ij}) + s_{label}(i, k, l_{ik}) + s_{label}(k, j, l_{kj})\\]</p>\n<p>最后的训练过程和以往一样，采用max-margin训练方法，即使得标准树的得分比预测树的得分至少高一个margin，在这里margin大小定义为两棵树不同短语的数量，最终的损失函数定义为：<br>\\[\\mathcal{L}(\\theta ) = \\max \\left( {0,\\Delta (\\hat T,T) - {s_{tree}}(T) + {s_{tree}}(\\hat T)} \\right)\\]</p>\n<p><strong>基于自顶向下贪心解码的模型</strong><br>基于动态规划的解码算法时间复杂度为$O(n^3)$，对于长度大一点的句子来说还是有点不可接受的。但是如果采用自顶向下、贪心地去选择每一个span的最优split和最优label，那么时间复杂度将降到$O(n^2)$。具体操作过程如下，首先从根节点也就是$span(0, n)$开始，选择一个split，使得两个子结点与自己结点得分之和最高，而label还是向之前那样直接通过短语的向量计算得出。具体公式为：<br>\\[\\begin{array}{l}\\hat l = \\mathop {\\arg \\max }\\limits_l [{s_{label}}(i,j,l)]\\\\\\hat k = \\mathop {\\arg \\max }\\limits_k [{s_{split}}(i,k,l)]\\end{array}\\]<br>而由于贪心解码和转移系统action预测一样，在预测阶段可能会遇到训练阶段没有碰到过的状态，所以也需要用到Dynamic Oracle。同样也需要用到exploration，来增加训练阶段遇到的错误状态数。</p>\n<h1 id=\"Sequence-to-Sequence模型\"><a href=\"#Sequence-to-Sequence模型\" class=\"headerlink\" title=\"Sequence to Sequence模型\"></a>Sequence to Sequence模型</h1><hr>\n<p>上面最主流的两大模型：转移系统和编码解码模型都已经介绍完了，下面介绍几种比较新颖的方法。</p>\n<p>大家都知道句法树和某些序列存在一一对应关系，句法树可以唯一转换成序列，序列也可以唯一转换成句法树，所以预测句法树的问题就转变为了预测序列问题，下面几种方法都是将句法树转换为了某种序列来进行预测。</p>\n<h2 id=\"树结构转化为括号序列\"><a href=\"#树结构转化为括号序列\" class=\"headerlink\" title=\"树结构转化为括号序列\"></a>树结构转化为括号序列</h2><p>这种方法思路特别简单，因为训练集里原始数据的表示形式就是括号序列嘛，所以就采用语言模型直接预测出括号序列的概率。</p>\n<p>但是不可能枚举出所有的句法树括号序列，所以最终还是只对其他句法分析器预测出来的最好的若干棵树进行预测概率，然后重排序选出概率最高的一棵树。</p>\n<h2 id=\"句法距离（Syntactic-Distance）\"><a href=\"#句法距离（Syntactic-Distance）\" class=\"headerlink\" title=\"句法距离（Syntactic Distance）\"></a>句法距离（Syntactic Distance）</h2><p>这个方法就很新颖了，本质上也是将树结构转换成了唯一对应的序列。<br><img src=\"syntactic_distance_example.jpg\" alt><br>首先看上面一张图，对于长度为$n$的句子，存在一个长度为$n - 1$的数字序列，满足如下条件：$n$个单词存在$n - 1$个两两相邻的单词对，而两个相邻的单词的最近公共祖先（LCA）在句法树中有一个高度，所以这$n - 1$个数的大小关系恰好对应了从左向右任意两个相邻单词对的LCA的高度的大小关系。</p>\n<p>拿上面那张图为例，“She”和“enjoys”的最近公共祖先是“S”，所以高度最高，对应的数字也最大。“enjoys”和“playing”的最近公共祖先是“VP”，高度排第三，所以对应的数字大小也是排第三。依次类推，剩下的数也满足这个性质。可以证明，这个数字序列和句法树是一一对应的。更进一步可以发现，这个序列其实就是“中序遍历的结点的高度”，文中将其称为句法距离。</p>\n<p>预测这个序列也很简单，通过一个双向LSTM，然后将每相邻两个单词的输出做一次卷积操作（因为要预测相邻两个单词的LCA高度嘛），然后再将输出送到一个双向LSTM中去，最后通过一个前馈神经网络得到每相邻两个单词的数字。</p>\n<p>而从树到序列和从序列到树的算法都很简单，这里就不详述了，可以直接去看论文。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<h2 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h2><p>下面列出了成分句法分析领域目前为止最好的一些结果：<br><img src=\"results.jpg\" alt><br>最好的是采用self-attention编码器+外部预训练词向量ELMo的模型，第二是模型融合+重排序之后的结果，之后的模型也基本都是本文介绍过的，最厉害的就是最后一个2006年的模型，十几年了依然如此强悍。</p>\n<h2 id=\"心得体会\"><a href=\"#心得体会\" class=\"headerlink\" title=\"心得体会\"></a>心得体会</h2><p>虽然看起来貌似已经看了不少的成分句法分析相关的工作了，但是其实还有很多细节性的工作还没有去了解。前两年ACL等顶会成分句法分析的论文都很少，但是18年又好像多了起来，但终究还是伯克利Dan Klein、斯坦福Socher、黄亮等一批大佬在做这个，想在巨人的肩膀上面做出点东西还是很有挑战性的。</p>\n<p>目前能想到的工作只有在编码器上面做文章，学习出语义更加丰富的短语表示。或者可以采用失传多年的递归神经网络，解码时对句法树进行建模，但是随便试了一下，速度很慢而且存在梯度消失的问题，效果也不是很好。转移系统的话暂时也想不出什么好的点子，序列预测的话如果能再想出个新颖的一一对应的序列就好了。</p>\n<p>前路还很长，说长也不长了，只有三年不到的时间了，做不出东西就要延毕了。但愿能在有限的三年时间里做出点成果，提高自己的代码能力，对这个领域也有更加深入的理解！</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><hr>\n<p>[ACL15] Transition-based Neural Constituent Parsing<br>[NAACL16] Recurrent Neural Network Grammars<br>[EMNLP16] Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles<br>[TACL17] In-Order Transition-based Constituent Parsing<br>[EMNLP17] Effective Inference for Generative Neural Parsing<br>[ACL18] Policy Gradient as a Proxy for Dynamic Oracles in Constituency Parsing<br>[ACL17] A Minimal Span-Based Neural Constituency Parser<br>[ACL18] Constituency Parsing with a Self-Attentive Encoder<br>[EMNLP16] Parsing as Language Modeling<br>[ACL18] Straight to the Tree: Constituency Parsing with Neural Syntactic Distance</p>\n","site":{"data":{"friends":[{"name":"IVIPC","url":"http://ivipc.uestc.edu.cn/","title":"访问主页","introduction":"UESTC智能视觉信息处理与通信实验室(IVIPC)欢迎您的加入！","avatar":"/medias/avatars/ivipc.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://static.blinkfox.com/20190601.png","name":"码农","introduction":"这里不隐含扭曲的价值观，而是整合并充盈正能量","url":"https://www.90c.vip/","title":"前去学习"},{"avatar":"https://jiangliuhong.gitee.io/images/avatar.jpg","name":"编程常青树","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://jiangliuhong.gitee.io/","title":"前去学习"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"}],"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=461153715&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>一直以来想对保研到现在一年多看过的论文进行一个总结，正好赶上下周二要讲组会，所以将自己看过的成分句法分析相关的论文梳理一下，写一个粗略的综述。可能有很多细节还不是很懂，理解有误，还请大家指正。</p>\n</blockquote>\n<p><strong>PPT地址：</strong><a href=\"https://github.com/godweiyang/files-backup/tree/master/lecture/ppt1\" target=\"_blank\" rel=\"noopener\">A Summary of Constituent Parsing</a><br><strong>代码地址：</strong><a href=\"https://github.com/godweiyang/ConstituentParsing\" target=\"_blank\" rel=\"noopener\">Constituent Parsing</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>成分句法分析（constituent parsing）是自然语言处理中的一个基础任务，它的任务是给定一个句子，分析出句子的短语结构句法树。例如给定句子“The little boy likes red tomatoes .”，它的成分句法树如下图所示：<br><img src=\"syntactic_tree.png\" alt><br>成分句法分析可以利用到许多下游任务中去，比如情感分析可以利用句子的成分句法树来进行递归神经网络建模，从而分析出句子的情感。也可以利用在其他基础任务中去，比如可以将训练好的成分句法树直接转为依存句法树，从而提升依存句法分析的准确率。</p>\n<p>传统的成分句法分析方法主要是规则（grammar）和统计的，比如结合两者的概率上下文无关文法（PCFG），在此基础上产生了应用广泛的CKY解码算法。CKY算法本质上是一种动态规划算法，本文之后要讲到的chart-based模型的解码算法也是基于动态规划算法的，和CKY算法十分地相似。</p>\n<p>Socher在2013年又提出了组合向量文法（CVG），将递归神经网络应用到了成分句法分析中，给每个短语结构赋予了向量表示。但是这种方法还是需要用到规则，采用CKY算法解码，时间效率比较低。还有一种基于CRF的神经网络句法分析方法，将离散的特征转化为了连续的特征表示。</p>\n<p>不过，上面这些方法统统都不在本文的讨论范围之内。本文讨论近两年来研究最热门的几种模型，主要包括基于转移系统（transition-based）的模型、基于动态规划（chart-based）解码的模型、基于自顶向下贪心（greedy top-down）解码的模型和一些将预测树结构转化为预测序列（sequence to sequence）的模型。</p>\n<h1 id=\"基于转移系统的模型\"><a href=\"#基于转移系统的模型\" class=\"headerlink\" title=\"基于转移系统的模型\"></a>基于转移系统的模型</h1><hr>\n<p>基于转移系统的模型主要分为三大类。第一种是自底向上（bottom-up）的系统，代表性论文有Transition-based Neural Constituent Parsing等。第二种是自顶向下（top-down）的系统，代表性论文有Recurrent Neural Network Grammars和Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles等。最后一种是2017年提出的基于中序遍历（in-order）的系统，代表性论文有In-Order Transition-based Constituent Parsing等。</p>\n<p>在这三类系统的基础之上，许多人又做了非常多的改进。例如提出了动态指导（dynamic oracle）技术，来解决序列预测中的exposure bias问题（具体含义之后会讲到）。还有使用强化学习中的policy gradient来代替dynamic oracle，解决了针对不同转移系统需要设计不同的dynamic oracle的问题。</p>\n<p>基于转移的句法分析系统主要包含两个组成成分，一个是栈（stack），用来存放已分析的句法结构，另一个是缓存（buffer），用来存放待分析的句子。而预测句法树结构就转化为了预测转移系统每一个时刻应该采取的动作（action）序列。下面我们分别介绍几种不同的转移系统，我们用三元组$[S, B, T]$来表示转移系统每一个时刻的状态，分别代表栈、buffer的第一个单词下标、句法分析结束标志。</p>\n<h2 id=\"自底向上的转移系统\"><a href=\"#自底向上的转移系统\" class=\"headerlink\" title=\"自底向上的转移系统\"></a>自底向上的转移系统</h2><p>自底向上的转移系统是根据句法树的后序遍历（post-order）顺序进行句法分析的，首先将buffer中的单词移进栈里，然后将栈顶的若干个单词归约为它们的父结点，直至最后buffer为空并且栈里只有一个根节点。</p>\n<p>在句法分析之前，首先要对句法树进行二叉化，这一点在传统的CKY算法中也会用到。例如对于之前的那棵句法树，二叉化后就变成了下图所示：<br><img src=\"binarized_syntactic_tree.png\" alt></p>\n<p>自底向上转移系统的action形式化定义如下：<br><img src=\"bottom_up.jpg\" alt><br>其中SHIFT动作就是将buffer里面的第一个单词移进栈里。REDUCE-L/R-X动作就是将栈顶的两个元素出栈，并且归约为它们的父结点X，然后再将父结点入栈，而L和R就是用来区分左儿子和右儿子谁是头结点（head branch）。Unary-X动作就是将栈顶元素出栈，并且归约为父结点X，这个动作是用来预测一元产生式的。最后FINISH动作用来判断句法分析是否结束。</p>\n<p>注意到这里有一个问题：为什么这里一定要提前对句法树进行二叉化？主要原因是因为自底向上系统有个弊端，就是在不停地SHIFT之后，你不仅要预测哪一步开始REDUCE，还得预测REDUCE的话要REDUCE栈顶的多少个元素，这样预测的状态数就大大增加，导致训练时间也增加了许多。而二叉化后每次预测就只需要预测哪一步REDUCE就行了，每次REDUCE只REDUCE栈顶的两个元素。</p>\n<p>对于上面的句法树，用自底向上系统分析的过程如下图所示：<br><img src=\"bottom_up_example.jpg\" alt><br>自底向上转移系统的优点就是可以充分利用已经生成的子树信息，来辅助后面的子树预测。</p>\n<p>但是缺点也很显然，因为无法知道父结点以及再上层的父结点信息，所以丢失了许多有用的全局信息，这也有点类似于CKY算法的弊端了，同样只能根据局部的子树信息预测当前子树。</p>\n<p>另一个缺点就是需要提前进行二叉化，虽然二叉化加入了head结点信息，事实证明是很有用的，但是head结点的标注需要许多语义学知识，也可以用神经网络来自己学习到head结点，但是二叉化总归是比较麻烦的。一个较为简洁的做法就是，用空结点$\\emptyset$来作为本不应该归约的两个结点的临时结点，在还原树结构的时候忽略这种空结点，这样就可以隐式地进行二叉化操作了。</p>\n<h2 id=\"自顶向下的转移系统\"><a href=\"#自顶向下的转移系统\" class=\"headerlink\" title=\"自顶向下的转移系统\"></a>自顶向下的转移系统</h2><p>自顶向下的转移系统利用的是句法树的前序遍历（pre-order）序列，首先将父结点入栈，然后不断操作直到它的子结点全部入栈，这时将父结点连同所有子结点全部归约为上一层的父结点。</p>\n<p>自顶向下转移系统的action形式化定义如下：<br><img src=\"top_down.jpg\" alt><br>其中SHIFT动作和之前一样，都是将buffer的第一个单词入栈。而NT-X动作就是将父结点X入栈。REDUCE动作就是将栈顶若干个元素直到它们的第一个父结点为止都出栈，然后归约为一个结点，再次入栈。注意到这里不同于自底向上系统的地方是没有FINISH动作，笔者也没有找到相关解释，猜测可能是因为自底向上系统存在一元动作Unary-X，所以最后根节点可能会无限归约下去，需要通过FINISH来提前终止分析。当然其实转移系统的动作定义并没有严格的要求，不同论文定义的也都不一样，但是都大同小异，也就是都存在SHIFT-REDUCE动作。</p>\n<p>对于上面的句法树，用自顶向下系统分析的过程如下图所示：<br><img src=\"top_down_example.jpg\" alt></p>\n<p>自顶向下系统的优缺点和自底向上系统恰好互补。优点就是可以充分利用全局信息，例如父结点的信息，并且不需要进行二叉化，因为REDUCE的时候只要往栈里找到第一个父结点就行了。而缺点就是无法利用局部信息，也就是子树信息，同样NT-X动作也可能会出现无限多次执行的情况，所以要加上一些限制条件。</p>\n<h2 id=\"In-order转移系统\"><a href=\"#In-order转移系统\" class=\"headerlink\" title=\"In-order转移系统\"></a>In-order转移系统</h2><p>Zhang和Liu两人在2017年提出了in-order转移系统，它利用的是句法树的中序遍历（in-order）序列，首先将一个子结点SHIFT入栈，然后将父结点入栈，再不断操作直到该父结点的剩余子结点全部入栈，然后对它们进行归约。</p>\n<p>in-order转移系统的action形式化定义如下：<br><img src=\"in_order.jpg\" alt><br>其中SHIFT动作和之前一样，都是将buffer的第一个单词入栈。PJ-X动作是预测出当前栈顶的元素的父结点X。REDUCE动作就是将栈顶的若干个元素归约为最里面倒数第二个元素，也就是它们的父结点。</p>\n<p>对于上面的句法树，用in-order系统分析的过程如下图所示：<br><img src=\"in_order_example.jpg\" alt></p>\n<p>in-order转移系统提出的动机也很符合人类的直觉，在你读一个句子的时候，如果你第一个看到的单词是“The”，那么你脑海中可能会想到后面紧跟着的可能是个名词短语NP，然后你继续往后看，果然验证了你的猜想，后面的单词序列是“red tomatoes”。</p>\n<p>in-order转移系统的优点恰好结合了前面两种转移系统，既可以考虑到局部信息，又可以考虑到全局信息。</p>\n<p><strong>模型变体：</strong>in-order系统就是在自顶向下系统的基础上，在父结点入栈之前先入栈了1个子结点。那么如果稍加修改，还可以提前入栈两个、三个等等。假设在父结点入栈之前先入栈了$k$个子结点，那么称这种转移系统为k-in-order系统。特别地，如果$k = 0$，那么这就是自顶向下转移系统；如果$k = 1$，那么这就是in-order转移系统；$k = \\infty$，那么这就是自底向上转移系统。</p>\n<h2 id=\"模型框架\"><a href=\"#模型框架\" class=\"headerlink\" title=\"模型框架\"></a>模型框架</h2><p>上面说到的三种基于转移的句法分析系统，都可以概括为预测每一个时刻的action，那么每一个时刻的状态如何表示就是最重要的问题。在每一个时刻，最重要的组成部分有三个，分别是当前栈的状态、当前buffer的状态、当前已生成的action序列的状态。</p>\n<p>当前状态的表示通过下图所示的三个LSTM得到：<br><img src=\"transition_framework.png\" alt><br>其中栈和buffer的编码使用的是stack-LSTM，而action的编码使用的是普通的LSTM。最后将三种LSTM输出拼接到一起，用softmax预测出正确的action。</p>\n<p>另一个问题就是如何编码栈里的短语。在以前都是通过递归神经网络或者树状LSTM来编码树状结构短语的，而在这里的话直接将父结点和子结点合为一个序列，送入到双向LSTM中就行了，具体形式如下图所示：<br><img src=\"composition.png\" alt></p>\n<h2 id=\"系统改进\"><a href=\"#系统改进\" class=\"headerlink\" title=\"系统改进\"></a>系统改进</h2><p><strong>基于span的自底向上的转移系统</strong><br>黄亮在2016年论文里提出了转移系统的栈里用span的左右边界数值来代替分析出来的子树，并且将REDUCE动作和预测label分开来进行，他们的转移系统action形式化定义如下：<br><img src=\"span_based_bottom_up.png\" alt><br>可以看出，在第偶数个时刻，只预测结构化动作sh和comb(对应于之前转移系统的SHIFT和REDUCE)，sh动作从buffer中移进栈里一个单词$w_{j+1}$，栈顶的span就变为了$span(j, j+1)$。而comb动作就是将栈顶的两个span归约为一个span。在第奇数个时刻，只预测栈顶span的label，如果这个span的确能构成一个短语，那么就预测它的label，否则的话说明只是个临时结点，就预测为空结点，这一点在之前就已经提到过了。</p>\n<p>论文里给出了一个具体的例子：<br><img src=\"span_based_bottom_up_tree.png\" alt><br><img src=\"span_based_bottom_up_example.png\" alt></p>\n<p>文章开头提供的代码也是基于这个转移系统的，一个好处是用span来表示的话比较方便，代码也好写。另一个好处就是每一个时刻的状态可以不再用三个LSTM动态地算出来了，而是可以提前用双向LSTM对句子进行编码，然后用两个单词输出的差值作为单词之间span的表示，最后用它来计算转移状态的向量表示。</p>\n<p>例如在某个时刻，栈首元素为$(i, k, j)$，那么结构化预测就采用四个span特征：$span(0, i), span(i, k), span(k, j), span(j, n)$，为什么要用这四个呢？因为comb动作涉及到栈首的两个span，而之前已经生成的$span(0, i)$也可以作为局部信息指导预测，buffer中的$span(j, n)$也要考虑到，因为可能预测为sh动作，同时也可以作为全局信息参考。</p>\n<p>而label预测就只要用到三个span特征：$span(0, k), span(k, j), span(j, n)$，因为label动作只需要对栈首的span进行预测，所以三个特征就足够了。</p>\n<p><strong>生成模型RNNG</strong><br>RNNG是2016年提出的一种文法，全称叫做“Recurrent Neural Network Grammar”，是一种生成式模型。RNNG本质上就是自顶向下的转移系统，动作定义和之前介绍的基本一致。只是之前介绍的自顶向下的转移系统是判别式模型，每次SHIFT的单词都是buffer中给定的。而RNNG每次SHIFT的单词需要通过动作GEN(x)预测得出，最终模型对预测出来的句子分析出句法树。</p>\n<p>正式一点就是，对于句子$x$和对应的句法树$y$，判别式模型是对条件概率$p(y | x)$进行建模，而生成式模型是对联合概率$p(x, y)$进行建模。</p>\n<p>而RNNG的另一个重要应用是语言模型（language model），也就是建模$p(x)$。因为$p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}$，所以只需要枚举出所有可能的句法树$y$即可，但是这是指数级别的，显然不现实，这时候就需要用到“重要性采样（importance sampling）”。</p>\n<p>令$q(y | x)$为RNNG作为判别式模型的时候产生句子$y$的条件概率，那么$p(x)$可以改写为<br>\\[p(x) = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {p(x,y)}  = \\sum\\nolimits_{y \\in \\mathcal{Y}(x)} {q(y|x)w(x,y)}  = {E_{q(y|x)}}w(x,y)\\]<br>然后就可以采用蒙特卡罗方法进行采样了，从分布$q(y | x)$中采样$N$个样本：<br>\\[{y^{(i)}} \\sim q(y|x),i = 1,2, \\ldots ,N\\]<br>那么$p(x)$就可以近似表示为：<br>\\[p(x) = {E_{q(y|x)}}w(x,y)\\mathop  \\approx \\limits^{MC} \\frac{1}{N}\\sum\\limits_{i = 1}^N {w(x,{y^{(i)}})} \\]</p>\n<p><strong>Dynamic Oracle</strong><br>文章开头提到了一个转移系统会遇到的问题：“exposure bias问题”，这个问题意思就是训练的时候转移系统的每个时刻都是按照标准的action来进行训练的，但是如果测试的时候遇到了一个训练时从来没有遇见过的状态，这时候该怎么预测？如果预测错了，那么之后的时刻可能错的越来越离谱，偏差越来越大。</p>\n<p>解决的方法就是采用Dynamic Oracle技术，在预测错误的时候，按照标准树的结构指导转移系统向着错误尽可能小的状态进行转移。但是比较麻烦的是，对于每一个转移系统，可能大家定义的状态都不尽相同，所以Dynamic Oracle要针对特定的转移系统单独设计，一个解决方法就是之后要提到的Policy Gradient方法。</p>\n<p>这里举一个针对上面的“基于span的自底向上的转移系统”的Dynamic Oracle例子。</p>\n<p>首先是结构化oracle，如果当前的栈首span是$span(i, j)$，那么就在标准树中寻找所有包含$span(i, j)$并且最小的span，记为$span(p, q)$，那么下一步可以采取的动作定义如下：<br><img src=\"structural_oracle.png\" alt><br>也就是说，如果$span(p, q)$比$span(i, j)$右边界多出一部分，那么为了向着标准span靠近，就只能sh单词入栈；否则如果左边界多出一部分，那么就必须先comb之前的两个span，扩大span左边的边界；否则的话左右两边都有空出，那就随机预测一个动作就行了。</p>\n<p>然后是label oracle，这个就很简单了，如果当前的栈首span是$span(i, j)$，只需要在标准树中寻找是否存在$span(i, j)$，如果存在，那么就给他正常预测label就行了；如果不存在，那么直接预测为空结点。oracle定义如下:<br><img src=\"label_oracle.png\" alt><br>而关于这个Dynamic Oracle的证明和更加深入的理解，参见我之前写过的一篇博客：<a href=\"https://godweiyang.com/2018/08/03/dynamic-oracles/\" target=\"_blank\" rel=\"noopener\">深入理解成分句法分析中的Dynamic Oracle</a>。</p>\n<p>但是如果直接按照这个Dynamic Oracle来实现代码的话，效果不会有什么提升，原因就是训练的时候遇到的错误情形还是太少了，不足以应付所有的测试阶段遇到的未知情形。所以要在训练阶段加上exploration操作，也就是转移的每一个时刻，不要总是预测概率最大的action，而是以一定的概率随机选择一个action，诱导系统进入一个错误的状态，这样系统就能学到更多错误状态下的回正技巧了。</p>\n<p><strong>Policy Gradient</strong><br>序列预测存在着两个问题：一个就是之前提到的exposure bias问题，另一个就是loss mismatch问题，意思就是在每一个状态的loss累和得到最终整个序列的loss，但是因为是贪心解码，并没有考虑到之后的结果，所以某一个状态的loss其实并不能代表整个序列的loss。</p>\n<p>Dynamic Oracle可以解决第一个问题，如果修改一下也可以解决第二个问题，但是Dynamic Oracle需要针对特定的转移系统单独设计，不能通用，所以这里引入了强化学习中的Policy Gradient来解决这个问题。</p>\n<p>首先用风险函数（risk objective）代替原来的损失函数：<br>\\[\\mathcal{R}(\\theta ) = \\sum\\limits_{i = 1}^N {\\sum\\limits_y {p(y|{x^{(i)}};\\theta )\\Delta (y,{y^{(i)}})} } \\]<br>其中$(x^{(i)}, y^{(i)})$是训练集中的标准数据。可以看出，风险函数其实就是所有可能的句法树和标准树的差异${\\Delta (y,{y^{(i)}})}$的期望，训练的目的就是最小化所有句法树和标准树的差异，这样就消除了之前提到的两个问题。</p>\n<p>但是可以发现，显然不可能枚举所有可能的句法树，这时候想到了之前用到的重要性采样方法。</p>\n<p>但是不能直接对风险函数进行重要性采样，不然就会发现采样后的函数$\\theta$消失了！那就没办法求导了。所以先对风险函数求导：<br>\\[\\begin{array}{l}\\nabla \\mathcal{R}(\\theta ) = \\sum\\limits_{i = 1}^N {\\sum\\limits_y {p(y|{x^{(i)}})\\Delta (y,{y^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )} } \\\\ \\approx \\sum\\limits_{i = 1}^N {\\sum\\limits_{y \\in \\mathcal{Y}({x^{(i)}})} {\\Delta (y,{y^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )} } \\end{array}\\]<br>这里的$y$是根据分布${p(y|{x^{(i)}})}$采样得到的结果。实验中可以将标准树也加入到采样结果中，可以提升准确率。<br>至于$\\log$项是怎么来的，可以如下推导得来：<br>\\[\\nabla p(y|{x^{(i)}};\\theta ) = p(y|{x^{(i)}})\\frac{ {\\nabla p(y|{x^{(i)}};\\theta )}}{ {p(y|{x^{(i)}};\\theta )}} = p(y|{x^{(i)}})\\nabla \\log p(y|{x^{(i)}};\\theta )\\]</p>\n<h1 id=\"编码解码模型\"><a href=\"#编码解码模型\" class=\"headerlink\" title=\"编码解码模型\"></a>编码解码模型</h1><hr>\n<p>上面介绍完了基于转移的句法分析系统，下面开始介绍编码解码（Encoder-Decoder）模型。</p>\n<p>模型的大致框架如下图所示：<br><img src=\"chart_based.png\" alt><br>首先通过编码器将句子编码成向量，然后用解码器对向量操作，解码出句法树。</p>\n<h2 id=\"编码器（Encoder）\"><a href=\"#编码器（Encoder）\" class=\"headerlink\" title=\"编码器（Encoder）\"></a>编码器（Encoder）</h2><p>编码器的主要目的是将每个短语编码成语义向量，用来给解码器预测splits和labels。</p>\n<p>编码器主要有两种，一种是简单的双向LSTM编码，下图是一个用双向LSTM对句子进行编码的示例：<br><img src=\"bi_lstm.jpg\" alt><br>例如要编码“played soccer in”这个短语，那么就用“in”处的前向LSTM输出减去“She”处的前向LSTM输出，得到了短语的前向LSTM表示。类似的，用“played”处的反向LSTM输出减去“the”处的反向LSTM输出，得到了短语的反向LSTM表示。</p>\n<p>另一种是multi-headed self-attention编码。Attention是谷歌在“Attention is all you need”中提出的一种方法，严格来说它并不能算作一种模型，只能说是一种机制。具体原理在这里就不细讲了，可以直接去看一下原文。</p>\n<p>大体框架就是，每个单词的词向量经过三个不同的$W$矩阵变换之后得到了三个不同的向量表示$q, k, v$，分别拼接起来组成了矩阵$Q, K, V$，其中$Q, K$相乘就得到了任意两个单词之间的相似度矩阵，然后对矩阵每一行进行softmax就得到了每一个单词对于其他所有单词的权重。再乘上矩阵$V$就得到了它对其他所有单词的加权求和，以此来作为它的向量表示。</p>\n<p>下图就是self-attention的框架图：<br><img src=\"single_attention.jpg\" alt><br>形式化定义就是：<br>\\[S(X) = \\left[ { {\\rm{softmax}}\\left( {\\frac{ {Q{K^{\\rm{T}}}}}{ {\\sqrt { {d_k}} }}} \\right)V} \\right]{W_O}\\]<br>其中$Q = XW_Q, K = XW_K, V = XW_V$，$d_k$是向量$q, k$的维度，用它作为分母是为了防止数值太大溢出。最后的矩阵$W_O$是为了将输出映射到与输入相同的维度。</p>\n<p>而multi-headed self-attention就是将刚刚的attention计算8次，并且相加：<br>\\[M(X) = \\sum\\limits_{i = 1}^8 {S(X)} \\]<br>注意这8个attention的参数矩阵是不共享的，也可以不相加，改为直接拼接。</p>\n<p>最终的编码器模型如下图所示：<br><img src=\"multi_headed_attention.jpg\" alt><br>也就是说，将刚刚的multi-headed self-attention经过一层layernorm之后再经过一层前馈神经网络，最后再经过一层layernorm得到输出。将上述模型复制8份，首尾拼接，即前面的输出作为后面的输入，即可得到编码器最终的输出，也就是每个单词最终的向量表示。</p>\n<p>至于每个短语的表示，和双向LSTM编码一样，用短语边界两个单词向量的差值作为短语的表示。只是这里没有前向后向的概念，所以要将每个单词向量一分为二，前一半作为前向向量，后一半作为后向向量。当然在实际实现中，将单数维度提取出来作为前向表示，双数维度提取出来作为后向表示。</p>\n<h2 id=\"解码器（Decoder）\"><a href=\"#解码器（Decoder）\" class=\"headerlink\" title=\"解码器（Decoder）\"></a>解码器（Decoder）</h2><p>得到了每个短语的向量表示之后，就需要对它们进行解码，得到最终的句法树，解码的方法主要有两种。<br><strong>基于动态规划解码的模型</strong><br>这种方法在论文中被叫做“chart-based model”，正如其名，就是利用一个数组来进行动态规划，求出每个span的最优split和最优label。</p>\n<p>定义一棵句法树的分数为所有子结点的label分数之和，即：<br>\\[{s_{tree}}(T) = \\sum\\limits_{(l,(i,j)) \\in T} { {s_{label}}(i,j,l)} \\]<br>其实原本论文中的定义还多了一项span的分数，但是由于具体实现中去掉这一项并没有什么影响，所以为了简便我就只算label分数了。</p>\n<p>要使得句法树分数最大，不可能枚举所有的句法树，那就只能用动态规划算法求解了。对于任意一个$span(i, j)$，我们将它通过编码器产生的表示$s_{ij}$输入到前馈神经网络中，直接取得分最高的那一维作为最优label，即：<br>\\[s_{label}(i, j, l) = [Vg(Ws_{ij}+b)]_l\\]<br>而对于split，遍历所有的split，取两个子结点与自己结点得分之和最高的那个split即可：<br>\\[s_{split}(i, j, k) = s_{label}(i, j, l_{ij}) + s_{label}(i, k, l_{ik}) + s_{label}(k, j, l_{kj})\\]</p>\n<p>最后的训练过程和以往一样，采用max-margin训练方法，即使得标准树的得分比预测树的得分至少高一个margin，在这里margin大小定义为两棵树不同短语的数量，最终的损失函数定义为：<br>\\[\\mathcal{L}(\\theta ) = \\max \\left( {0,\\Delta (\\hat T,T) - {s_{tree}}(T) + {s_{tree}}(\\hat T)} \\right)\\]</p>\n<p><strong>基于自顶向下贪心解码的模型</strong><br>基于动态规划的解码算法时间复杂度为$O(n^3)$，对于长度大一点的句子来说还是有点不可接受的。但是如果采用自顶向下、贪心地去选择每一个span的最优split和最优label，那么时间复杂度将降到$O(n^2)$。具体操作过程如下，首先从根节点也就是$span(0, n)$开始，选择一个split，使得两个子结点与自己结点得分之和最高，而label还是向之前那样直接通过短语的向量计算得出。具体公式为：<br>\\[\\begin{array}{l}\\hat l = \\mathop {\\arg \\max }\\limits_l [{s_{label}}(i,j,l)]\\\\\\hat k = \\mathop {\\arg \\max }\\limits_k [{s_{split}}(i,k,l)]\\end{array}\\]<br>而由于贪心解码和转移系统action预测一样，在预测阶段可能会遇到训练阶段没有碰到过的状态，所以也需要用到Dynamic Oracle。同样也需要用到exploration，来增加训练阶段遇到的错误状态数。</p>\n<h1 id=\"Sequence-to-Sequence模型\"><a href=\"#Sequence-to-Sequence模型\" class=\"headerlink\" title=\"Sequence to Sequence模型\"></a>Sequence to Sequence模型</h1><hr>\n<p>上面最主流的两大模型：转移系统和编码解码模型都已经介绍完了，下面介绍几种比较新颖的方法。</p>\n<p>大家都知道句法树和某些序列存在一一对应关系，句法树可以唯一转换成序列，序列也可以唯一转换成句法树，所以预测句法树的问题就转变为了预测序列问题，下面几种方法都是将句法树转换为了某种序列来进行预测。</p>\n<h2 id=\"树结构转化为括号序列\"><a href=\"#树结构转化为括号序列\" class=\"headerlink\" title=\"树结构转化为括号序列\"></a>树结构转化为括号序列</h2><p>这种方法思路特别简单，因为训练集里原始数据的表示形式就是括号序列嘛，所以就采用语言模型直接预测出括号序列的概率。</p>\n<p>但是不可能枚举出所有的句法树括号序列，所以最终还是只对其他句法分析器预测出来的最好的若干棵树进行预测概率，然后重排序选出概率最高的一棵树。</p>\n<h2 id=\"句法距离（Syntactic-Distance）\"><a href=\"#句法距离（Syntactic-Distance）\" class=\"headerlink\" title=\"句法距离（Syntactic Distance）\"></a>句法距离（Syntactic Distance）</h2><p>这个方法就很新颖了，本质上也是将树结构转换成了唯一对应的序列。<br><img src=\"syntactic_distance_example.jpg\" alt><br>首先看上面一张图，对于长度为$n$的句子，存在一个长度为$n - 1$的数字序列，满足如下条件：$n$个单词存在$n - 1$个两两相邻的单词对，而两个相邻的单词的最近公共祖先（LCA）在句法树中有一个高度，所以这$n - 1$个数的大小关系恰好对应了从左向右任意两个相邻单词对的LCA的高度的大小关系。</p>\n<p>拿上面那张图为例，“She”和“enjoys”的最近公共祖先是“S”，所以高度最高，对应的数字也最大。“enjoys”和“playing”的最近公共祖先是“VP”，高度排第三，所以对应的数字大小也是排第三。依次类推，剩下的数也满足这个性质。可以证明，这个数字序列和句法树是一一对应的。更进一步可以发现，这个序列其实就是“中序遍历的结点的高度”，文中将其称为句法距离。</p>\n<p>预测这个序列也很简单，通过一个双向LSTM，然后将每相邻两个单词的输出做一次卷积操作（因为要预测相邻两个单词的LCA高度嘛），然后再将输出送到一个双向LSTM中去，最后通过一个前馈神经网络得到每相邻两个单词的数字。</p>\n<p>而从树到序列和从序列到树的算法都很简单，这里就不详述了，可以直接去看论文。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><hr>\n<h2 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h2><p>下面列出了成分句法分析领域目前为止最好的一些结果：<br><img src=\"results.jpg\" alt><br>最好的是采用self-attention编码器+外部预训练词向量ELMo的模型，第二是模型融合+重排序之后的结果，之后的模型也基本都是本文介绍过的，最厉害的就是最后一个2006年的模型，十几年了依然如此强悍。</p>\n<h2 id=\"心得体会\"><a href=\"#心得体会\" class=\"headerlink\" title=\"心得体会\"></a>心得体会</h2><p>虽然看起来貌似已经看了不少的成分句法分析相关的工作了，但是其实还有很多细节性的工作还没有去了解。前两年ACL等顶会成分句法分析的论文都很少，但是18年又好像多了起来，但终究还是伯克利Dan Klein、斯坦福Socher、黄亮等一批大佬在做这个，想在巨人的肩膀上面做出点东西还是很有挑战性的。</p>\n<p>目前能想到的工作只有在编码器上面做文章，学习出语义更加丰富的短语表示。或者可以采用失传多年的递归神经网络，解码时对句法树进行建模，但是随便试了一下，速度很慢而且存在梯度消失的问题，效果也不是很好。转移系统的话暂时也想不出什么好的点子，序列预测的话如果能再想出个新颖的一一对应的序列就好了。</p>\n<p>前路还很长，说长也不长了，只有三年不到的时间了，做不出东西就要延毕了。但愿能在有限的三年时间里做出点成果，提高自己的代码能力，对这个领域也有更加深入的理解！</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><hr>\n<p>[ACL15] Transition-based Neural Constituent Parsing<br>[NAACL16] Recurrent Neural Network Grammars<br>[EMNLP16] Span-Based Constituency Parsing with a Structure-Label System and Provably Optimal Dynamic Oracles<br>[TACL17] In-Order Transition-based Constituent Parsing<br>[EMNLP17] Effective Inference for Generative Neural Parsing<br>[ACL18] Policy Gradient as a Proxy for Dynamic Oracles in Constituency Parsing<br>[ACL17] A Minimal Span-Based Neural Constituency Parser<br>[ACL18] Constituency Parsing with a Self-Attentive Encoder<br>[EMNLP16] Parsing as Language Modeling<br>[ACL18] Straight to the Tree: Constituency Parsing with Neural Syntactic Distance</p>\n"},{"title":"华东师范大学LaTeX幻灯片模板","date":"2017-12-29T10:56:48.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n分享一套自用ppt模板，使用 ```XeLaTeX``` 编译\n链接地址：[传送门](https://github.com/godweiyang/ECNU_BeamerTemplate)\n\n# 界面示例\n![](1.png)\n觉得还可以的下载了用哦，欢迎修改的更美观！","source":"_posts/ecnu-ppt.md","raw":"---\ntitle: 华东师范大学LaTeX幻灯片模板\ndate: 2017-12-29 18:56:48\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- LaTeX\n- Beamer\n- ppt\ncategories:\n- 模板\n---\n\n分享一套自用ppt模板，使用 ```XeLaTeX``` 编译\n链接地址：[传送门](https://github.com/godweiyang/ECNU_BeamerTemplate)\n\n# 界面示例\n![](1.png)\n觉得还可以的下载了用哦，欢迎修改的更美观！","slug":"ecnu-ppt","published":1,"updated":"2019-08-01T09:17:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyyqfjil00077caheye30ew9","content":"<p>分享一套自用ppt模板，使用 <code>XeLaTeX</code> 编译<br>链接地址：<a href=\"https://github.com/godweiyang/ECNU_BeamerTemplate\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h1 id=\"界面示例\"><a href=\"#界面示例\" class=\"headerlink\" title=\"界面示例\"></a>界面示例</h1><p><img src=\"1.png\" alt><br>觉得还可以的下载了用哦，欢迎修改的更美观！</p>\n","site":{"data":{"friends":[{"name":"IVIPC","url":"http://ivipc.uestc.edu.cn/","title":"访问主页","introduction":"UESTC智能视觉信息处理与通信实验室(IVIPC)欢迎您的加入！","avatar":"/medias/avatars/ivipc.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://static.blinkfox.com/20190601.png","name":"码农","introduction":"这里不隐含扭曲的价值观，而是整合并充盈正能量","url":"https://www.90c.vip/","title":"前去学习"},{"avatar":"https://jiangliuhong.gitee.io/images/avatar.jpg","name":"编程常青树","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://jiangliuhong.gitee.io/","title":"前去学习"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"}],"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}]}},"excerpt":"","more":"<p>分享一套自用ppt模板，使用 <code>XeLaTeX</code> 编译<br>链接地址：<a href=\"https://github.com/godweiyang/ECNU_BeamerTemplate\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h1 id=\"界面示例\"><a href=\"#界面示例\" class=\"headerlink\" title=\"界面示例\"></a>界面示例</h1><p><img src=\"1.png\" alt><br>觉得还可以的下载了用哦，欢迎修改的更美观！</p>\n"},{"title":"Sublime Text安装与配置教程","date":"2017-10-02T05:27:35.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\nSublime Text是我一直使用的代码编辑器，我喜爱它的原因就是好看啊！当然打开速度毋庸置疑啦，毕竟不是IDE。这里我把我的安装与配置步骤教给大家，如有未尽之处，大家自己摸索咯，也欢迎与我交流。\n先附上一张美图：\n![](sublime.png)\n# 安装Sublime Text 3\n---\n下载地址请点击[这里](https://download.sublimetext.com/Sublime%20Text%20Build%203143%20x64%20Setup.exe)。\n安装过程就不多说了，一直点`next`就行了。\n\n# 配置C++运行环境\n---\n装完后可以直接写代码了，但是不能运行C++的哦，还需要配置运行环境。\n* 首先要安装C++的编译器MinGW，可以直接去官网下（[传送门](http://www.mingw.org/)）。不过我自己是直接下的CodeBlocks（[传送门](https://downloads.sourceforge.net/project/codeblocks/Binaries/16.01/Windows/codeblocks-16.01mingw-setup.exe)），然后用的自带的MinGW。\n* 装完编译器之后在`我的电脑`右键，依次点击`属性 - 高级系统设置 - 环境变量`，在`系统变量`中找到`Path`，编辑它，新建一条，添加MinGW路径，以我的为例是`E:\\software\\codeblocks\\MinGW\\bin`。\n* 打开Sublime Text，依次点击`Tools - Build System - new Build System`，粘贴以下代码：\n```\n{\n\t\"encoding\": \"utf-8\",\n\t\"working_dir\": \"$file_path\",\n\t\"shell_cmd\": \"g++ -Wall -std=c++11 \\\"$file_name\\\" -o \\\"$file_base_name\\\"\",\n\t\"file_regex\": \"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$\",\n\t\"selector\": \"source.c++\",\n \n\t\"variants\": \n\t[\n\t\t{\t\n\t\t\"name\": \"Run\",\n        \t\"shell_cmd\": \"g++ -Wall -std=c++11 \\\"$file\\\" -o \\\"$file_base_name\\\" && start cmd /c \\\"\\\"${file_path}/${file_base_name}\\\" & pause\\\"\"\n\t\t}\n\t]\n}\n```\n* 然后`ctrl+s`保存，命名为c++11。\n\n这时候随便写一个C++代码，然后`Tools - Build System`选择`c++11`，然后按`ctrl+b`就可以运行啦。\n我这配置的是控制台运行的C++，所以支持输入数据的哦！\n\n# 配置Java运行环境\n---\n* 首先下载Java的编译器jdk（[传送门](http://download.oracle.com/otn-pub/java/jdk/9+181/jdk-9_windows-x64_bin.exe)），安装过程就不说了。\n* 环境变量应该不用自己添加了，安装过程会帮你自动添加。\n* 打开Sublime Text，依次点击`Tools - Build System - new Build System`，粘贴以下代码：\n```\n{\n\t\"cmd\": [\"javac\",\"-d\",\".\",\"$file\"],\n\t\"file_regex\": \"^(...*?):([0-9]*):?([0-9]*)\",\n\t\"selector\": \"source.java\",\n\t\"encoding\":\"cp936\",\n\t//执行完上面的命令就结束\n\t// 下面的命令需要按Ctrl+Shift+b来运行\n\t\"variants\":\n\t[\n\t\t{\n\t\t\t\"name\": \"Run\",\n\t\t\t\"shell\": true,\n\t\t\t\"cmd\" : [\"start\",\"cmd\",\"/c\", \"java ${file_base_name} &echo. & pause\"],\n \t\t\t//c是执行完命令后关闭cmd窗口,\n\t\t\t//k是执行完命令后不关闭cmd窗口。\n\t\t\t// echo. 相当于输入一个回车\n\t\t\t// pause命令使cmd窗口按任意键后才关闭\n\t\t\t\"working_dir\": \"${file_path}\",\n\t\t\t\"encoding\":\"cp936\"\n\t\t}\n\t]\n}\n```\n* 然后`ctrl+s`保存，命名为JavaC。\n\n这时候随便写一个Java代码，然后`Tools - Build System`选择`JavaC`，然后按`ctrl+b`就可以运行啦。\n我这配置的是控制台运行的Java，所以支持输入数据的哦！\n\n# 配置Python运行环境\n---\n* 强烈推荐配合Python发行版本Anaconda使用，下载地址（[传送门](https://www.anaconda.com/download/)），下载速度有点慢，推荐使用迅雷下载。安装过程就不多说了。一定要记得安装过程中有一步添加系统变量一定要勾上！\n* 然后...就没有然后了，Python运行环境安装就是这么简单，直接按`ctrl+b`就能运行了，但是不支持输入数据哦，想要输入数据的话要安装`Sublime REPL`插件，请看后面的教程。\n\n# 安装插件\nSublime Text的强大之处就是可以安装各种插件满足你的需求。\n安装过程很简单：\n* 首先要安装插件管理工具`Package Control`，按`ctrl+shift+p`，输入`Install Package`，按回车，等待安装完毕。\n* 然后`Preferences`选项菜单就会出现`Package Control`子菜单。\n* 然后按`ctrl+shift+p`，输入各种插件名称就能安装啦。\n\n下面推荐几个我使用的插件，其他的可以自行百度搜索。\n* Anaconda\n这个需要你先安装了Anaconda，然后可以提供各种强大的功能，比如代码提示、函数文档查询、代码风格纠正等等。\n* SublimeREPL\n这个是为了Python输入数据准备的插件，装完之后点击`Preferences - Key Bindings`，在`User`文件里粘贴以下代码：\n\t```\n\t[ \n\t\t{ \"keys\": [\"f5\"],\n\t\t\t\"caption\": \"SublimeREPL: Python - RUN current file\",\n\t\t\t\"command\": \"run_existing_window_command\", \"args\":\n\t\t\t{\n\t\t\t\t\"id\": \"repl_python_run\",\n\t\t\t\t\"file\": \"config/Python/Main.sublime-menu\"\n\t\t\t}\n\t\t}\n\t]\n\t```\n\t然后运行Python代码时直接按`F5`就行啦！\n下面两个随意装。\n* SublimeHighLight\n装完之后选中你要复制的代码，右键`Copy as RTF`，然后粘贴到Word里就会保留代码格式，很漂亮的啊！\n* ConvertToUTF8\n这是为了某些中文显示准备的插件，貌似不怎么用得到，随意装吧。\n\n我用的就这些啦，Sublime Text写代码还是很方便的，现在基本不用其他的IDE了，能少打开一个软件是一个嘛。\n\n# 快捷键\n---\n直接递上[传送门](http://www.jb51.net/softjc/180873.html)。\n\n# sublime配置\n**Settings:**\n```\n{\n\t\"color_scheme\": \"Packages/Color Scheme - Default/Monokai.sublime-color-scheme\",\n\t\"font_options\":\n\t[\n\t\t\"gdi\"\n\t],\n\t\"font_size\": 14,\n\t\"ignored_packages\":\n\t[\n\t\t\"Vintage\"\n\t],\n\t\"theme\": \"Adaptive.sublime-theme\",\n\t\"translate_tabs_to_spaces\": true,\n\t\"expand_tabs_on_save\": true,\n\t\"tab_size\": 4,\n}\n```\n\n**Anaconda Settings User:**\n```\n{\n\t\"python_interpreter\": \"E:/software/anaconda/python.exe\",\n\t\"suppress_word_completions\": false,\n\t\"suppress_explicit_completions\": false,\n\t\"complete_parameters\": true,\n\t\"complete__all_parameters\": true,\n\t\"anaconda_linting\": false,\n\t\"swallow_startup_errors\": true,\n\t\"auto_formatting\": true,\n\t\"enable_docstrings_tooltip\": true,\n\t\"enable_signatures_tooltip\": true,\n\t\"display_signatures\": true,\n}\n```\n","source":"_posts/sublime.md","raw":"---\ntitle: Sublime Text安装与配置教程\ndate: 2017-10-02 13:27:35\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- Sublime\ncategories:\n- 软件安装与配置\n---\n\nSublime Text是我一直使用的代码编辑器，我喜爱它的原因就是好看啊！当然打开速度毋庸置疑啦，毕竟不是IDE。这里我把我的安装与配置步骤教给大家，如有未尽之处，大家自己摸索咯，也欢迎与我交流。\n先附上一张美图：\n![](sublime.png)\n# 安装Sublime Text 3\n---\n下载地址请点击[这里](https://download.sublimetext.com/Sublime%20Text%20Build%203143%20x64%20Setup.exe)。\n安装过程就不多说了，一直点`next`就行了。\n\n# 配置C++运行环境\n---\n装完后可以直接写代码了，但是不能运行C++的哦，还需要配置运行环境。\n* 首先要安装C++的编译器MinGW，可以直接去官网下（[传送门](http://www.mingw.org/)）。不过我自己是直接下的CodeBlocks（[传送门](https://downloads.sourceforge.net/project/codeblocks/Binaries/16.01/Windows/codeblocks-16.01mingw-setup.exe)），然后用的自带的MinGW。\n* 装完编译器之后在`我的电脑`右键，依次点击`属性 - 高级系统设置 - 环境变量`，在`系统变量`中找到`Path`，编辑它，新建一条，添加MinGW路径，以我的为例是`E:\\software\\codeblocks\\MinGW\\bin`。\n* 打开Sublime Text，依次点击`Tools - Build System - new Build System`，粘贴以下代码：\n```\n{\n\t\"encoding\": \"utf-8\",\n\t\"working_dir\": \"$file_path\",\n\t\"shell_cmd\": \"g++ -Wall -std=c++11 \\\"$file_name\\\" -o \\\"$file_base_name\\\"\",\n\t\"file_regex\": \"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$\",\n\t\"selector\": \"source.c++\",\n \n\t\"variants\": \n\t[\n\t\t{\t\n\t\t\"name\": \"Run\",\n        \t\"shell_cmd\": \"g++ -Wall -std=c++11 \\\"$file\\\" -o \\\"$file_base_name\\\" && start cmd /c \\\"\\\"${file_path}/${file_base_name}\\\" & pause\\\"\"\n\t\t}\n\t]\n}\n```\n* 然后`ctrl+s`保存，命名为c++11。\n\n这时候随便写一个C++代码，然后`Tools - Build System`选择`c++11`，然后按`ctrl+b`就可以运行啦。\n我这配置的是控制台运行的C++，所以支持输入数据的哦！\n\n# 配置Java运行环境\n---\n* 首先下载Java的编译器jdk（[传送门](http://download.oracle.com/otn-pub/java/jdk/9+181/jdk-9_windows-x64_bin.exe)），安装过程就不说了。\n* 环境变量应该不用自己添加了，安装过程会帮你自动添加。\n* 打开Sublime Text，依次点击`Tools - Build System - new Build System`，粘贴以下代码：\n```\n{\n\t\"cmd\": [\"javac\",\"-d\",\".\",\"$file\"],\n\t\"file_regex\": \"^(...*?):([0-9]*):?([0-9]*)\",\n\t\"selector\": \"source.java\",\n\t\"encoding\":\"cp936\",\n\t//执行完上面的命令就结束\n\t// 下面的命令需要按Ctrl+Shift+b来运行\n\t\"variants\":\n\t[\n\t\t{\n\t\t\t\"name\": \"Run\",\n\t\t\t\"shell\": true,\n\t\t\t\"cmd\" : [\"start\",\"cmd\",\"/c\", \"java ${file_base_name} &echo. & pause\"],\n \t\t\t//c是执行完命令后关闭cmd窗口,\n\t\t\t//k是执行完命令后不关闭cmd窗口。\n\t\t\t// echo. 相当于输入一个回车\n\t\t\t// pause命令使cmd窗口按任意键后才关闭\n\t\t\t\"working_dir\": \"${file_path}\",\n\t\t\t\"encoding\":\"cp936\"\n\t\t}\n\t]\n}\n```\n* 然后`ctrl+s`保存，命名为JavaC。\n\n这时候随便写一个Java代码，然后`Tools - Build System`选择`JavaC`，然后按`ctrl+b`就可以运行啦。\n我这配置的是控制台运行的Java，所以支持输入数据的哦！\n\n# 配置Python运行环境\n---\n* 强烈推荐配合Python发行版本Anaconda使用，下载地址（[传送门](https://www.anaconda.com/download/)），下载速度有点慢，推荐使用迅雷下载。安装过程就不多说了。一定要记得安装过程中有一步添加系统变量一定要勾上！\n* 然后...就没有然后了，Python运行环境安装就是这么简单，直接按`ctrl+b`就能运行了，但是不支持输入数据哦，想要输入数据的话要安装`Sublime REPL`插件，请看后面的教程。\n\n# 安装插件\nSublime Text的强大之处就是可以安装各种插件满足你的需求。\n安装过程很简单：\n* 首先要安装插件管理工具`Package Control`，按`ctrl+shift+p`，输入`Install Package`，按回车，等待安装完毕。\n* 然后`Preferences`选项菜单就会出现`Package Control`子菜单。\n* 然后按`ctrl+shift+p`，输入各种插件名称就能安装啦。\n\n下面推荐几个我使用的插件，其他的可以自行百度搜索。\n* Anaconda\n这个需要你先安装了Anaconda，然后可以提供各种强大的功能，比如代码提示、函数文档查询、代码风格纠正等等。\n* SublimeREPL\n这个是为了Python输入数据准备的插件，装完之后点击`Preferences - Key Bindings`，在`User`文件里粘贴以下代码：\n\t```\n\t[ \n\t\t{ \"keys\": [\"f5\"],\n\t\t\t\"caption\": \"SublimeREPL: Python - RUN current file\",\n\t\t\t\"command\": \"run_existing_window_command\", \"args\":\n\t\t\t{\n\t\t\t\t\"id\": \"repl_python_run\",\n\t\t\t\t\"file\": \"config/Python/Main.sublime-menu\"\n\t\t\t}\n\t\t}\n\t]\n\t```\n\t然后运行Python代码时直接按`F5`就行啦！\n下面两个随意装。\n* SublimeHighLight\n装完之后选中你要复制的代码，右键`Copy as RTF`，然后粘贴到Word里就会保留代码格式，很漂亮的啊！\n* ConvertToUTF8\n这是为了某些中文显示准备的插件，貌似不怎么用得到，随意装吧。\n\n我用的就这些啦，Sublime Text写代码还是很方便的，现在基本不用其他的IDE了，能少打开一个软件是一个嘛。\n\n# 快捷键\n---\n直接递上[传送门](http://www.jb51.net/softjc/180873.html)。\n\n# sublime配置\n**Settings:**\n```\n{\n\t\"color_scheme\": \"Packages/Color Scheme - Default/Monokai.sublime-color-scheme\",\n\t\"font_options\":\n\t[\n\t\t\"gdi\"\n\t],\n\t\"font_size\": 14,\n\t\"ignored_packages\":\n\t[\n\t\t\"Vintage\"\n\t],\n\t\"theme\": \"Adaptive.sublime-theme\",\n\t\"translate_tabs_to_spaces\": true,\n\t\"expand_tabs_on_save\": true,\n\t\"tab_size\": 4,\n}\n```\n\n**Anaconda Settings User:**\n```\n{\n\t\"python_interpreter\": \"E:/software/anaconda/python.exe\",\n\t\"suppress_word_completions\": false,\n\t\"suppress_explicit_completions\": false,\n\t\"complete_parameters\": true,\n\t\"complete__all_parameters\": true,\n\t\"anaconda_linting\": false,\n\t\"swallow_startup_errors\": true,\n\t\"auto_formatting\": true,\n\t\"enable_docstrings_tooltip\": true,\n\t\"enable_signatures_tooltip\": true,\n\t\"display_signatures\": true,\n}\n```\n","slug":"sublime","published":1,"updated":"2019-08-01T09:17:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyyqfjio00087cah26ibdbgt","content":"<p>Sublime Text是我一直使用的代码编辑器，我喜爱它的原因就是好看啊！当然打开速度毋庸置疑啦，毕竟不是IDE。这里我把我的安装与配置步骤教给大家，如有未尽之处，大家自己摸索咯，也欢迎与我交流。<br>先附上一张美图：<br><img src=\"sublime.png\" alt></p>\n<h1 id=\"安装Sublime-Text-3\"><a href=\"#安装Sublime-Text-3\" class=\"headerlink\" title=\"安装Sublime Text 3\"></a>安装Sublime Text 3</h1><hr>\n<p>下载地址请点击<a href=\"https://download.sublimetext.com/Sublime%20Text%20Build%203143%20x64%20Setup.exe\" target=\"_blank\" rel=\"noopener\">这里</a>。<br>安装过程就不多说了，一直点<code>next</code>就行了。</p>\n<h1 id=\"配置C-运行环境\"><a href=\"#配置C-运行环境\" class=\"headerlink\" title=\"配置C++运行环境\"></a>配置C++运行环境</h1><hr>\n<p>装完后可以直接写代码了，但是不能运行C++的哦，还需要配置运行环境。</p>\n<ul>\n<li><p>首先要安装C++的编译器MinGW，可以直接去官网下（<a href=\"http://www.mingw.org/\" target=\"_blank\" rel=\"noopener\">传送门</a>）。不过我自己是直接下的CodeBlocks（<a href=\"https://downloads.sourceforge.net/project/codeblocks/Binaries/16.01/Windows/codeblocks-16.01mingw-setup.exe\" target=\"_blank\" rel=\"noopener\">传送门</a>），然后用的自带的MinGW。</p>\n</li>\n<li><p>装完编译器之后在<code>我的电脑</code>右键，依次点击<code>属性 - 高级系统设置 - 环境变量</code>，在<code>系统变量</code>中找到<code>Path</code>，编辑它，新建一条，添加MinGW路径，以我的为例是<code>E:\\software\\codeblocks\\MinGW\\bin</code>。</p>\n</li>\n<li><p>打开Sublime Text，依次点击<code>Tools - Build System - new Build System</code>，粘贴以下代码：</p>\n<pre><code>{\n  &quot;encoding&quot;: &quot;utf-8&quot;,\n  &quot;working_dir&quot;: &quot;$file_path&quot;,\n  &quot;shell_cmd&quot;: &quot;g++ -Wall -std=c++11 \\&quot;$file_name\\&quot; -o \\&quot;$file_base_name\\&quot;&quot;,\n  &quot;file_regex&quot;: &quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;,\n  &quot;selector&quot;: &quot;source.c++&quot;,\n\n  &quot;variants&quot;: \n  [\n      {    \n      &quot;name&quot;: &quot;Run&quot;,\n          &quot;shell_cmd&quot;: &quot;g++ -Wall -std=c++11 \\&quot;$file\\&quot; -o \\&quot;$file_base_name\\&quot; &amp;&amp; start cmd /c \\&quot;\\&quot;${file_path}/${file_base_name}\\&quot; &amp; pause\\&quot;&quot;\n      }\n  ]\n}</code></pre></li>\n<li><p>然后<code>ctrl+s</code>保存，命名为c++11。</p>\n</li>\n</ul>\n<p>这时候随便写一个C++代码，然后<code>Tools - Build System</code>选择<code>c++11</code>，然后按<code>ctrl+b</code>就可以运行啦。<br>我这配置的是控制台运行的C++，所以支持输入数据的哦！</p>\n<h1 id=\"配置Java运行环境\"><a href=\"#配置Java运行环境\" class=\"headerlink\" title=\"配置Java运行环境\"></a>配置Java运行环境</h1><hr>\n<ul>\n<li>首先下载Java的编译器jdk（<a href=\"http://download.oracle.com/otn-pub/java/jdk/9+181/jdk-9_windows-x64_bin.exe\" target=\"_blank\" rel=\"noopener\">传送门</a>），安装过程就不说了。</li>\n<li>环境变量应该不用自己添加了，安装过程会帮你自动添加。</li>\n<li>打开Sublime Text，依次点击<code>Tools - Build System - new Build System</code>，粘贴以下代码：<pre><code>{\n  &quot;cmd&quot;: [&quot;javac&quot;,&quot;-d&quot;,&quot;.&quot;,&quot;$file&quot;],\n  &quot;file_regex&quot;: &quot;^(...*?):([0-9]*):?([0-9]*)&quot;,\n  &quot;selector&quot;: &quot;source.java&quot;,\n  &quot;encoding&quot;:&quot;cp936&quot;,\n  //执行完上面的命令就结束\n  // 下面的命令需要按Ctrl+Shift+b来运行\n  &quot;variants&quot;:\n  [\n      {\n          &quot;name&quot;: &quot;Run&quot;,\n          &quot;shell&quot;: true,\n          &quot;cmd&quot; : [&quot;start&quot;,&quot;cmd&quot;,&quot;/c&quot;, &quot;java ${file_base_name} &amp;echo. &amp; pause&quot;],\n           //c是执行完命令后关闭cmd窗口,\n          //k是执行完命令后不关闭cmd窗口。\n          // echo. 相当于输入一个回车\n          // pause命令使cmd窗口按任意键后才关闭\n          &quot;working_dir&quot;: &quot;${file_path}&quot;,\n          &quot;encoding&quot;:&quot;cp936&quot;\n      }\n  ]\n}</code></pre></li>\n<li>然后<code>ctrl+s</code>保存，命名为JavaC。</li>\n</ul>\n<p>这时候随便写一个Java代码，然后<code>Tools - Build System</code>选择<code>JavaC</code>，然后按<code>ctrl+b</code>就可以运行啦。<br>我这配置的是控制台运行的Java，所以支持输入数据的哦！</p>\n<h1 id=\"配置Python运行环境\"><a href=\"#配置Python运行环境\" class=\"headerlink\" title=\"配置Python运行环境\"></a>配置Python运行环境</h1><hr>\n<ul>\n<li>强烈推荐配合Python发行版本Anaconda使用，下载地址（<a href=\"https://www.anaconda.com/download/\" target=\"_blank\" rel=\"noopener\">传送门</a>），下载速度有点慢，推荐使用迅雷下载。安装过程就不多说了。一定要记得安装过程中有一步添加系统变量一定要勾上！</li>\n<li>然后…就没有然后了，Python运行环境安装就是这么简单，直接按<code>ctrl+b</code>就能运行了，但是不支持输入数据哦，想要输入数据的话要安装<code>Sublime REPL</code>插件，请看后面的教程。</li>\n</ul>\n<h1 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h1><p>Sublime Text的强大之处就是可以安装各种插件满足你的需求。<br>安装过程很简单：</p>\n<ul>\n<li>首先要安装插件管理工具<code>Package Control</code>，按<code>ctrl+shift+p</code>，输入<code>Install Package</code>，按回车，等待安装完毕。</li>\n<li>然后<code>Preferences</code>选项菜单就会出现<code>Package Control</code>子菜单。</li>\n<li>然后按<code>ctrl+shift+p</code>，输入各种插件名称就能安装啦。</li>\n</ul>\n<p>下面推荐几个我使用的插件，其他的可以自行百度搜索。</p>\n<ul>\n<li>Anaconda<br>这个需要你先安装了Anaconda，然后可以提供各种强大的功能，比如代码提示、函数文档查询、代码风格纠正等等。</li>\n<li>SublimeREPL<br>这个是为了Python输入数据准备的插件，装完之后点击<code>Preferences - Key Bindings</code>，在<code>User</code>文件里粘贴以下代码：<pre><code>  [ \n      { &quot;keys&quot;: [&quot;f5&quot;],\n          &quot;caption&quot;: &quot;SublimeREPL: Python - RUN current file&quot;,\n          &quot;command&quot;: &quot;run_existing_window_command&quot;, &quot;args&quot;:\n          {\n              &quot;id&quot;: &quot;repl_python_run&quot;,\n              &quot;file&quot;: &quot;config/Python/Main.sublime-menu&quot;\n          }\n      }\n  ]</code></pre>  然后运行Python代码时直接按<code>F5</code>就行啦！<br>下面两个随意装。</li>\n<li>SublimeHighLight<br>装完之后选中你要复制的代码，右键<code>Copy as RTF</code>，然后粘贴到Word里就会保留代码格式，很漂亮的啊！</li>\n<li>ConvertToUTF8<br>这是为了某些中文显示准备的插件，貌似不怎么用得到，随意装吧。</li>\n</ul>\n<p>我用的就这些啦，Sublime Text写代码还是很方便的，现在基本不用其他的IDE了，能少打开一个软件是一个嘛。</p>\n<h1 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h1><hr>\n<p>直接递上<a href=\"http://www.jb51.net/softjc/180873.html\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<h1 id=\"sublime配置\"><a href=\"#sublime配置\" class=\"headerlink\" title=\"sublime配置\"></a>sublime配置</h1><p><strong>Settings:</strong></p>\n<pre><code>{\n    &quot;color_scheme&quot;: &quot;Packages/Color Scheme - Default/Monokai.sublime-color-scheme&quot;,\n    &quot;font_options&quot;:\n    [\n        &quot;gdi&quot;\n    ],\n    &quot;font_size&quot;: 14,\n    &quot;ignored_packages&quot;:\n    [\n        &quot;Vintage&quot;\n    ],\n    &quot;theme&quot;: &quot;Adaptive.sublime-theme&quot;,\n    &quot;translate_tabs_to_spaces&quot;: true,\n    &quot;expand_tabs_on_save&quot;: true,\n    &quot;tab_size&quot;: 4,\n}</code></pre><p><strong>Anaconda Settings User:</strong></p>\n<pre><code>{\n    &quot;python_interpreter&quot;: &quot;E:/software/anaconda/python.exe&quot;,\n    &quot;suppress_word_completions&quot;: false,\n    &quot;suppress_explicit_completions&quot;: false,\n    &quot;complete_parameters&quot;: true,\n    &quot;complete__all_parameters&quot;: true,\n    &quot;anaconda_linting&quot;: false,\n    &quot;swallow_startup_errors&quot;: true,\n    &quot;auto_formatting&quot;: true,\n    &quot;enable_docstrings_tooltip&quot;: true,\n    &quot;enable_signatures_tooltip&quot;: true,\n    &quot;display_signatures&quot;: true,\n}</code></pre>","site":{"data":{"friends":[{"name":"IVIPC","url":"http://ivipc.uestc.edu.cn/","title":"访问主页","introduction":"UESTC智能视觉信息处理与通信实验室(IVIPC)欢迎您的加入！","avatar":"/medias/avatars/ivipc.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://static.blinkfox.com/20190601.png","name":"码农","introduction":"这里不隐含扭曲的价值观，而是整合并充盈正能量","url":"https://www.90c.vip/","title":"前去学习"},{"avatar":"https://jiangliuhong.gitee.io/images/avatar.jpg","name":"编程常青树","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://jiangliuhong.gitee.io/","title":"前去学习"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"}],"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}]}},"excerpt":"","more":"<p>Sublime Text是我一直使用的代码编辑器，我喜爱它的原因就是好看啊！当然打开速度毋庸置疑啦，毕竟不是IDE。这里我把我的安装与配置步骤教给大家，如有未尽之处，大家自己摸索咯，也欢迎与我交流。<br>先附上一张美图：<br><img src=\"sublime.png\" alt></p>\n<h1 id=\"安装Sublime-Text-3\"><a href=\"#安装Sublime-Text-3\" class=\"headerlink\" title=\"安装Sublime Text 3\"></a>安装Sublime Text 3</h1><hr>\n<p>下载地址请点击<a href=\"https://download.sublimetext.com/Sublime%20Text%20Build%203143%20x64%20Setup.exe\" target=\"_blank\" rel=\"noopener\">这里</a>。<br>安装过程就不多说了，一直点<code>next</code>就行了。</p>\n<h1 id=\"配置C-运行环境\"><a href=\"#配置C-运行环境\" class=\"headerlink\" title=\"配置C++运行环境\"></a>配置C++运行环境</h1><hr>\n<p>装完后可以直接写代码了，但是不能运行C++的哦，还需要配置运行环境。</p>\n<ul>\n<li><p>首先要安装C++的编译器MinGW，可以直接去官网下（<a href=\"http://www.mingw.org/\" target=\"_blank\" rel=\"noopener\">传送门</a>）。不过我自己是直接下的CodeBlocks（<a href=\"https://downloads.sourceforge.net/project/codeblocks/Binaries/16.01/Windows/codeblocks-16.01mingw-setup.exe\" target=\"_blank\" rel=\"noopener\">传送门</a>），然后用的自带的MinGW。</p>\n</li>\n<li><p>装完编译器之后在<code>我的电脑</code>右键，依次点击<code>属性 - 高级系统设置 - 环境变量</code>，在<code>系统变量</code>中找到<code>Path</code>，编辑它，新建一条，添加MinGW路径，以我的为例是<code>E:\\software\\codeblocks\\MinGW\\bin</code>。</p>\n</li>\n<li><p>打开Sublime Text，依次点击<code>Tools - Build System - new Build System</code>，粘贴以下代码：</p>\n<pre><code>{\n  &quot;encoding&quot;: &quot;utf-8&quot;,\n  &quot;working_dir&quot;: &quot;$file_path&quot;,\n  &quot;shell_cmd&quot;: &quot;g++ -Wall -std=c++11 \\&quot;$file_name\\&quot; -o \\&quot;$file_base_name\\&quot;&quot;,\n  &quot;file_regex&quot;: &quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;,\n  &quot;selector&quot;: &quot;source.c++&quot;,\n\n  &quot;variants&quot;: \n  [\n      {    \n      &quot;name&quot;: &quot;Run&quot;,\n          &quot;shell_cmd&quot;: &quot;g++ -Wall -std=c++11 \\&quot;$file\\&quot; -o \\&quot;$file_base_name\\&quot; &amp;&amp; start cmd /c \\&quot;\\&quot;${file_path}/${file_base_name}\\&quot; &amp; pause\\&quot;&quot;\n      }\n  ]\n}</code></pre></li>\n<li><p>然后<code>ctrl+s</code>保存，命名为c++11。</p>\n</li>\n</ul>\n<p>这时候随便写一个C++代码，然后<code>Tools - Build System</code>选择<code>c++11</code>，然后按<code>ctrl+b</code>就可以运行啦。<br>我这配置的是控制台运行的C++，所以支持输入数据的哦！</p>\n<h1 id=\"配置Java运行环境\"><a href=\"#配置Java运行环境\" class=\"headerlink\" title=\"配置Java运行环境\"></a>配置Java运行环境</h1><hr>\n<ul>\n<li>首先下载Java的编译器jdk（<a href=\"http://download.oracle.com/otn-pub/java/jdk/9+181/jdk-9_windows-x64_bin.exe\" target=\"_blank\" rel=\"noopener\">传送门</a>），安装过程就不说了。</li>\n<li>环境变量应该不用自己添加了，安装过程会帮你自动添加。</li>\n<li>打开Sublime Text，依次点击<code>Tools - Build System - new Build System</code>，粘贴以下代码：<pre><code>{\n  &quot;cmd&quot;: [&quot;javac&quot;,&quot;-d&quot;,&quot;.&quot;,&quot;$file&quot;],\n  &quot;file_regex&quot;: &quot;^(...*?):([0-9]*):?([0-9]*)&quot;,\n  &quot;selector&quot;: &quot;source.java&quot;,\n  &quot;encoding&quot;:&quot;cp936&quot;,\n  //执行完上面的命令就结束\n  // 下面的命令需要按Ctrl+Shift+b来运行\n  &quot;variants&quot;:\n  [\n      {\n          &quot;name&quot;: &quot;Run&quot;,\n          &quot;shell&quot;: true,\n          &quot;cmd&quot; : [&quot;start&quot;,&quot;cmd&quot;,&quot;/c&quot;, &quot;java ${file_base_name} &amp;echo. &amp; pause&quot;],\n           //c是执行完命令后关闭cmd窗口,\n          //k是执行完命令后不关闭cmd窗口。\n          // echo. 相当于输入一个回车\n          // pause命令使cmd窗口按任意键后才关闭\n          &quot;working_dir&quot;: &quot;${file_path}&quot;,\n          &quot;encoding&quot;:&quot;cp936&quot;\n      }\n  ]\n}</code></pre></li>\n<li>然后<code>ctrl+s</code>保存，命名为JavaC。</li>\n</ul>\n<p>这时候随便写一个Java代码，然后<code>Tools - Build System</code>选择<code>JavaC</code>，然后按<code>ctrl+b</code>就可以运行啦。<br>我这配置的是控制台运行的Java，所以支持输入数据的哦！</p>\n<h1 id=\"配置Python运行环境\"><a href=\"#配置Python运行环境\" class=\"headerlink\" title=\"配置Python运行环境\"></a>配置Python运行环境</h1><hr>\n<ul>\n<li>强烈推荐配合Python发行版本Anaconda使用，下载地址（<a href=\"https://www.anaconda.com/download/\" target=\"_blank\" rel=\"noopener\">传送门</a>），下载速度有点慢，推荐使用迅雷下载。安装过程就不多说了。一定要记得安装过程中有一步添加系统变量一定要勾上！</li>\n<li>然后…就没有然后了，Python运行环境安装就是这么简单，直接按<code>ctrl+b</code>就能运行了，但是不支持输入数据哦，想要输入数据的话要安装<code>Sublime REPL</code>插件，请看后面的教程。</li>\n</ul>\n<h1 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h1><p>Sublime Text的强大之处就是可以安装各种插件满足你的需求。<br>安装过程很简单：</p>\n<ul>\n<li>首先要安装插件管理工具<code>Package Control</code>，按<code>ctrl+shift+p</code>，输入<code>Install Package</code>，按回车，等待安装完毕。</li>\n<li>然后<code>Preferences</code>选项菜单就会出现<code>Package Control</code>子菜单。</li>\n<li>然后按<code>ctrl+shift+p</code>，输入各种插件名称就能安装啦。</li>\n</ul>\n<p>下面推荐几个我使用的插件，其他的可以自行百度搜索。</p>\n<ul>\n<li>Anaconda<br>这个需要你先安装了Anaconda，然后可以提供各种强大的功能，比如代码提示、函数文档查询、代码风格纠正等等。</li>\n<li>SublimeREPL<br>这个是为了Python输入数据准备的插件，装完之后点击<code>Preferences - Key Bindings</code>，在<code>User</code>文件里粘贴以下代码：<pre><code>  [ \n      { &quot;keys&quot;: [&quot;f5&quot;],\n          &quot;caption&quot;: &quot;SublimeREPL: Python - RUN current file&quot;,\n          &quot;command&quot;: &quot;run_existing_window_command&quot;, &quot;args&quot;:\n          {\n              &quot;id&quot;: &quot;repl_python_run&quot;,\n              &quot;file&quot;: &quot;config/Python/Main.sublime-menu&quot;\n          }\n      }\n  ]</code></pre>  然后运行Python代码时直接按<code>F5</code>就行啦！<br>下面两个随意装。</li>\n<li>SublimeHighLight<br>装完之后选中你要复制的代码，右键<code>Copy as RTF</code>，然后粘贴到Word里就会保留代码格式，很漂亮的啊！</li>\n<li>ConvertToUTF8<br>这是为了某些中文显示准备的插件，貌似不怎么用得到，随意装吧。</li>\n</ul>\n<p>我用的就这些啦，Sublime Text写代码还是很方便的，现在基本不用其他的IDE了，能少打开一个软件是一个嘛。</p>\n<h1 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h1><hr>\n<p>直接递上<a href=\"http://www.jb51.net/softjc/180873.html\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<h1 id=\"sublime配置\"><a href=\"#sublime配置\" class=\"headerlink\" title=\"sublime配置\"></a>sublime配置</h1><p><strong>Settings:</strong></p>\n<pre><code>{\n    &quot;color_scheme&quot;: &quot;Packages/Color Scheme - Default/Monokai.sublime-color-scheme&quot;,\n    &quot;font_options&quot;:\n    [\n        &quot;gdi&quot;\n    ],\n    &quot;font_size&quot;: 14,\n    &quot;ignored_packages&quot;:\n    [\n        &quot;Vintage&quot;\n    ],\n    &quot;theme&quot;: &quot;Adaptive.sublime-theme&quot;,\n    &quot;translate_tabs_to_spaces&quot;: true,\n    &quot;expand_tabs_on_save&quot;: true,\n    &quot;tab_size&quot;: 4,\n}</code></pre><p><strong>Anaconda Settings User:</strong></p>\n<pre><code>{\n    &quot;python_interpreter&quot;: &quot;E:/software/anaconda/python.exe&quot;,\n    &quot;suppress_word_completions&quot;: false,\n    &quot;suppress_explicit_completions&quot;: false,\n    &quot;complete_parameters&quot;: true,\n    &quot;complete__all_parameters&quot;: true,\n    &quot;anaconda_linting&quot;: false,\n    &quot;swallow_startup_errors&quot;: true,\n    &quot;auto_formatting&quot;: true,\n    &quot;enable_docstrings_tooltip&quot;: true,\n    &quot;enable_signatures_tooltip&quot;: true,\n    &quot;display_signatures&quot;: true,\n}</code></pre>"},{"title":"Latex撰写论文常用技巧总结","date":"2019-01-13T09:34:07.000Z","top":true,"cover":true,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28636660&auto=1&height=66\"></iframe></div>\n\n这篇博文专门用来记录Latex写论文过程中遇到的一些技巧与心得。\n\n# 插入矢量图片\n---\n首先在Office PowerPoint中画好模型图，然后有两种方法在Latex中插入矢量图。\n![](1.jpg)\n**方法一：**\n直接另存为pdf，例如存为`figure.pdf`。\n![](2.jpg)\n注意到pdf打开来左右两个侧边栏有较大的空余空间，所以最好在ppt中绘制模型图的时候就调整好。\n然后在Latex中使用如下代码插入pdf图片即可：\n```latex\n\\begin{figure*}[htbp]\n    \\centering\n    \\includegraphics[width=\\textwidth]{figure.pdf}\n    \\caption{ Model. }\n    \\label{fig::model}\n\\end{figure*}\n```\n其中参数`width=\\textwidth`是用来调整图片宽度，使得图片占满整个论文，效果如下：\n![](3.jpg)\n注意到这里左右两个侧边栏间距的确有点大了，没有占满整个页面。\n如果想要图片只显示在一半的页面上，那么只需要用如下代码即可：\n```latex\n\\begin{figure}[htbp]\n    \\centering\n    \\includegraphics[width=\\linewidth]{figure.pdf}\n    \\caption{ Model. }\n    \\label{fig::model}\n\\end{figure}\n```\n效果如下：\n![](4.jpg)\n\n**2019.1.14更新：**\n关于生成出来的模型图pdf侧边距过大的问题，可以下载“迅捷pdf编辑器”，使用它强大的页面裁剪功能。当然非会员会留下水印，只需要修改水印透明度为0即可。\n\n**方法二：**\nppt绘制好的模型图右键另存为`emf`格式，这是一种Windows的矢量图格式，然后下载一款软件叫`Metafile to EPS Converter`[地址](http://wiki.lyx.org/uploads/Windows/metafile2eps/metafile2eps.exe)，将图片转为Latex支持的`eps`格式，例如命名为`figure.eps`。\n\n最后在Latex使用相同的代码插入图片即可，效果如下：\n![](5.jpg)\n可以看出两侧间距比原来小了很多。\n\n**2019.3.6更新：**\n# 中文支持\n---\n```latex\n\\usepackage{CJK}\n\n\\begin{document}\n\\begin{CJK*}{GBK}{song}\n\n% 正文\n\n\\end{CJK*}\n\\end{document}\n```\n\n# 图片\n---\n**单幅图片：**\n```latex\n\\begin{figure}[htbp]\n    \\centering\n    \\includegraphics[width=\\linewidth]{figure.pdf}\n    \\caption{xxxxx.}\n    \\label{Fig:xxxxx}\n\\end{figure}\n```\n跨双栏的话把`figure`改成`figure*`，`htbp`控制位置，自己看着调。\n\n难点是跨双栏图片置顶，一般情况下会自动跑到下一页去，找了半天才找到解决方法：\n```latex\n\\twocolumn[{\n    \\renewcommand\\twocolumn[1][]{#1}\n    \\begin{center}\n        \\centering\n        \\includegraphics[width=\\textwidth]{figure.pdf}\n        \\captionof{xxxxx.}\n    \\end{center}\n}]\n```\n缺点是无法添加`label`，正文只能手动加引用了。\n\n**两幅图片同一行显示：**\n```latex\n\\begin{figure*}[htbp]\n    \\centering\n    \\subfigure[fig1.]{\n        \\begin{minipage}[t]{0.58\\textwidth}\n        \\includegraphics[width=\\textwidth]{figure1.pdf}\n        \\end{minipage}\n        \\label{Fig:fig1a}\n    }\n    \\subfigure[fig2.]{\n        \\begin{minipage}[t]{0.34\\textwidth}\n        \\includegraphics[width=\\textwidth]{figure2.pdf}\n        \\end{minipage}\n        \\label{Fig:fig1b}\n    }\n    \\caption{xxxxx.}\n    \\label{Fig:fig1}\n\\end{figure*}\n```\n注意的是，两个图片宽度之和`0.58 + 0.34 = 0.92`要尽量小于1，不然会显示出问题。\n\n# 伪代码\n---\n\n```latex\n\\renewcommand{\\algorithmicrequire}{ \\textbf{Input:}}\n\\renewcommand{\\algorithmicensure}{ \\textbf{Output:}}\n\n\\begin{algorithm}[t]\n    \\caption{ alg1. }\\label{Alg:Alg1}\n    \\begin{algorithmic}[1]\n        \\Require\n            % 输入\n        \\Ensure\n            % 输出\n        % 过程\n        \\Function {xxxxxx}{$i, j$}\n            % 函数体\n        \\EndFunction\n    \\end{algorithmic}\n\\end{algorithm}\n```\n\n# 表格\n---\n\n```latex\n\\newcommand{\\tabincell}[2]{\\begin{tabular}{@{}#1@{}}#2\\end{tabular}}\n\n\\begin{table}[t]\n\\normalsize\n\\begin{center}\n\\begin{tabular}{l|l|ccc}\n\n\\hline\n\\multicolumn{2}{c|}{Model} & LR & LP & F1\\\\\n\n\\hline\\hline\n\n\\end{tabular}\n\\end{center}\n\\caption{ xxxxx.}\n\\label{Tab:CompDiffConfig}\n\\end{table}\n```\n\n两个难点，一个是合并同一行的单元格，用`\\multicolumn{cols}{pos}{text}`。\n\n一个是合并同一列的单元格，用：\n```latex\n\\begin{table}\n    \\centering\n    \\begin{tabular}{|c|c|c|c|}\n        \\hline\n        \\multirow{2}*{合并两行一列} & 二 & 三 & 四 \\\\\n        ~ & 2 & 3 & 4 \\\\\n        \\hline\n    \\end{tabular}\n\\end{table}\n```\n注意第二行第一列要用`~`补上空位。用`\\cline{start-end}`来代替`\\hline`划线。\n\n**暂时就想到这些了，等想到了再更吧，祝我paper顺利。**","source":"_posts/latex-pdf.md","raw":"---\ntitle: Latex撰写论文常用技巧总结\ndate: 2019-01-13 17:34:07\ntop: true\ncover: true\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- LaTeX\ncategories:\n- 软件安装与配置\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28636660&auto=1&height=66\"></iframe></div>\n\n这篇博文专门用来记录Latex写论文过程中遇到的一些技巧与心得。\n\n# 插入矢量图片\n---\n首先在Office PowerPoint中画好模型图，然后有两种方法在Latex中插入矢量图。\n![](1.jpg)\n**方法一：**\n直接另存为pdf，例如存为`figure.pdf`。\n![](2.jpg)\n注意到pdf打开来左右两个侧边栏有较大的空余空间，所以最好在ppt中绘制模型图的时候就调整好。\n然后在Latex中使用如下代码插入pdf图片即可：\n```latex\n\\begin{figure*}[htbp]\n    \\centering\n    \\includegraphics[width=\\textwidth]{figure.pdf}\n    \\caption{ Model. }\n    \\label{fig::model}\n\\end{figure*}\n```\n其中参数`width=\\textwidth`是用来调整图片宽度，使得图片占满整个论文，效果如下：\n![](3.jpg)\n注意到这里左右两个侧边栏间距的确有点大了，没有占满整个页面。\n如果想要图片只显示在一半的页面上，那么只需要用如下代码即可：\n```latex\n\\begin{figure}[htbp]\n    \\centering\n    \\includegraphics[width=\\linewidth]{figure.pdf}\n    \\caption{ Model. }\n    \\label{fig::model}\n\\end{figure}\n```\n效果如下：\n![](4.jpg)\n\n**2019.1.14更新：**\n关于生成出来的模型图pdf侧边距过大的问题，可以下载“迅捷pdf编辑器”，使用它强大的页面裁剪功能。当然非会员会留下水印，只需要修改水印透明度为0即可。\n\n**方法二：**\nppt绘制好的模型图右键另存为`emf`格式，这是一种Windows的矢量图格式，然后下载一款软件叫`Metafile to EPS Converter`[地址](http://wiki.lyx.org/uploads/Windows/metafile2eps/metafile2eps.exe)，将图片转为Latex支持的`eps`格式，例如命名为`figure.eps`。\n\n最后在Latex使用相同的代码插入图片即可，效果如下：\n![](5.jpg)\n可以看出两侧间距比原来小了很多。\n\n**2019.3.6更新：**\n# 中文支持\n---\n```latex\n\\usepackage{CJK}\n\n\\begin{document}\n\\begin{CJK*}{GBK}{song}\n\n% 正文\n\n\\end{CJK*}\n\\end{document}\n```\n\n# 图片\n---\n**单幅图片：**\n```latex\n\\begin{figure}[htbp]\n    \\centering\n    \\includegraphics[width=\\linewidth]{figure.pdf}\n    \\caption{xxxxx.}\n    \\label{Fig:xxxxx}\n\\end{figure}\n```\n跨双栏的话把`figure`改成`figure*`，`htbp`控制位置，自己看着调。\n\n难点是跨双栏图片置顶，一般情况下会自动跑到下一页去，找了半天才找到解决方法：\n```latex\n\\twocolumn[{\n    \\renewcommand\\twocolumn[1][]{#1}\n    \\begin{center}\n        \\centering\n        \\includegraphics[width=\\textwidth]{figure.pdf}\n        \\captionof{xxxxx.}\n    \\end{center}\n}]\n```\n缺点是无法添加`label`，正文只能手动加引用了。\n\n**两幅图片同一行显示：**\n```latex\n\\begin{figure*}[htbp]\n    \\centering\n    \\subfigure[fig1.]{\n        \\begin{minipage}[t]{0.58\\textwidth}\n        \\includegraphics[width=\\textwidth]{figure1.pdf}\n        \\end{minipage}\n        \\label{Fig:fig1a}\n    }\n    \\subfigure[fig2.]{\n        \\begin{minipage}[t]{0.34\\textwidth}\n        \\includegraphics[width=\\textwidth]{figure2.pdf}\n        \\end{minipage}\n        \\label{Fig:fig1b}\n    }\n    \\caption{xxxxx.}\n    \\label{Fig:fig1}\n\\end{figure*}\n```\n注意的是，两个图片宽度之和`0.58 + 0.34 = 0.92`要尽量小于1，不然会显示出问题。\n\n# 伪代码\n---\n\n```latex\n\\renewcommand{\\algorithmicrequire}{ \\textbf{Input:}}\n\\renewcommand{\\algorithmicensure}{ \\textbf{Output:}}\n\n\\begin{algorithm}[t]\n    \\caption{ alg1. }\\label{Alg:Alg1}\n    \\begin{algorithmic}[1]\n        \\Require\n            % 输入\n        \\Ensure\n            % 输出\n        % 过程\n        \\Function {xxxxxx}{$i, j$}\n            % 函数体\n        \\EndFunction\n    \\end{algorithmic}\n\\end{algorithm}\n```\n\n# 表格\n---\n\n```latex\n\\newcommand{\\tabincell}[2]{\\begin{tabular}{@{}#1@{}}#2\\end{tabular}}\n\n\\begin{table}[t]\n\\normalsize\n\\begin{center}\n\\begin{tabular}{l|l|ccc}\n\n\\hline\n\\multicolumn{2}{c|}{Model} & LR & LP & F1\\\\\n\n\\hline\\hline\n\n\\end{tabular}\n\\end{center}\n\\caption{ xxxxx.}\n\\label{Tab:CompDiffConfig}\n\\end{table}\n```\n\n两个难点，一个是合并同一行的单元格，用`\\multicolumn{cols}{pos}{text}`。\n\n一个是合并同一列的单元格，用：\n```latex\n\\begin{table}\n    \\centering\n    \\begin{tabular}{|c|c|c|c|}\n        \\hline\n        \\multirow{2}*{合并两行一列} & 二 & 三 & 四 \\\\\n        ~ & 2 & 3 & 4 \\\\\n        \\hline\n    \\end{tabular}\n\\end{table}\n```\n注意第二行第一列要用`~`补上空位。用`\\cline{start-end}`来代替`\\hline`划线。\n\n**暂时就想到这些了，等想到了再更吧，祝我paper顺利。**","slug":"latex-pdf","published":1,"updated":"2019-08-04T01:17:06.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyyqfjiu00097cahb54av6ig","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28636660&auto=1&height=66\"></iframe></div>\n\n<p>这篇博文专门用来记录Latex写论文过程中遇到的一些技巧与心得。</p>\n<h1 id=\"插入矢量图片\"><a href=\"#插入矢量图片\" class=\"headerlink\" title=\"插入矢量图片\"></a>插入矢量图片</h1><hr>\n<p>首先在Office PowerPoint中画好模型图，然后有两种方法在Latex中插入矢量图。<br><img src=\"1.jpg\" alt><br><strong>方法一：</strong><br>直接另存为pdf，例如存为<code>figure.pdf</code>。<br><img src=\"2.jpg\" alt><br>注意到pdf打开来左右两个侧边栏有较大的空余空间，所以最好在ppt中绘制模型图的时候就调整好。<br>然后在Latex中使用如下代码插入pdf图片即可：</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure*</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>htbp<span class=\"token punctuation\">]</span>\n    <span class=\"token function selector\">\\centering</span>\n    <span class=\"token function selector\">\\includegraphics</span><span class=\"token punctuation\">[</span>width=<span class=\"token function selector\">\\textwidth</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>figure.pdf<span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\caption</span><span class=\"token punctuation\">{</span> Model. <span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">fig::model</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure*</span><span class=\"token punctuation\">}</span></code></pre>\n<p>其中参数<code>width=\\textwidth</code>是用来调整图片宽度，使得图片占满整个论文，效果如下：<br><img src=\"3.jpg\" alt><br>注意到这里左右两个侧边栏间距的确有点大了，没有占满整个页面。<br>如果想要图片只显示在一半的页面上，那么只需要用如下代码即可：</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>htbp<span class=\"token punctuation\">]</span>\n    <span class=\"token function selector\">\\centering</span>\n    <span class=\"token function selector\">\\includegraphics</span><span class=\"token punctuation\">[</span>width=<span class=\"token function selector\">\\linewidth</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>figure.pdf<span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\caption</span><span class=\"token punctuation\">{</span> Model. <span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">fig::model</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure</span><span class=\"token punctuation\">}</span></code></pre>\n<p>效果如下：<br><img src=\"4.jpg\" alt></p>\n<p><strong>2019.1.14更新：</strong><br>关于生成出来的模型图pdf侧边距过大的问题，可以下载“迅捷pdf编辑器”，使用它强大的页面裁剪功能。当然非会员会留下水印，只需要修改水印透明度为0即可。</p>\n<p><strong>方法二：</strong><br>ppt绘制好的模型图右键另存为<code>emf</code>格式，这是一种Windows的矢量图格式，然后下载一款软件叫<code>Metafile to EPS Converter</code><a href=\"http://wiki.lyx.org/uploads/Windows/metafile2eps/metafile2eps.exe\" target=\"_blank\" rel=\"noopener\">地址</a>，将图片转为Latex支持的<code>eps</code>格式，例如命名为<code>figure.eps</code>。</p>\n<p>最后在Latex使用相同的代码插入图片即可，效果如下：<br><img src=\"5.jpg\" alt><br>可以看出两侧间距比原来小了很多。</p>\n<p><strong>2019.3.6更新：</strong></p>\n<h1 id=\"中文支持\"><a href=\"#中文支持\" class=\"headerlink\" title=\"中文支持\"></a>中文支持</h1><hr>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\usepackage</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">CJK</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">document</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">CJK*</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>GBK<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>song<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">% 正文</span>\n\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">CJK*</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">document</span><span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h1><hr>\n<p><strong>单幅图片：</strong></p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>htbp<span class=\"token punctuation\">]</span>\n    <span class=\"token function selector\">\\centering</span>\n    <span class=\"token function selector\">\\includegraphics</span><span class=\"token punctuation\">[</span>width=<span class=\"token function selector\">\\linewidth</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>figure.pdf<span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\caption</span><span class=\"token punctuation\">{</span>xxxxx.<span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">Fig:xxxxx</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure</span><span class=\"token punctuation\">}</span></code></pre>\n<p>跨双栏的话把<code>figure</code>改成<code>figure*</code>，<code>htbp</code>控制位置，自己看着调。</p>\n<p>难点是跨双栏图片置顶，一般情况下会自动跑到下一页去，找了半天才找到解决方法：</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\twocolumn</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function selector\">\\renewcommand</span><span class=\"token function selector\">\\twocolumn</span><span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>#1<span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">center</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\centering</span>\n        <span class=\"token function selector\">\\includegraphics</span><span class=\"token punctuation\">[</span>width=<span class=\"token function selector\">\\textwidth</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>figure.pdf<span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\captionof</span><span class=\"token punctuation\">{</span>xxxxx.<span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">center</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre>\n<p>缺点是无法添加<code>label</code>，正文只能手动加引用了。</p>\n<p><strong>两幅图片同一行显示：</strong></p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure*</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>htbp<span class=\"token punctuation\">]</span>\n    <span class=\"token function selector\">\\centering</span>\n    <span class=\"token function selector\">\\subfigure</span><span class=\"token punctuation\">[</span>fig1.<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">minipage</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>0.58<span class=\"token function selector\">\\textwidth</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\includegraphics</span><span class=\"token punctuation\">[</span>width=<span class=\"token function selector\">\\textwidth</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>figure1.pdf<span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">minipage</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">Fig:fig1a</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\subfigure</span><span class=\"token punctuation\">[</span>fig2.<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">minipage</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>0.34<span class=\"token function selector\">\\textwidth</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\includegraphics</span><span class=\"token punctuation\">[</span>width=<span class=\"token function selector\">\\textwidth</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>figure2.pdf<span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">minipage</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">Fig:fig1b</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\caption</span><span class=\"token punctuation\">{</span>xxxxx.<span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">Fig:fig1</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">figure*</span><span class=\"token punctuation\">}</span></code></pre>\n<p>注意的是，两个图片宽度之和<code>0.58 + 0.34 = 0.92</code>要尽量小于1，不然会显示出问题。</p>\n<h1 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h1><hr>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\renewcommand</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\algorithmicrequire</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span> <span class=\"token function selector\">\\textbf</span><span class=\"token punctuation\">{</span>Input:<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\renewcommand</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\algorithmicensure</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span> <span class=\"token function selector\">\\textbf</span><span class=\"token punctuation\">{</span>Output:<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">algorithm</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span>\n    <span class=\"token function selector\">\\caption</span><span class=\"token punctuation\">{</span> alg1. <span class=\"token punctuation\">}</span><span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">Alg:Alg1</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">algorithmic</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>\n        <span class=\"token function selector\">\\Require</span>\n            <span class=\"token comment\" spellcheck=\"true\">% 输入</span>\n        <span class=\"token function selector\">\\Ensure</span>\n            <span class=\"token comment\" spellcheck=\"true\">% 输出</span>\n        <span class=\"token comment\" spellcheck=\"true\">% 过程</span>\n        <span class=\"token function selector\">\\Function</span> <span class=\"token punctuation\">{</span>xxxxxx<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token equation string\">$i, j$</span><span class=\"token punctuation\">}</span>\n            <span class=\"token comment\" spellcheck=\"true\">% 函数体</span>\n        <span class=\"token function selector\">\\EndFunction</span>\n    <span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">algorithmic</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">algorithm</span><span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h1><hr>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\newcommand</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\tabincell</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>@<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>#1@<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>#2<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span>\n<span class=\"token function selector\">\\normalsize</span>\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">center</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>l|l|ccc<span class=\"token punctuation\">}</span>\n\n<span class=\"token function selector\">\\hline</span>\n<span class=\"token function selector\">\\multicolumn</span><span class=\"token punctuation\">{</span>2<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>c|<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>Model<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">&amp;</span> LR <span class=\"token punctuation\">&amp;</span> LP <span class=\"token punctuation\">&amp;</span> F1<span class=\"token function selector\">\\\\</span>\n\n<span class=\"token function selector\">\\hline</span><span class=\"token function selector\">\\hline</span>\n\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">center</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\caption</span><span class=\"token punctuation\">{</span> xxxxx.<span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\label</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">Tab:CompDiffConfig</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">}</span></code></pre>\n<p>两个难点，一个是合并同一行的单元格，用<code>\\multicolumn{cols}{pos}{text}</code>。</p>\n<p>一个是合并同一列的单元格，用：</p>\n<pre class=\" language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function selector\">\\centering</span>\n    <span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>|c|c|c|c|<span class=\"token punctuation\">}</span>\n        <span class=\"token function selector\">\\hline</span>\n        <span class=\"token function selector\">\\multirow</span><span class=\"token punctuation\">{</span>2<span class=\"token punctuation\">}</span>*<span class=\"token punctuation\">{</span>合并两行一列<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">&amp;</span> 二 <span class=\"token punctuation\">&amp;</span> 三 <span class=\"token punctuation\">&amp;</span> 四 <span class=\"token function selector\">\\\\</span>\n        ~ <span class=\"token punctuation\">&amp;</span> 2 <span class=\"token punctuation\">&amp;</span> 3 <span class=\"token punctuation\">&amp;</span> 4 <span class=\"token function selector\">\\\\</span>\n        <span class=\"token function selector\">\\hline</span>\n    <span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">}</span></code></pre>\n<p>注意第二行第一列要用<code>~</code>补上空位。用<code>\\cline{start-end}</code>来代替<code>\\hline</code>划线。</p>\n<p><strong>暂时就想到这些了，等想到了再更吧，祝我paper顺利。</strong></p>\n","site":{"data":{"friends":[{"name":"IVIPC","url":"http://ivipc.uestc.edu.cn/","title":"访问主页","introduction":"UESTC智能视觉信息处理与通信实验室(IVIPC)欢迎您的加入！","avatar":"/medias/avatars/ivipc.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://static.blinkfox.com/20190601.png","name":"码农","introduction":"这里不隐含扭曲的价值观，而是整合并充盈正能量","url":"https://www.90c.vip/","title":"前去学习"},{"avatar":"https://jiangliuhong.gitee.io/images/avatar.jpg","name":"编程常青树","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://jiangliuhong.gitee.io/","title":"前去学习"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"}],"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28636660&auto=1&height=66\"></iframe></div>\n\n<p>这篇博文专门用来记录Latex写论文过程中遇到的一些技巧与心得。</p>\n<h1 id=\"插入矢量图片\"><a href=\"#插入矢量图片\" class=\"headerlink\" title=\"插入矢量图片\"></a>插入矢量图片</h1><hr>\n<p>首先在Office PowerPoint中画好模型图，然后有两种方法在Latex中插入矢量图。<br><img src=\"1.jpg\" alt><br><strong>方法一：</strong><br>直接另存为pdf，例如存为<code>figure.pdf</code>。<br><img src=\"2.jpg\" alt><br>注意到pdf打开来左右两个侧边栏有较大的空余空间，所以最好在ppt中绘制模型图的时候就调整好。<br>然后在Latex中使用如下代码插入pdf图片即可：</p>\n<pre><code class=\"latex\">\\begin{figure*}[htbp]\n    \\centering\n    \\includegraphics[width=\\textwidth]{figure.pdf}\n    \\caption{ Model. }\n    \\label{fig::model}\n\\end{figure*}</code></pre>\n<p>其中参数<code>width=\\textwidth</code>是用来调整图片宽度，使得图片占满整个论文，效果如下：<br><img src=\"3.jpg\" alt><br>注意到这里左右两个侧边栏间距的确有点大了，没有占满整个页面。<br>如果想要图片只显示在一半的页面上，那么只需要用如下代码即可：</p>\n<pre><code class=\"latex\">\\begin{figure}[htbp]\n    \\centering\n    \\includegraphics[width=\\linewidth]{figure.pdf}\n    \\caption{ Model. }\n    \\label{fig::model}\n\\end{figure}</code></pre>\n<p>效果如下：<br><img src=\"4.jpg\" alt></p>\n<p><strong>2019.1.14更新：</strong><br>关于生成出来的模型图pdf侧边距过大的问题，可以下载“迅捷pdf编辑器”，使用它强大的页面裁剪功能。当然非会员会留下水印，只需要修改水印透明度为0即可。</p>\n<p><strong>方法二：</strong><br>ppt绘制好的模型图右键另存为<code>emf</code>格式，这是一种Windows的矢量图格式，然后下载一款软件叫<code>Metafile to EPS Converter</code><a href=\"http://wiki.lyx.org/uploads/Windows/metafile2eps/metafile2eps.exe\" target=\"_blank\" rel=\"noopener\">地址</a>，将图片转为Latex支持的<code>eps</code>格式，例如命名为<code>figure.eps</code>。</p>\n<p>最后在Latex使用相同的代码插入图片即可，效果如下：<br><img src=\"5.jpg\" alt><br>可以看出两侧间距比原来小了很多。</p>\n<p><strong>2019.3.6更新：</strong></p>\n<h1 id=\"中文支持\"><a href=\"#中文支持\" class=\"headerlink\" title=\"中文支持\"></a>中文支持</h1><hr>\n<pre><code class=\"latex\">\\usepackage{CJK}\n\n\\begin{document}\n\\begin{CJK*}{GBK}{song}\n\n% 正文\n\n\\end{CJK*}\n\\end{document}</code></pre>\n<h1 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h1><hr>\n<p><strong>单幅图片：</strong></p>\n<pre><code class=\"latex\">\\begin{figure}[htbp]\n    \\centering\n    \\includegraphics[width=\\linewidth]{figure.pdf}\n    \\caption{xxxxx.}\n    \\label{Fig:xxxxx}\n\\end{figure}</code></pre>\n<p>跨双栏的话把<code>figure</code>改成<code>figure*</code>，<code>htbp</code>控制位置，自己看着调。</p>\n<p>难点是跨双栏图片置顶，一般情况下会自动跑到下一页去，找了半天才找到解决方法：</p>\n<pre><code class=\"latex\">\\twocolumn[{\n    \\renewcommand\\twocolumn[1][]{#1}\n    \\begin{center}\n        \\centering\n        \\includegraphics[width=\\textwidth]{figure.pdf}\n        \\captionof{xxxxx.}\n    \\end{center}\n}]</code></pre>\n<p>缺点是无法添加<code>label</code>，正文只能手动加引用了。</p>\n<p><strong>两幅图片同一行显示：</strong></p>\n<pre><code class=\"latex\">\\begin{figure*}[htbp]\n    \\centering\n    \\subfigure[fig1.]{\n        \\begin{minipage}[t]{0.58\\textwidth}\n        \\includegraphics[width=\\textwidth]{figure1.pdf}\n        \\end{minipage}\n        \\label{Fig:fig1a}\n    }\n    \\subfigure[fig2.]{\n        \\begin{minipage}[t]{0.34\\textwidth}\n        \\includegraphics[width=\\textwidth]{figure2.pdf}\n        \\end{minipage}\n        \\label{Fig:fig1b}\n    }\n    \\caption{xxxxx.}\n    \\label{Fig:fig1}\n\\end{figure*}</code></pre>\n<p>注意的是，两个图片宽度之和<code>0.58 + 0.34 = 0.92</code>要尽量小于1，不然会显示出问题。</p>\n<h1 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h1><hr>\n<pre><code class=\"latex\">\\renewcommand{\\algorithmicrequire}{ \\textbf{Input:}}\n\\renewcommand{\\algorithmicensure}{ \\textbf{Output:}}\n\n\\begin{algorithm}[t]\n    \\caption{ alg1. }\\label{Alg:Alg1}\n    \\begin{algorithmic}[1]\n        \\Require\n            % 输入\n        \\Ensure\n            % 输出\n        % 过程\n        \\Function {xxxxxx}{$i, j$}\n            % 函数体\n        \\EndFunction\n    \\end{algorithmic}\n\\end{algorithm}</code></pre>\n<h1 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h1><hr>\n<pre><code class=\"latex\">\\newcommand{\\tabincell}[2]{\\begin{tabular}{@{}#1@{}}#2\\end{tabular}}\n\n\\begin{table}[t]\n\\normalsize\n\\begin{center}\n\\begin{tabular}{l|l|ccc}\n\n\\hline\n\\multicolumn{2}{c|}{Model} &amp; LR &amp; LP &amp; F1\\\\\n\n\\hline\\hline\n\n\\end{tabular}\n\\end{center}\n\\caption{ xxxxx.}\n\\label{Tab:CompDiffConfig}\n\\end{table}</code></pre>\n<p>两个难点，一个是合并同一行的单元格，用<code>\\multicolumn{cols}{pos}{text}</code>。</p>\n<p>一个是合并同一列的单元格，用：</p>\n<pre><code class=\"latex\">\\begin{table}\n    \\centering\n    \\begin{tabular}{|c|c|c|c|}\n        \\hline\n        \\multirow{2}*{合并两行一列} &amp; 二 &amp; 三 &amp; 四 \\\\\n        ~ &amp; 2 &amp; 3 &amp; 4 \\\\\n        \\hline\n    \\end{tabular}\n\\end{table}</code></pre>\n<p>注意第二行第一列要用<code>~</code>补上空位。用<code>\\cline{start-end}</code>来代替<code>\\hline</code>划线。</p>\n<p><strong>暂时就想到这些了，等想到了再更吧，祝我paper顺利。</strong></p>\n"},{"title":"python生成词云（附带QQ聊天记录生成词云实战）","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-07-27T14:39:05.000Z","password":null,"summary":null,"_content":"\n很多同学对词云很感兴趣，就是给一段文本，然后根据它的词频，生成出好看的词云，就像下面这张图一样：\n![](1.png)\n\n生成这个其实很简单，python代码我已经放在github上面了，大家下载下来就能直接用：[地址](https://github.com/godweiyang/wordcloud)\n\n下面我讲讲怎么使用这个代码。\n\n# 环境配置\n首先需要python3环境，推荐使用Anaconda安装。\n\n然后需要`jieba`和`wordcloud`库，所以运行下面两条命令安装两个库：\n`pip3 install jieba`\n`pip3 install wordcloud`\n\n# 文件目录\n这个代码文件夹是如下结构：\n- data\n    - templates\n        这个文件夹下放所有你词云想要的样式图片，背景色最好简单一点。\n    - `stopwords.txt`\n        这是停止词文件，对于你不想在词云中出现的词，你都可以添加到这个文件中过滤掉它。\n- fonts\n    这个文件夹下放词云中显示的字体。\n- `create_word_cloud.py`\n    这是词云的主代码。\n- `preprocess.py`\n    这是用来预处理QQ聊天记录的。\n\n# 使用方法\n对于一般的文本文件，直接运行`python3 create_word_cloud.py filename.txt`就能生成词云了，效果如下：\n![](2.jpg)\n\n# 生成QQ聊天记录词云\n首先打开消息记录，点击下方的消息管理器：\n![](3.jpg)\n然后在需要导出的聊天对象上面右键点击导出消息记录：\n![](4.jpg)\n然后保存类型选择`txt`，点保存，并将文件保存在`wordcloud`根目录下：\n![](5.jpg)\n然后打开命令行运行`python3 preprocess.py filename.txt`，用来去掉聊天记录中的昵称和时间等信息：\n\n最后运行`python3 create_word_cloud.py __filename.txt`就能生成词云了。","source":"_posts/wordcloud.md","raw":"---\ntitle: python生成词云（附带QQ聊天记录生成词云实战）\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-07-27 22:39:05\npassword:\nsummary:\ntags:\n- 词云\n- 自然语言处理\ncategories:\n- 软件安装与配置\n---\n\n很多同学对词云很感兴趣，就是给一段文本，然后根据它的词频，生成出好看的词云，就像下面这张图一样：\n![](1.png)\n\n生成这个其实很简单，python代码我已经放在github上面了，大家下载下来就能直接用：[地址](https://github.com/godweiyang/wordcloud)\n\n下面我讲讲怎么使用这个代码。\n\n# 环境配置\n首先需要python3环境，推荐使用Anaconda安装。\n\n然后需要`jieba`和`wordcloud`库，所以运行下面两条命令安装两个库：\n`pip3 install jieba`\n`pip3 install wordcloud`\n\n# 文件目录\n这个代码文件夹是如下结构：\n- data\n    - templates\n        这个文件夹下放所有你词云想要的样式图片，背景色最好简单一点。\n    - `stopwords.txt`\n        这是停止词文件，对于你不想在词云中出现的词，你都可以添加到这个文件中过滤掉它。\n- fonts\n    这个文件夹下放词云中显示的字体。\n- `create_word_cloud.py`\n    这是词云的主代码。\n- `preprocess.py`\n    这是用来预处理QQ聊天记录的。\n\n# 使用方法\n对于一般的文本文件，直接运行`python3 create_word_cloud.py filename.txt`就能生成词云了，效果如下：\n![](2.jpg)\n\n# 生成QQ聊天记录词云\n首先打开消息记录，点击下方的消息管理器：\n![](3.jpg)\n然后在需要导出的聊天对象上面右键点击导出消息记录：\n![](4.jpg)\n然后保存类型选择`txt`，点保存，并将文件保存在`wordcloud`根目录下：\n![](5.jpg)\n然后打开命令行运行`python3 preprocess.py filename.txt`，用来去掉聊天记录中的昵称和时间等信息：\n\n最后运行`python3 create_word_cloud.py __filename.txt`就能生成词云了。","slug":"wordcloud","published":1,"updated":"2019-08-01T09:17:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyyqfjiz000c7cahffspcd1e","content":"<p>很多同学对词云很感兴趣，就是给一段文本，然后根据它的词频，生成出好看的词云，就像下面这张图一样：<br><img src=\"1.png\" alt></p>\n<p>生成这个其实很简单，python代码我已经放在github上面了，大家下载下来就能直接用：<a href=\"https://github.com/godweiyang/wordcloud\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<p>下面我讲讲怎么使用这个代码。</p>\n<h1 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h1><p>首先需要python3环境，推荐使用Anaconda安装。</p>\n<p>然后需要<code>jieba</code>和<code>wordcloud</code>库，所以运行下面两条命令安装两个库：<br><code>pip3 install jieba</code><br><code>pip3 install wordcloud</code></p>\n<h1 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h1><p>这个代码文件夹是如下结构：</p>\n<ul>\n<li>data<ul>\n<li>templates<br>  这个文件夹下放所有你词云想要的样式图片，背景色最好简单一点。</li>\n<li><code>stopwords.txt</code><br>  这是停止词文件，对于你不想在词云中出现的词，你都可以添加到这个文件中过滤掉它。</li>\n</ul>\n</li>\n<li>fonts<br>  这个文件夹下放词云中显示的字体。</li>\n<li><code>create_word_cloud.py</code><br>  这是词云的主代码。</li>\n<li><code>preprocess.py</code><br>  这是用来预处理QQ聊天记录的。</li>\n</ul>\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><p>对于一般的文本文件，直接运行<code>python3 create_word_cloud.py filename.txt</code>就能生成词云了，效果如下：<br><img src=\"2.jpg\" alt></p>\n<h1 id=\"生成QQ聊天记录词云\"><a href=\"#生成QQ聊天记录词云\" class=\"headerlink\" title=\"生成QQ聊天记录词云\"></a>生成QQ聊天记录词云</h1><p>首先打开消息记录，点击下方的消息管理器：<br><img src=\"3.jpg\" alt><br>然后在需要导出的聊天对象上面右键点击导出消息记录：<br><img src=\"4.jpg\" alt><br>然后保存类型选择<code>txt</code>，点保存，并将文件保存在<code>wordcloud</code>根目录下：<br><img src=\"5.jpg\" alt><br>然后打开命令行运行<code>python3 preprocess.py filename.txt</code>，用来去掉聊天记录中的昵称和时间等信息：</p>\n<p>最后运行<code>python3 create_word_cloud.py __filename.txt</code>就能生成词云了。</p>\n","site":{"data":{"friends":[{"name":"IVIPC","url":"http://ivipc.uestc.edu.cn/","title":"访问主页","introduction":"UESTC智能视觉信息处理与通信实验室(IVIPC)欢迎您的加入！","avatar":"/medias/avatars/ivipc.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://static.blinkfox.com/20190601.png","name":"码农","introduction":"这里不隐含扭曲的价值观，而是整合并充盈正能量","url":"https://www.90c.vip/","title":"前去学习"},{"avatar":"https://jiangliuhong.gitee.io/images/avatar.jpg","name":"编程常青树","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://jiangliuhong.gitee.io/","title":"前去学习"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"}],"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}]}},"excerpt":"","more":"<p>很多同学对词云很感兴趣，就是给一段文本，然后根据它的词频，生成出好看的词云，就像下面这张图一样：<br><img src=\"1.png\" alt></p>\n<p>生成这个其实很简单，python代码我已经放在github上面了，大家下载下来就能直接用：<a href=\"https://github.com/godweiyang/wordcloud\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<p>下面我讲讲怎么使用这个代码。</p>\n<h1 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h1><p>首先需要python3环境，推荐使用Anaconda安装。</p>\n<p>然后需要<code>jieba</code>和<code>wordcloud</code>库，所以运行下面两条命令安装两个库：<br><code>pip3 install jieba</code><br><code>pip3 install wordcloud</code></p>\n<h1 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h1><p>这个代码文件夹是如下结构：</p>\n<ul>\n<li>data<ul>\n<li>templates<br>  这个文件夹下放所有你词云想要的样式图片，背景色最好简单一点。</li>\n<li><code>stopwords.txt</code><br>  这是停止词文件，对于你不想在词云中出现的词，你都可以添加到这个文件中过滤掉它。</li>\n</ul>\n</li>\n<li>fonts<br>  这个文件夹下放词云中显示的字体。</li>\n<li><code>create_word_cloud.py</code><br>  这是词云的主代码。</li>\n<li><code>preprocess.py</code><br>  这是用来预处理QQ聊天记录的。</li>\n</ul>\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><p>对于一般的文本文件，直接运行<code>python3 create_word_cloud.py filename.txt</code>就能生成词云了，效果如下：<br><img src=\"2.jpg\" alt></p>\n<h1 id=\"生成QQ聊天记录词云\"><a href=\"#生成QQ聊天记录词云\" class=\"headerlink\" title=\"生成QQ聊天记录词云\"></a>生成QQ聊天记录词云</h1><p>首先打开消息记录，点击下方的消息管理器：<br><img src=\"3.jpg\" alt><br>然后在需要导出的聊天对象上面右键点击导出消息记录：<br><img src=\"4.jpg\" alt><br>然后保存类型选择<code>txt</code>，点保存，并将文件保存在<code>wordcloud</code>根目录下：<br><img src=\"5.jpg\" alt><br>然后打开命令行运行<code>python3 preprocess.py filename.txt</code>，用来去掉聊天记录中的昵称和时间等信息：</p>\n<p>最后运行<code>python3 create_word_cloud.py __filename.txt</code>就能生成词云了。</p>\n"},{"title":"超详细Hexo+Github博客搭建小白教程","date":"2018-04-12T16:20:08.000Z","top":true,"cover":true,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n# 更新：备份博客源文件（2019.07.26）\n---\n有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。\n\n首先在github博客仓库下新建一个分支`hexo`，然后`git clone`到本地，把`.git`文件夹拿出来，放在博客根目录下。\n\n然后`git branch -b hexo`切换到`hexo`分支，然后`git add .`，然后`git commit -m \"xxx\"`，最后`git push origin hexo`提交就行了。\n\n具体效果可以看我的博客源文件仓库：[传送门](https://github.com/godweiyang/godweiyang.github.io/tree/hexo)。\n\n大家也可以先用下文hexo安装方法安装完hexo，然后直接`git clone -b hexo git@github.com:godweiyang/godweiyang.github.io.git`克隆我的所有源文件，然后这是我修改完的基本没bug的定制化的博客，就可以直接拿来用啦。\n\n\n# 更新：更换新主题（2019.07.20）\n---\n这两天花时间将我的博客换了一个主题，现在这个主题看着更加的炫（zhuang）酷（bi），并且响应式更友好，点起来就很舒服，功能也多很多。\n\n主题的原地址在这里：[hexo-theme-matery](https://github.com/blinkfox/hexo-theme-matery)，它的文档写得也非常的详细，还有中英文两个版本，作者回复也很及时。效果图如下，可以看出非常合我的口味：\n![](21.jpg)\n\n但是我自己使用起来还是遇到了好几个问题，经过两天的不懈摸鱼，终于基本解决了，这里分享一下。\n\n首先先按照文档教程安装一遍主题，然后是可以正常打开的，如果你是一般使用的话，基本没啥问题了。但是我是重度强迫症，一点小毛病就看着难受，下面列举一下我遇到的问题以及解决方法。\n\n## 新建文章\n首先为了新建文章方便，建议将`/scaffolds/post.md`修改为如下代码：\n```json\n---\ntitle: {{ title }}\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\ncategories:\n---\n```\n这样新建文章后不用你自己补充了，修改信息就行。\n\n## 添加404页面\n原来的主题没有404页面，加一个也不是什么难事。首先在`/source/`目录下新建一个`404.md`，内容如下：\n```json\n---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n```\n然后在`/themes/matery/layout/`目录下新建一个`404.ejs`文件，内容如下：\n```html\n<style type=\"text/css\">\n    /* don't remove. */\n    .about-cover {\n        height: 75vh;\n    }\n</style>\n\n<div class=\"bg-cover pd-header about-cover\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col s10 offset-s1 m8 offset-m2 l8 offset-l2\">\n                <div class=\"brand\">\n                    <div class=\"title center-align\">\n                        404\n                    </div>\n                    <div class=\"description center-align\">\n                        <%= page.description %>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<script>\n    // 每天切换 banner 图.  Switch banner image every day.\n    $('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');\n</script>\n```\n## “关于”页面增加简历（可选）\n修改`/themes/matery/layout/about.ejs`，找到`<div class=\"card\">`标签，然后找到它对应的`</div>`标签，接在后面新增一个card，语句如下：\n```html\n<div class=\"card\">\n    <div class=\"card-content\">\n        <div class=\"card-content article-card-content\">\n                <div class=\"title center-align\" data-aos=\"zoom-in-up\">\n                    <i class=\"fa fa-address-book\"></i>&nbsp;&nbsp;<%- __('myCV') %>\n                </div>\n                <div id=\"articleContent\" data-aos=\"fade-up\">\n                    <%- page.content %>\n                </div>\n        </div>\n    </div>\n</div>\n```\n这样就会多出一张card，然后可以在`/source/about/index.md`下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个card。\n\n## 解决mathjax与代码高亮的冲突\n如果你按照教程安装了代码高亮插件`hexo-prism-plugin`，单独使用是没有问题的，但如果你又使用了mathjax，并且按照网上教程，安装`kramed`插件并修改了js文件里的正则表达式（为了解决markdown和mathjax的语法冲突），好了，那你的代码就无法高亮了。解决方法很简单，别用`kramed`插件了，还用原来自带的`marked`插件，直接改它的正则表达式就行了，改法还和网上一样。\n\n## 增加建站时间\n修改`/themes/matery/layout/_partial/footer.ejs`文件，在最后加上\n```js\n<script language=javascript>\n    function siteTime() {\n        window.setTimeout(\"siteTime()\", 1000);\n        var seconds = 1000;\n        var minutes = seconds * 60;\n        var hours = minutes * 60;\n        var days = hours * 24;\n        var years = days * 365;\n        var today = new Date();\n        var todayYear = today.getFullYear();\n        var todayMonth = today.getMonth() + 1;\n        var todayDate = today.getDate();\n        var todayHour = today.getHours();\n        var todayMinute = today.getMinutes();\n        var todaySecond = today.getSeconds();\n        /* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)\n        year - 作为date对象的年份，为4位年份值\n        month - 0-11之间的整数，做为date对象的月份\n        day - 1-31之间的整数，做为date对象的天数\n        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数\n        minutes - 0-59之间的整数，做为date对象的分钟数\n        seconds - 0-59之间的整数，做为date对象的秒数\n        microseconds - 0-999之间的整数，做为date对象的毫秒数 */\n        var t1 = Date.UTC(2017, 09, 11, 00, 00, 00); //北京时间2018-2-13 00:00:00\n        var t2 = Date.UTC(todayYear, todayMonth, todayDate, todayHour, todayMinute, todaySecond);\n        var diff = t2 - t1;\n        var diffYears = Math.floor(diff / years);\n        var diffDays = Math.floor((diff / days) - diffYears * 365);\n        var diffHours = Math.floor((diff - (diffYears * 365 + diffDays) * days) / hours);\n        var diffMinutes = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours) / minutes);\n        var diffSeconds = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours - diffMinutes * minutes) / seconds);\n        document.getElementById(\"sitetime\").innerHTML = \"本站已运行 \" +diffYears+\" 年 \"+diffDays + \" 天 \" + diffHours + \" 小时 \" + diffMinutes + \" 分钟 \" + diffSeconds + \" 秒\";\n    }/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/\n    siteTime();\n</script>\n```\n然后在合适的地方（比如copyright声明后面）加上下面的代码就行了：\n```html\n<span id=\"sitetime\"></span>\n```\n\n## 修改不蒜子初始化计数\n因为不蒜子至今未开放注册，所以没办法在官网修改初始化，只能自己动手了。和上一条一样，在`/themes/matery/layout/_partial/footer.ejs`文件最后加上：\n```js\n<script>\n    $(document).ready(function () {\n\n        var int = setInterval(fixCount, 50);  // 50ms周期检测函数\n        var pvcountOffset = 80000;  // 初始化首次数据\n        var uvcountOffset = 20000;\n\n        function fixCount() {\n            if (document.getElementById(\"busuanzi_container_site_pv\").style.display != \"none\") {\n                $(\"#busuanzi_value_site_pv\").html(parseInt($(\"#busuanzi_value_site_pv\").html()) + pvcountOffset);\n                clearInterval(int);\n            }\n            if ($(\"#busuanzi_container_site_pv\").css(\"display\") != \"none\") {\n                $(\"#busuanzi_value_site_uv\").html(parseInt($(\"#busuanzi_value_site_uv\").html()) + uvcountOffset); // 加上初始数据 \n                clearInterval(int); // 停止检测\n            }\n        }\n    });\n</script>\n```\n\n然后把上面几行有段代码：\n```html\n<% if (theme.busuanziStatistics && theme.busuanziStatistics.totalTraffic) { %>\n    <span id=\"busuanzi_container_site_pv\">\n        <i class=\"fa fa-heart-o\"></i>\n        本站总访问量 <span id=\"busuanzi_value_site_pv\" class=\"white-color\"></span>\n    </span>\n<% } %>\n<% if (theme.busuanziStatistics && theme.busuanziStatistics.totalNumberOfvisitors) { %>\n    <span id=\"busuanzi_container_site_uv\">\n        人次,&nbsp;访客数 <span id=\"busuanzi_value_site_uv\" class=\"white-color\"></span> 人.\n    </span>\n<% } %>\n```\n修改为：\n```html\n<% if (theme.busuanziStatistics && theme.busuanziStatistics.totalTraffic) { %>\n    <span id=\"busuanzi_container_site_pv\" style='display:none'>\n        <i class=\"fa fa-heart-o\"></i>\n        本站总访问量 <span id=\"busuanzi_value_site_pv\" class=\"white-color\"></span>\n    </span>\n<% } %>\n<% if (theme.busuanziStatistics && theme.busuanziStatistics.totalNumberOfvisitors) { %>\n    <span id=\"busuanzi_container_site_uv\" style='display:none'>\n        人次,&nbsp;访客数 <span id=\"busuanzi_value_site_uv\" class=\"white-color\"></span> 人.\n    </span>\n<% } %>\n```\n其实就是增加了两个`style='display:none'`而已。\n\n## 添加动漫人物\n其实三步就行了，不用像网上有些教程那么复杂。\n\n**第一步：**\n```\nnpm install --save hexo-helper-live2d\n```\n\n**第二步：**\n```\nnpm install live2d-widget-model-shizuku\n```\n\n**第三步：**\n在根目录配置文件中添加如下代码：\n```\nlive2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  log: false\n  model:\n    use: live2d-widget-model-shizuku\n  display:\n    position: right\n    width: 150\n    height: 300\n  mobile:\n    show: true\n  react:\n    opacity: 0.7\n```\n\n然后`hexo g`再`hexo s`就能预览出效果了，但是有个注意的地方，我发现**这个动漫人物最好不要和不蒜子同时使用**，不然不蒜子会显示不出来。\n\n# 前言\n---\n去年9月的时候开始搭建了第一个自己的独立博客，到现在也稍微像模像样了。很多小伙伴应该也想过搭建一个自己的博客，网上也有一堆详细教程。我在此稍稍总结一下具体的搭建步骤，另外网上很少有修改博客源码的个性化教程，我就稍稍分享一下我的一些修改经验，更多的个性化操作需要你自己以后去摸索。\n\n具体效果可以参观我的博客：[godweiyang.com](http://godweiyang.com)，欢迎大家支持。\n\n我不是一个前端程序员，有些东西不是很了解，说的不好大家见谅。\n\n首先要了解一下我们搭建博客要用到的框架。Hexo是高效的静态站点生成框架，它基于Node.js。通过Hexo，你可以直接使用Markdown语法来撰写博客。相信很多小伙伴写工程都写过README.md文件吧，对，就是这个格式的！写完后只需两三条命令即可将生成的网页上传到你的github上，然后别人就可以看到你的网页啦。是不是很简单？你无需关心网页源代码的具体细节，你只需要用心写好你的博客内容就行。\n\n# 安装Node.js\n---\n首先下载稳定版[Node.js](https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi)，我这里给的是64位的。\n\n安装选项全部默认，一路点击`Next`。\n\n最后安装好之后，按`Win+R`打开命令提示符，输入`node -v`和`npm -v`，如果出现版本号，那么就安装成功了。\n\n## 添加国内镜像源\n\n如果没有梯子的话，可以使用阿里的国内镜像进行加速。\n\n```bash\nnpm config set registry https://registry.npm.taobao.org\n```\n\n# 安装Git\n---\n为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————Git[[下载地址]](https://git-scm.com/download/win)。\n\n安装选项还是全部默认，只不过最后一步添加路径时选择`Use Git from the Windows Command Prompt`，这样我们就可以直接在命令提示符里打开git了。\n\n安装完成后在命令提示符中输入`git --version`验证是否安装成功。\n\n# 注册Github账号\n---\n接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。\n\n打开[https://github.com/](https://github.com/)，新建一个项目，如下所示：\n![](1.jpg)\n然后如下图所示，输入自己的项目名字，后面一定要加`.github.io`后缀，README初始化也要勾上。\n![](2.jpg)\n然后项目就建成了，点击`Settings`，向下拉到最后有个`GitHub Pages`，点击`Choose a theme`选择一个主题。然后等一会儿，再回到`GitHub Pages`，会变成下面这样：\n![](3.jpg)\n点击那个链接，就会出现自己的网页啦，效果如下：\n![](4.jpg)\n\n# 安装Hexo\n---\n在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在`D:\\study\\program\\blog`目录下。\n\n在该目录下右键点击`Git Bash Here`，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。\n\n定位到该目录下，输入`npm i hexo-cli -g`安装Hexo。会有几个报错，无视它就行。\n\n\n安装完后输入`hexo -v`验证是否安装成功。\n\n然后就要初始化我们的网站，输入`hexo init`初始化文件夹，接着输入`npm install`安装必备的组件。\n\n这样本地的网站配置也弄好啦，输入`hexo g`生成静态网页，然后输入`hexo s`打开本地服务器，然后浏览器打开[http://localhost:4000/](http://localhost:4000/)，就可以看到我们的博客啦，效果如下：\n![](5.jpg)\n\n按`ctrl+c`关闭本地服务器。\n\n# 连接Github与本地\n---\n首先右键打开git bash，然后输入下面命令：\n```\ngit config --global user.name \"godweiyang\"\ngit config --global user.email \"792321264@qq.com\"\n```\n用户名和邮箱根据你注册github的信息自行修改。\n\n然后生成密钥SSH key：\n```\nssh-keygen -t rsa -C \"792321264@qq.com\"\n```\n\n打开[github](http://github.com)，在头像下面点击`settings`，再点击`SSH and GPG keys`，新建一个SSH，名字随便。\n\ngit bash中输入\n```bash\ncat ~/.ssh/id_rsa.pub\n```\n将输出的内容复制到框中，点击确定保存。\n\n输入`ssh -T git@github.com`，如果如下图所示，出现你的用户名，那就成功了。\n![](6.jpg)\n\n打开博客根目录下的`_config.yml`文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。\n\n修改最后一行的配置：\n```\ndeploy:\n  type: git\n  repository: https://github.com/godweiyang/godweiyang.github.io\n  branch: master\n```\nrepository修改为你自己的github项目地址。**不过你这里看到的可能与我有点不一样，因为我已经修改过主题了，所以这一步先不用管，换完主题之后记得回来修改！**\n\n# 写文章、发布文章\n---\n首先在博客根目录下右键打开git bash，安装一个扩展`npm i hexo-deployer-git`。\n\n然后输入`hexo new post \"article title\"`，新建一篇文章。\n\n然后打开`D:\\study\\program\\blog\\source\\_posts`的目录，可以发现下面多了一个文件夹和一个`.md`文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。\n\n编写完markdown文件后，根目录下输入`hexo g`生成静态网页，然后输入`hexo s`可以本地预览效果，最后输入`hexo d`上传到github上。这时打开你的github.io主页就能看到发布的文章啦。\n\n# 绑定域名\n---\n现在默认的域名还是`xxx.github.io`，是不是很没有牌面？想不想也像我一样弄一个专属域名呢，首先你得购买一个域名，xx云都能买，看你个人喜好了。\n\n以我的百度云为例，如下图所示，添加两条解析记录：\n![](7.jpg)\n\n然后打开你的github博客项目，点击`settings`，拉到下面`Custom domain`处，填上你自己的域名，保存：\n![](8.jpg)\n\n这时候你的项目根目录应该会出现一个名为`CNAME`的文件了。如果没有的话，打开你本地博客`/source`目录，我的是`D:\\study\\program\\blog\\source`，新建`CNAME`文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行`hexo g`、`hexo d`上传到github。\n\n# 更换主题\n---\n网上大多数主题都是github排名第一的`Next`主题，但是我个人不是很喜欢，我更喜欢`beantech`主题，地址在[传送门](https://github.com/YenYuHsuan/hexo-theme-beantech)。\n\n首先要注意的是，**这个github项目不仅包含了主题文件，还包含了hexo的各种文件**。\n\n所以首先下载下来这个项目，然后推荐将下图所有文件全部替换你原本博客根目录下的文件：\n![](9.jpg)\n\n当然一般的主题和这个主题有点不一样，只含有主题文件夹，所以把整个文件夹丢到`theme`下就行了。\n\n然后运行`hexo clean`清空所有生成的网页缓存，`hexo g`、`hexo d`。这时候新的主题网页就生成好了，博客根目录的情况应该大致如下：\n![](10.jpg)\n\n# 博客目录构成介绍\n---\n从上图可以看出，博客的目录结构如下：\n```\n- node_modules\n- public\n- scaffolds\n- source\n\t- _posts\n\t- about\n\t- archive\n\t- img\n\t- tags\n- themes\n```\n`node_modules`是node.js各种库的目录，`public`是生成的网页文件目录，`scaffolds`里面就三个文件，存储着新文章和新页面的初始设置，`source`是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，`themes`存放着主题文件，一般也用不到。\n\n我们平时写文章只需要关注`source/_posts`这个文件夹就行了。\n\n# 个性化设置及bug处理\n---\n**首先打开`_config.yml`，根据自己需求配置，具体不说了，有注释。**\n\n## 修复文档分类bug\n这个主题文档分类功能有个bug，一直没有得到解决，直到最近，我才发现是源文件的单词拼错了。。。\n\n打开`D:\\study\\program\\blog\\scaffolds\\post.md`，单词`catagories`改为`categories`。\n\n## 添加畅言评论插件\n主题自带了多说评论插件，但是多说已经关闭了，所以我换成了畅言评论插件。\n\n首先你得注册一个畅言账号，[地址](http://changyan.kuaizhan.com/)。\n然后打开如下页面，复制该段代码：\n![](11.jpg)\n打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs`，将代码粘贴到如下位置：\n![](12.jpg)\n然后重新生成一下网页，可以看到效果图如下：\n![](13.jpg)\n更多插件例如热评话题之类的，可以自行在畅言后台找到代码添加。\n\n## 添加图片放大功能\n首先下载`zooming.js`文件[地址](https://github.com/godweiyang/godweiyang.github.io/blob/master/js/zooming.js)，保存在`D:\\study\\program\\blog\\themes\\beantech\\source\\js`目录下。\n\n打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs`，在最下方粘贴如下代码：\n```\n<script type=\"text/javascript\" src=\"/js/zooming.js\"></script>\n```\n然后文章里的图片就可以单击全屏啦。\n\n## 添加数学公式显示\n打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs`，在最下方粘贴如下代码：\n```\n<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default\"></script>\n```\n由于markdown语法与mathjax语法存在冲突，所以还需要修改源文件。\n\n打开`D:\\study\\program\\blog\\node_modules\\marked\\lib\\marked.js`\n`escape: `处替换成：\n```\nescape: /^$[`*\\[\\]()#$+\\-.!_>])/\n```\n`em: `处替换成：\n```\nem: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/\n```\n\n这时在文章里写数学公式基本没有问题了，但是要注意：\n**数学公式中如果出现了连续两个{，中间一定要加空格！**\n\n举个例子:\n行内公式：$y = f(x)$\n代码：\n```\n$y = f(x)$\n```\n行间公式：\n\\\\[y = {f_{ {g_1}}}(x)\\\\]\n代码：\n```\n\\\\[y = {f_{ {g_1}}}(x)\\\\]\n```\n**注意上面花括号之间有空格！**\n\n## 添加留言板\n在`D:\\study\\program\\blog\\themes\\beantech\\layout`中新建`bbs.ejs`，文件内容如下：\n```\n---\nlayout: page\n---\n<style type=\"text/css\">\n    header.intro-header{\n        background-position: right; \n    }\n</style>\n<!-- Chinese Version -->\n<div class=\"zh post-container\">\n    <%- page.content %>\n</div>\n```\n然后在`D:\\study\\program\\blog\\source`中新建`\\bbs`文件夹，里面在新建`index.md`文件，内容如下：\n```\n---\nlayout: \"bbs\"\ntitle: \"BBS\"\ndate: 2017-09-19 12:48:33\ndescription: \"欢迎交换友链，一起交流学习！\"\nheader-img: \"img/header_img/home-bg-2-dark.png\"\ncomments: true\n---\n此处替换为你的畅言评论代码~~~\n```\n\n## 添加置顶功能\n运行如下两条命令安装置顶插件：\n```\nnpm uninstall hexo-generator-index --save\nnpm install hexo-generator-index-pin-top --save\n```\n然后打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\index.ejs`，在如下位置添加代码：\n![](14.jpg)\n```\n<% if (post.top) {%>\n    <i class=\"fa fa-thumb-tack\"></i>\n    <font color=7D26CD>置顶</font>\n    <span class=\"post-meta-divider\">|</span>\n<%}%>\n```\n然后在你想置顶的文章md文件里，添加如下配置选项：\n```\ntop: true\n```\n## 添加网易云音乐BGM\n写文章的时候，想插入一段BGM怎么办？\n\n首先打开网易云网页版，找到想听的歌曲，然后点击生成外链：\n![](15.jpg)\n复制如下代码：\n![](16.jpg)\n\n粘贴到文章里就行了，为了美观，设置一下居中，具体代码如下：\n```\n<div align=\"middle\">这里粘贴刚刚复制的代码</div>\n```\n\n## 添加访客人数统计和字数统计\n我们使用一个国外的流量统计网站：[gostats.com](gostats.com)，首先注册一下。\n\n然后自己添加网站地址，过程就不详细说了，然后点击`Get counter code`，选择一个自己喜欢的风格。\n如下图所示，选择一个样式，选择`HTML`，生成代码：\n![](17.jpg)\n\n复制这段代码到`D:\\study\\program\\blog\\themes\\beantech\\layout\\_partial\\footer.ejs`，具体位置如下：\n![](18.jpg)\n默认的代码和我图中不一样，因为我不想点击图片跳转到它统计网站的链接，可以模仿我的自行修改。\n\n字数统计首先安装插件\n```\nnpm i --save hexo-wordcount\n```\n然后打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\_partial\\footer.ejs`，添加如下代码：\n```\n<span class=\"post-count\"><%= totalcount(site) %> words altogether</span>\n```\n具体位置见上图。\n# 一些注意事项\n---\n首先解释一下文章开头的配置，如下图所示：\n![](19.jpg)\n```\ntitle: 文章标题\ncatalog: 是否显示段落目录\ndate: 文章日期\nsubtitle: 子标题\nheader-img: 顶部背景图片\ntop: 是否置顶\ntags: 标签\ncategories: 分类\n```\n\n网站图片都保存在`D:\\study\\program\\blog\\source\\img`目录下，可以修改成自己的图片。\n\n如果换一台电脑想迁移博客的话，最简单的方法就是把博客整个目录拷贝过去，就是这么暴力。\n\n\n**其他还有什么问题的话等我想起来了再继续添加，如果遇到问题欢迎联系我。**","source":"_posts/hexo-blog.md","raw":"---\ntitle: 超详细Hexo+Github博客搭建小白教程\ndate: 2018-04-13 00:20:08\ntop: true\ncover: true\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\n- Hexo\n- Github\n- 博客\ncategories:\n- 软件安装与配置\n---\n\n# 更新：备份博客源文件（2019.07.26）\n---\n有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。\n\n首先在github博客仓库下新建一个分支`hexo`，然后`git clone`到本地，把`.git`文件夹拿出来，放在博客根目录下。\n\n然后`git branch -b hexo`切换到`hexo`分支，然后`git add .`，然后`git commit -m \"xxx\"`，最后`git push origin hexo`提交就行了。\n\n具体效果可以看我的博客源文件仓库：[传送门](https://github.com/godweiyang/godweiyang.github.io/tree/hexo)。\n\n大家也可以先用下文hexo安装方法安装完hexo，然后直接`git clone -b hexo git@github.com:godweiyang/godweiyang.github.io.git`克隆我的所有源文件，然后这是我修改完的基本没bug的定制化的博客，就可以直接拿来用啦。\n\n\n# 更新：更换新主题（2019.07.20）\n---\n这两天花时间将我的博客换了一个主题，现在这个主题看着更加的炫（zhuang）酷（bi），并且响应式更友好，点起来就很舒服，功能也多很多。\n\n主题的原地址在这里：[hexo-theme-matery](https://github.com/blinkfox/hexo-theme-matery)，它的文档写得也非常的详细，还有中英文两个版本，作者回复也很及时。效果图如下，可以看出非常合我的口味：\n![](21.jpg)\n\n但是我自己使用起来还是遇到了好几个问题，经过两天的不懈摸鱼，终于基本解决了，这里分享一下。\n\n首先先按照文档教程安装一遍主题，然后是可以正常打开的，如果你是一般使用的话，基本没啥问题了。但是我是重度强迫症，一点小毛病就看着难受，下面列举一下我遇到的问题以及解决方法。\n\n## 新建文章\n首先为了新建文章方便，建议将`/scaffolds/post.md`修改为如下代码：\n```json\n---\ntitle: {{ title }}\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\ncategories:\n---\n```\n这样新建文章后不用你自己补充了，修改信息就行。\n\n## 添加404页面\n原来的主题没有404页面，加一个也不是什么难事。首先在`/source/`目录下新建一个`404.md`，内容如下：\n```json\n---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n```\n然后在`/themes/matery/layout/`目录下新建一个`404.ejs`文件，内容如下：\n```html\n<style type=\"text/css\">\n    /* don't remove. */\n    .about-cover {\n        height: 75vh;\n    }\n</style>\n\n<div class=\"bg-cover pd-header about-cover\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col s10 offset-s1 m8 offset-m2 l8 offset-l2\">\n                <div class=\"brand\">\n                    <div class=\"title center-align\">\n                        404\n                    </div>\n                    <div class=\"description center-align\">\n                        <%= page.description %>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<script>\n    // 每天切换 banner 图.  Switch banner image every day.\n    $('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');\n</script>\n```\n## “关于”页面增加简历（可选）\n修改`/themes/matery/layout/about.ejs`，找到`<div class=\"card\">`标签，然后找到它对应的`</div>`标签，接在后面新增一个card，语句如下：\n```html\n<div class=\"card\">\n    <div class=\"card-content\">\n        <div class=\"card-content article-card-content\">\n                <div class=\"title center-align\" data-aos=\"zoom-in-up\">\n                    <i class=\"fa fa-address-book\"></i>&nbsp;&nbsp;<%- __('myCV') %>\n                </div>\n                <div id=\"articleContent\" data-aos=\"fade-up\">\n                    <%- page.content %>\n                </div>\n        </div>\n    </div>\n</div>\n```\n这样就会多出一张card，然后可以在`/source/about/index.md`下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个card。\n\n## 解决mathjax与代码高亮的冲突\n如果你按照教程安装了代码高亮插件`hexo-prism-plugin`，单独使用是没有问题的，但如果你又使用了mathjax，并且按照网上教程，安装`kramed`插件并修改了js文件里的正则表达式（为了解决markdown和mathjax的语法冲突），好了，那你的代码就无法高亮了。解决方法很简单，别用`kramed`插件了，还用原来自带的`marked`插件，直接改它的正则表达式就行了，改法还和网上一样。\n\n## 增加建站时间\n修改`/themes/matery/layout/_partial/footer.ejs`文件，在最后加上\n```js\n<script language=javascript>\n    function siteTime() {\n        window.setTimeout(\"siteTime()\", 1000);\n        var seconds = 1000;\n        var minutes = seconds * 60;\n        var hours = minutes * 60;\n        var days = hours * 24;\n        var years = days * 365;\n        var today = new Date();\n        var todayYear = today.getFullYear();\n        var todayMonth = today.getMonth() + 1;\n        var todayDate = today.getDate();\n        var todayHour = today.getHours();\n        var todayMinute = today.getMinutes();\n        var todaySecond = today.getSeconds();\n        /* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)\n        year - 作为date对象的年份，为4位年份值\n        month - 0-11之间的整数，做为date对象的月份\n        day - 1-31之间的整数，做为date对象的天数\n        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数\n        minutes - 0-59之间的整数，做为date对象的分钟数\n        seconds - 0-59之间的整数，做为date对象的秒数\n        microseconds - 0-999之间的整数，做为date对象的毫秒数 */\n        var t1 = Date.UTC(2017, 09, 11, 00, 00, 00); //北京时间2018-2-13 00:00:00\n        var t2 = Date.UTC(todayYear, todayMonth, todayDate, todayHour, todayMinute, todaySecond);\n        var diff = t2 - t1;\n        var diffYears = Math.floor(diff / years);\n        var diffDays = Math.floor((diff / days) - diffYears * 365);\n        var diffHours = Math.floor((diff - (diffYears * 365 + diffDays) * days) / hours);\n        var diffMinutes = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours) / minutes);\n        var diffSeconds = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours - diffMinutes * minutes) / seconds);\n        document.getElementById(\"sitetime\").innerHTML = \"本站已运行 \" +diffYears+\" 年 \"+diffDays + \" 天 \" + diffHours + \" 小时 \" + diffMinutes + \" 分钟 \" + diffSeconds + \" 秒\";\n    }/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/\n    siteTime();\n</script>\n```\n然后在合适的地方（比如copyright声明后面）加上下面的代码就行了：\n```html\n<span id=\"sitetime\"></span>\n```\n\n## 修改不蒜子初始化计数\n因为不蒜子至今未开放注册，所以没办法在官网修改初始化，只能自己动手了。和上一条一样，在`/themes/matery/layout/_partial/footer.ejs`文件最后加上：\n```js\n<script>\n    $(document).ready(function () {\n\n        var int = setInterval(fixCount, 50);  // 50ms周期检测函数\n        var pvcountOffset = 80000;  // 初始化首次数据\n        var uvcountOffset = 20000;\n\n        function fixCount() {\n            if (document.getElementById(\"busuanzi_container_site_pv\").style.display != \"none\") {\n                $(\"#busuanzi_value_site_pv\").html(parseInt($(\"#busuanzi_value_site_pv\").html()) + pvcountOffset);\n                clearInterval(int);\n            }\n            if ($(\"#busuanzi_container_site_pv\").css(\"display\") != \"none\") {\n                $(\"#busuanzi_value_site_uv\").html(parseInt($(\"#busuanzi_value_site_uv\").html()) + uvcountOffset); // 加上初始数据 \n                clearInterval(int); // 停止检测\n            }\n        }\n    });\n</script>\n```\n\n然后把上面几行有段代码：\n```html\n<% if (theme.busuanziStatistics && theme.busuanziStatistics.totalTraffic) { %>\n    <span id=\"busuanzi_container_site_pv\">\n        <i class=\"fa fa-heart-o\"></i>\n        本站总访问量 <span id=\"busuanzi_value_site_pv\" class=\"white-color\"></span>\n    </span>\n<% } %>\n<% if (theme.busuanziStatistics && theme.busuanziStatistics.totalNumberOfvisitors) { %>\n    <span id=\"busuanzi_container_site_uv\">\n        人次,&nbsp;访客数 <span id=\"busuanzi_value_site_uv\" class=\"white-color\"></span> 人.\n    </span>\n<% } %>\n```\n修改为：\n```html\n<% if (theme.busuanziStatistics && theme.busuanziStatistics.totalTraffic) { %>\n    <span id=\"busuanzi_container_site_pv\" style='display:none'>\n        <i class=\"fa fa-heart-o\"></i>\n        本站总访问量 <span id=\"busuanzi_value_site_pv\" class=\"white-color\"></span>\n    </span>\n<% } %>\n<% if (theme.busuanziStatistics && theme.busuanziStatistics.totalNumberOfvisitors) { %>\n    <span id=\"busuanzi_container_site_uv\" style='display:none'>\n        人次,&nbsp;访客数 <span id=\"busuanzi_value_site_uv\" class=\"white-color\"></span> 人.\n    </span>\n<% } %>\n```\n其实就是增加了两个`style='display:none'`而已。\n\n## 添加动漫人物\n其实三步就行了，不用像网上有些教程那么复杂。\n\n**第一步：**\n```\nnpm install --save hexo-helper-live2d\n```\n\n**第二步：**\n```\nnpm install live2d-widget-model-shizuku\n```\n\n**第三步：**\n在根目录配置文件中添加如下代码：\n```\nlive2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  log: false\n  model:\n    use: live2d-widget-model-shizuku\n  display:\n    position: right\n    width: 150\n    height: 300\n  mobile:\n    show: true\n  react:\n    opacity: 0.7\n```\n\n然后`hexo g`再`hexo s`就能预览出效果了，但是有个注意的地方，我发现**这个动漫人物最好不要和不蒜子同时使用**，不然不蒜子会显示不出来。\n\n# 前言\n---\n去年9月的时候开始搭建了第一个自己的独立博客，到现在也稍微像模像样了。很多小伙伴应该也想过搭建一个自己的博客，网上也有一堆详细教程。我在此稍稍总结一下具体的搭建步骤，另外网上很少有修改博客源码的个性化教程，我就稍稍分享一下我的一些修改经验，更多的个性化操作需要你自己以后去摸索。\n\n具体效果可以参观我的博客：[godweiyang.com](http://godweiyang.com)，欢迎大家支持。\n\n我不是一个前端程序员，有些东西不是很了解，说的不好大家见谅。\n\n首先要了解一下我们搭建博客要用到的框架。Hexo是高效的静态站点生成框架，它基于Node.js。通过Hexo，你可以直接使用Markdown语法来撰写博客。相信很多小伙伴写工程都写过README.md文件吧，对，就是这个格式的！写完后只需两三条命令即可将生成的网页上传到你的github上，然后别人就可以看到你的网页啦。是不是很简单？你无需关心网页源代码的具体细节，你只需要用心写好你的博客内容就行。\n\n# 安装Node.js\n---\n首先下载稳定版[Node.js](https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi)，我这里给的是64位的。\n\n安装选项全部默认，一路点击`Next`。\n\n最后安装好之后，按`Win+R`打开命令提示符，输入`node -v`和`npm -v`，如果出现版本号，那么就安装成功了。\n\n## 添加国内镜像源\n\n如果没有梯子的话，可以使用阿里的国内镜像进行加速。\n\n```bash\nnpm config set registry https://registry.npm.taobao.org\n```\n\n# 安装Git\n---\n为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————Git[[下载地址]](https://git-scm.com/download/win)。\n\n安装选项还是全部默认，只不过最后一步添加路径时选择`Use Git from the Windows Command Prompt`，这样我们就可以直接在命令提示符里打开git了。\n\n安装完成后在命令提示符中输入`git --version`验证是否安装成功。\n\n# 注册Github账号\n---\n接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。\n\n打开[https://github.com/](https://github.com/)，新建一个项目，如下所示：\n![](1.jpg)\n然后如下图所示，输入自己的项目名字，后面一定要加`.github.io`后缀，README初始化也要勾上。\n![](2.jpg)\n然后项目就建成了，点击`Settings`，向下拉到最后有个`GitHub Pages`，点击`Choose a theme`选择一个主题。然后等一会儿，再回到`GitHub Pages`，会变成下面这样：\n![](3.jpg)\n点击那个链接，就会出现自己的网页啦，效果如下：\n![](4.jpg)\n\n# 安装Hexo\n---\n在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在`D:\\study\\program\\blog`目录下。\n\n在该目录下右键点击`Git Bash Here`，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。\n\n定位到该目录下，输入`npm i hexo-cli -g`安装Hexo。会有几个报错，无视它就行。\n\n\n安装完后输入`hexo -v`验证是否安装成功。\n\n然后就要初始化我们的网站，输入`hexo init`初始化文件夹，接着输入`npm install`安装必备的组件。\n\n这样本地的网站配置也弄好啦，输入`hexo g`生成静态网页，然后输入`hexo s`打开本地服务器，然后浏览器打开[http://localhost:4000/](http://localhost:4000/)，就可以看到我们的博客啦，效果如下：\n![](5.jpg)\n\n按`ctrl+c`关闭本地服务器。\n\n# 连接Github与本地\n---\n首先右键打开git bash，然后输入下面命令：\n```\ngit config --global user.name \"godweiyang\"\ngit config --global user.email \"792321264@qq.com\"\n```\n用户名和邮箱根据你注册github的信息自行修改。\n\n然后生成密钥SSH key：\n```\nssh-keygen -t rsa -C \"792321264@qq.com\"\n```\n\n打开[github](http://github.com)，在头像下面点击`settings`，再点击`SSH and GPG keys`，新建一个SSH，名字随便。\n\ngit bash中输入\n```bash\ncat ~/.ssh/id_rsa.pub\n```\n将输出的内容复制到框中，点击确定保存。\n\n输入`ssh -T git@github.com`，如果如下图所示，出现你的用户名，那就成功了。\n![](6.jpg)\n\n打开博客根目录下的`_config.yml`文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。\n\n修改最后一行的配置：\n```\ndeploy:\n  type: git\n  repository: https://github.com/godweiyang/godweiyang.github.io\n  branch: master\n```\nrepository修改为你自己的github项目地址。**不过你这里看到的可能与我有点不一样，因为我已经修改过主题了，所以这一步先不用管，换完主题之后记得回来修改！**\n\n# 写文章、发布文章\n---\n首先在博客根目录下右键打开git bash，安装一个扩展`npm i hexo-deployer-git`。\n\n然后输入`hexo new post \"article title\"`，新建一篇文章。\n\n然后打开`D:\\study\\program\\blog\\source\\_posts`的目录，可以发现下面多了一个文件夹和一个`.md`文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。\n\n编写完markdown文件后，根目录下输入`hexo g`生成静态网页，然后输入`hexo s`可以本地预览效果，最后输入`hexo d`上传到github上。这时打开你的github.io主页就能看到发布的文章啦。\n\n# 绑定域名\n---\n现在默认的域名还是`xxx.github.io`，是不是很没有牌面？想不想也像我一样弄一个专属域名呢，首先你得购买一个域名，xx云都能买，看你个人喜好了。\n\n以我的百度云为例，如下图所示，添加两条解析记录：\n![](7.jpg)\n\n然后打开你的github博客项目，点击`settings`，拉到下面`Custom domain`处，填上你自己的域名，保存：\n![](8.jpg)\n\n这时候你的项目根目录应该会出现一个名为`CNAME`的文件了。如果没有的话，打开你本地博客`/source`目录，我的是`D:\\study\\program\\blog\\source`，新建`CNAME`文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行`hexo g`、`hexo d`上传到github。\n\n# 更换主题\n---\n网上大多数主题都是github排名第一的`Next`主题，但是我个人不是很喜欢，我更喜欢`beantech`主题，地址在[传送门](https://github.com/YenYuHsuan/hexo-theme-beantech)。\n\n首先要注意的是，**这个github项目不仅包含了主题文件，还包含了hexo的各种文件**。\n\n所以首先下载下来这个项目，然后推荐将下图所有文件全部替换你原本博客根目录下的文件：\n![](9.jpg)\n\n当然一般的主题和这个主题有点不一样，只含有主题文件夹，所以把整个文件夹丢到`theme`下就行了。\n\n然后运行`hexo clean`清空所有生成的网页缓存，`hexo g`、`hexo d`。这时候新的主题网页就生成好了，博客根目录的情况应该大致如下：\n![](10.jpg)\n\n# 博客目录构成介绍\n---\n从上图可以看出，博客的目录结构如下：\n```\n- node_modules\n- public\n- scaffolds\n- source\n\t- _posts\n\t- about\n\t- archive\n\t- img\n\t- tags\n- themes\n```\n`node_modules`是node.js各种库的目录，`public`是生成的网页文件目录，`scaffolds`里面就三个文件，存储着新文章和新页面的初始设置，`source`是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，`themes`存放着主题文件，一般也用不到。\n\n我们平时写文章只需要关注`source/_posts`这个文件夹就行了。\n\n# 个性化设置及bug处理\n---\n**首先打开`_config.yml`，根据自己需求配置，具体不说了，有注释。**\n\n## 修复文档分类bug\n这个主题文档分类功能有个bug，一直没有得到解决，直到最近，我才发现是源文件的单词拼错了。。。\n\n打开`D:\\study\\program\\blog\\scaffolds\\post.md`，单词`catagories`改为`categories`。\n\n## 添加畅言评论插件\n主题自带了多说评论插件，但是多说已经关闭了，所以我换成了畅言评论插件。\n\n首先你得注册一个畅言账号，[地址](http://changyan.kuaizhan.com/)。\n然后打开如下页面，复制该段代码：\n![](11.jpg)\n打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs`，将代码粘贴到如下位置：\n![](12.jpg)\n然后重新生成一下网页，可以看到效果图如下：\n![](13.jpg)\n更多插件例如热评话题之类的，可以自行在畅言后台找到代码添加。\n\n## 添加图片放大功能\n首先下载`zooming.js`文件[地址](https://github.com/godweiyang/godweiyang.github.io/blob/master/js/zooming.js)，保存在`D:\\study\\program\\blog\\themes\\beantech\\source\\js`目录下。\n\n打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs`，在最下方粘贴如下代码：\n```\n<script type=\"text/javascript\" src=\"/js/zooming.js\"></script>\n```\n然后文章里的图片就可以单击全屏啦。\n\n## 添加数学公式显示\n打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs`，在最下方粘贴如下代码：\n```\n<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default\"></script>\n```\n由于markdown语法与mathjax语法存在冲突，所以还需要修改源文件。\n\n打开`D:\\study\\program\\blog\\node_modules\\marked\\lib\\marked.js`\n`escape: `处替换成：\n```\nescape: /^$[`*\\[\\]()#$+\\-.!_>])/\n```\n`em: `处替换成：\n```\nem: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/\n```\n\n这时在文章里写数学公式基本没有问题了，但是要注意：\n**数学公式中如果出现了连续两个{，中间一定要加空格！**\n\n举个例子:\n行内公式：$y = f(x)$\n代码：\n```\n$y = f(x)$\n```\n行间公式：\n\\\\[y = {f_{ {g_1}}}(x)\\\\]\n代码：\n```\n\\\\[y = {f_{ {g_1}}}(x)\\\\]\n```\n**注意上面花括号之间有空格！**\n\n## 添加留言板\n在`D:\\study\\program\\blog\\themes\\beantech\\layout`中新建`bbs.ejs`，文件内容如下：\n```\n---\nlayout: page\n---\n<style type=\"text/css\">\n    header.intro-header{\n        background-position: right; \n    }\n</style>\n<!-- Chinese Version -->\n<div class=\"zh post-container\">\n    <%- page.content %>\n</div>\n```\n然后在`D:\\study\\program\\blog\\source`中新建`\\bbs`文件夹，里面在新建`index.md`文件，内容如下：\n```\n---\nlayout: \"bbs\"\ntitle: \"BBS\"\ndate: 2017-09-19 12:48:33\ndescription: \"欢迎交换友链，一起交流学习！\"\nheader-img: \"img/header_img/home-bg-2-dark.png\"\ncomments: true\n---\n此处替换为你的畅言评论代码~~~\n```\n\n## 添加置顶功能\n运行如下两条命令安装置顶插件：\n```\nnpm uninstall hexo-generator-index --save\nnpm install hexo-generator-index-pin-top --save\n```\n然后打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\index.ejs`，在如下位置添加代码：\n![](14.jpg)\n```\n<% if (post.top) {%>\n    <i class=\"fa fa-thumb-tack\"></i>\n    <font color=7D26CD>置顶</font>\n    <span class=\"post-meta-divider\">|</span>\n<%}%>\n```\n然后在你想置顶的文章md文件里，添加如下配置选项：\n```\ntop: true\n```\n## 添加网易云音乐BGM\n写文章的时候，想插入一段BGM怎么办？\n\n首先打开网易云网页版，找到想听的歌曲，然后点击生成外链：\n![](15.jpg)\n复制如下代码：\n![](16.jpg)\n\n粘贴到文章里就行了，为了美观，设置一下居中，具体代码如下：\n```\n<div align=\"middle\">这里粘贴刚刚复制的代码</div>\n```\n\n## 添加访客人数统计和字数统计\n我们使用一个国外的流量统计网站：[gostats.com](gostats.com)，首先注册一下。\n\n然后自己添加网站地址，过程就不详细说了，然后点击`Get counter code`，选择一个自己喜欢的风格。\n如下图所示，选择一个样式，选择`HTML`，生成代码：\n![](17.jpg)\n\n复制这段代码到`D:\\study\\program\\blog\\themes\\beantech\\layout\\_partial\\footer.ejs`，具体位置如下：\n![](18.jpg)\n默认的代码和我图中不一样，因为我不想点击图片跳转到它统计网站的链接，可以模仿我的自行修改。\n\n字数统计首先安装插件\n```\nnpm i --save hexo-wordcount\n```\n然后打开`D:\\study\\program\\blog\\themes\\beantech\\layout\\_partial\\footer.ejs`，添加如下代码：\n```\n<span class=\"post-count\"><%= totalcount(site) %> words altogether</span>\n```\n具体位置见上图。\n# 一些注意事项\n---\n首先解释一下文章开头的配置，如下图所示：\n![](19.jpg)\n```\ntitle: 文章标题\ncatalog: 是否显示段落目录\ndate: 文章日期\nsubtitle: 子标题\nheader-img: 顶部背景图片\ntop: 是否置顶\ntags: 标签\ncategories: 分类\n```\n\n网站图片都保存在`D:\\study\\program\\blog\\source\\img`目录下，可以修改成自己的图片。\n\n如果换一台电脑想迁移博客的话，最简单的方法就是把博客整个目录拷贝过去，就是这么暴力。\n\n\n**其他还有什么问题的话等我想起来了再继续添加，如果遇到问题欢迎联系我。**","slug":"hexo-blog","published":1,"updated":"2019-08-04T01:16:42.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyyqfjj1000d7cahhmgvnez0","content":"<h1 id=\"更新：备份博客源文件（2019-07-26）\"><a href=\"#更新：备份博客源文件（2019-07-26）\" class=\"headerlink\" title=\"更新：备份博客源文件（2019.07.26）\"></a>更新：备份博客源文件（2019.07.26）</h1><hr>\n<p>有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。</p>\n<p>首先在github博客仓库下新建一个分支<code>hexo</code>，然后<code>git clone</code>到本地，把<code>.git</code>文件夹拿出来，放在博客根目录下。</p>\n<p>然后<code>git branch -b hexo</code>切换到<code>hexo</code>分支，然后<code>git add .</code>，然后<code>git commit -m &quot;xxx&quot;</code>，最后<code>git push origin hexo</code>提交就行了。</p>\n<p>具体效果可以看我的博客源文件仓库：<a href=\"https://github.com/godweiyang/godweiyang.github.io/tree/hexo\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<p>大家也可以先用下文hexo安装方法安装完hexo，然后直接<code>git clone -b hexo git@github.com:godweiyang/godweiyang.github.io.git</code>克隆我的所有源文件，然后这是我修改完的基本没bug的定制化的博客，就可以直接拿来用啦。</p>\n<h1 id=\"更新：更换新主题（2019-07-20）\"><a href=\"#更新：更换新主题（2019-07-20）\" class=\"headerlink\" title=\"更新：更换新主题（2019.07.20）\"></a>更新：更换新主题（2019.07.20）</h1><hr>\n<p>这两天花时间将我的博客换了一个主题，现在这个主题看着更加的炫（zhuang）酷（bi），并且响应式更友好，点起来就很舒服，功能也多很多。</p>\n<p>主题的原地址在这里：<a href=\"https://github.com/blinkfox/hexo-theme-matery\" target=\"_blank\" rel=\"noopener\">hexo-theme-matery</a>，它的文档写得也非常的详细，还有中英文两个版本，作者回复也很及时。效果图如下，可以看出非常合我的口味：<br><img src=\"21.jpg\" alt></p>\n<p>但是我自己使用起来还是遇到了好几个问题，经过两天的不懈摸鱼，终于基本解决了，这里分享一下。</p>\n<p>首先先按照文档教程安装一遍主题，然后是可以正常打开的，如果你是一般使用的话，基本没啥问题了。但是我是重度强迫症，一点小毛病就看着难受，下面列举一下我遇到的问题以及解决方法。</p>\n<h2 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h2><p>首先为了新建文章方便，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p>\n<pre class=\" language-json\"><code class=\"language-json\">---\ntitle<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\ndate<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> date <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\ntop<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\ncover<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\npassword<span class=\"token operator\">:</span>\ntoc<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\nmathjax<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\nsummary<span class=\"token operator\">:</span>\ntags<span class=\"token operator\">:</span>\ncategories<span class=\"token operator\">:</span>\n---</code></pre>\n<p>这样新建文章后不用你自己补充了，修改信息就行。</p>\n<h2 id=\"添加404页面\"><a href=\"#添加404页面\" class=\"headerlink\" title=\"添加404页面\"></a>添加404页面</h2><p>原来的主题没有404页面，加一个也不是什么难事。首先在<code>/source/</code>目录下新建一个<code>404.md</code>，内容如下：</p>\n<pre class=\" language-json\"><code class=\"language-json\">---\ntitle<span class=\"token operator\">:</span> <span class=\"token number\">404</span>\ndate<span class=\"token operator\">:</span> <span class=\"token number\">2019</span>-<span class=\"token number\">07</span>-<span class=\"token number\">19</span> <span class=\"token number\">16</span><span class=\"token operator\">:</span><span class=\"token number\">41</span><span class=\"token operator\">:</span><span class=\"token number\">10</span>\ntype<span class=\"token operator\">:</span> <span class=\"token string\">\"404\"</span>\nlayout<span class=\"token operator\">:</span> <span class=\"token string\">\"404\"</span>\ndescription<span class=\"token operator\">:</span> <span class=\"token string\">\"你来到了没有知识的荒原 :(\"</span>\n---</code></pre>\n<p>然后在<code>/themes/matery/layout/</code>目录下新建一个<code>404.ejs</code>文件，内容如下：</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n    <span class=\"token comment\" spellcheck=\"true\">/* don't remove. */</span>\n    <span class=\"token selector\"><span class=\"token class\">.about-cover</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">75</span>vh<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>bg-cover pd-header about-cover<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>row<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>col s10 offset-s1 m8 offset-m2 l8 offset-l2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>brand<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>title center-align<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                        404\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>description center-align<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                        &lt;%= page.description %>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n    <span class=\"token comment\" spellcheck=\"true\">// 每天切换 banner 图.  Switch banner image every day.</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.bg-cover'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">'background-image'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'url(/medias/banner/'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.jpg)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"“关于”页面增加简历（可选）\"><a href=\"#“关于”页面增加简历（可选）\" class=\"headerlink\" title=\"“关于”页面增加简历（可选）\"></a>“关于”页面增加简历（可选）</h2><p>修改<code>/themes/matery/layout/about.ejs</code>，找到<code>&lt;div class=&quot;card&quot;&gt;</code>标签，然后找到它对应的<code>&lt;/div&gt;</code>标签，接在后面新增一个card，语句如下：</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>card<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>card-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>card-content article-card-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>title center-align<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-aos</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zoom-in-up<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-address-book<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span><span class=\"token entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%-</span> <span class=\"token attr-name\">__('myCV')</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>articleContent<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-aos</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fade-up<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%-</span> <span class=\"token attr-name\">page.content</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>这样就会多出一张card，然后可以在<code>/source/about/index.md</code>下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个card。</p>\n<h2 id=\"解决mathjax与代码高亮的冲突\"><a href=\"#解决mathjax与代码高亮的冲突\" class=\"headerlink\" title=\"解决mathjax与代码高亮的冲突\"></a>解决mathjax与代码高亮的冲突</h2><p>如果你按照教程安装了代码高亮插件<code>hexo-prism-plugin</code>，单独使用是没有问题的，但如果你又使用了mathjax，并且按照网上教程，安装<code>kramed</code>插件并修改了js文件里的正则表达式（为了解决markdown和mathjax的语法冲突），好了，那你的代码就无法高亮了。解决方法很简单，别用<code>kramed</code>插件了，还用原来自带的<code>marked</code>插件，直接改它的正则表达式就行了，改法还和网上一样。</p>\n<h2 id=\"增加建站时间\"><a href=\"#增加建站时间\" class=\"headerlink\" title=\"增加建站时间\"></a>增加建站时间</h2><p>修改<code>/themes/matery/layout/_partial/footer.ejs</code>文件，在最后加上</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script language<span class=\"token operator\">=</span>javascript<span class=\"token operator\">></span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">siteTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"siteTime()\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> seconds <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> minutes <span class=\"token operator\">=</span> seconds <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> hours <span class=\"token operator\">=</span> minutes <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> days <span class=\"token operator\">=</span> hours <span class=\"token operator\">*</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> years <span class=\"token operator\">=</span> days <span class=\"token operator\">*</span> <span class=\"token number\">365</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> today <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> todayYear <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> todayMonth <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> todayDate <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> todayHour <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> todayMinute <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> todaySecond <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">/* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)\n        year - 作为date对象的年份，为4位年份值\n        month - 0-11之间的整数，做为date对象的月份\n        day - 1-31之间的整数，做为date对象的天数\n        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数\n        minutes - 0-59之间的整数，做为date对象的分钟数\n        seconds - 0-59之间的整数，做为date对象的秒数\n        microseconds - 0-999之间的整数，做为date对象的毫秒数 */</span>\n        <span class=\"token keyword\">var</span> t1 <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">UTC</span><span class=\"token punctuation\">(</span><span class=\"token number\">2017</span><span class=\"token punctuation\">,</span> <span class=\"token number\">09</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//北京时间2018-2-13 00:00:00</span>\n        <span class=\"token keyword\">var</span> t2 <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">UTC</span><span class=\"token punctuation\">(</span>todayYear<span class=\"token punctuation\">,</span> todayMonth<span class=\"token punctuation\">,</span> todayDate<span class=\"token punctuation\">,</span> todayHour<span class=\"token punctuation\">,</span> todayMinute<span class=\"token punctuation\">,</span> todaySecond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> diff <span class=\"token operator\">=</span> t2 <span class=\"token operator\">-</span> t1<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> diffYears <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>diff <span class=\"token operator\">/</span> years<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> diffDays <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>diff <span class=\"token operator\">/</span> days<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> diffYears <span class=\"token operator\">*</span> <span class=\"token number\">365</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> diffHours <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>diff <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>diffYears <span class=\"token operator\">*</span> <span class=\"token number\">365</span> <span class=\"token operator\">+</span> diffDays<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> days<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> hours<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> diffMinutes <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>diff <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>diffYears <span class=\"token operator\">*</span> <span class=\"token number\">365</span> <span class=\"token operator\">+</span> diffDays<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> days <span class=\"token operator\">-</span> diffHours <span class=\"token operator\">*</span> hours<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> minutes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> diffSeconds <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>diff <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>diffYears <span class=\"token operator\">*</span> <span class=\"token number\">365</span> <span class=\"token operator\">+</span> diffDays<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> days <span class=\"token operator\">-</span> diffHours <span class=\"token operator\">*</span> hours <span class=\"token operator\">-</span> diffMinutes <span class=\"token operator\">*</span> minutes<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> seconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sitetime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"本站已运行 \"</span> <span class=\"token operator\">+</span>diffYears<span class=\"token operator\">+</span><span class=\"token string\">\" 年 \"</span><span class=\"token operator\">+</span>diffDays <span class=\"token operator\">+</span> <span class=\"token string\">\" 天 \"</span> <span class=\"token operator\">+</span> diffHours <span class=\"token operator\">+</span> <span class=\"token string\">\" 小时 \"</span> <span class=\"token operator\">+</span> diffMinutes <span class=\"token operator\">+</span> <span class=\"token string\">\" 分钟 \"</span> <span class=\"token operator\">+</span> diffSeconds <span class=\"token operator\">+</span> <span class=\"token string\">\" 秒\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token comment\" spellcheck=\"true\">/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/</span>\n    <span class=\"token function\">siteTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre>\n<p>然后在合适的地方（比如copyright声明后面）加上下面的代码就行了：</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>sitetime<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"修改不蒜子初始化计数\"><a href=\"#修改不蒜子初始化计数\" class=\"headerlink\" title=\"修改不蒜子初始化计数\"></a>修改不蒜子初始化计数</h2><p>因为不蒜子至今未开放注册，所以没办法在官网修改初始化，只能自己动手了。和上一条一样，在<code>/themes/matery/layout/_partial/footer.ejs</code>文件最后加上：</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">var</span> int <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>fixCount<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 50ms周期检测函数</span>\n        <span class=\"token keyword\">var</span> pvcountOffset <span class=\"token operator\">=</span> <span class=\"token number\">80000</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 初始化首次数据</span>\n        <span class=\"token keyword\">var</span> uvcountOffset <span class=\"token operator\">=</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">function</span> <span class=\"token function\">fixCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"busuanzi_container_site_pv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">!=</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#busuanzi_value_site_pv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#busuanzi_value_site_pv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pvcountOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#busuanzi_container_site_pv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"display\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#busuanzi_value_site_uv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#busuanzi_value_site_uv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> uvcountOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 加上初始数据 </span>\n                <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 停止检测</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre>\n<p>然后把上面几行有段代码：</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">if</span> <span class=\"token attr-name\">(theme.busuanziStatistics</span> <span class=\"token attr-name\">&amp;&amp;</span> <span class=\"token attr-name\">theme.busuanziStatistics.totalTraffic)</span> <span class=\"token attr-name\">{</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>busuanzi_container_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-heart-o<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>\n        本站总访问量 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_pv<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>white-color<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">}</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">if</span> <span class=\"token attr-name\">(theme.busuanziStatistics</span> <span class=\"token attr-name\">&amp;&amp;</span> <span class=\"token attr-name\">theme.busuanziStatistics.totalNumberOfvisitors)</span> <span class=\"token attr-name\">{</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>busuanzi_container_site_uv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        人次,<span class=\"token entity\" title=\"&nbsp;\">&amp;nbsp;</span>访客数 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_uv<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>white-color<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> 人.\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">}</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>修改为：</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">if</span> <span class=\"token attr-name\">(theme.busuanziStatistics</span> <span class=\"token attr-name\">&amp;&amp;</span> <span class=\"token attr-name\">theme.busuanziStatistics.totalTraffic)</span> <span class=\"token attr-name\">{</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>busuanzi_container_site_pv<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">='</span><span class=\"token attr-value\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span>none</span><span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-heart-o<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>\n        本站总访问量 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_pv<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>white-color<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">}</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">if</span> <span class=\"token attr-name\">(theme.busuanziStatistics</span> <span class=\"token attr-name\">&amp;&amp;</span> <span class=\"token attr-name\">theme.busuanziStatistics.totalNumberOfvisitors)</span> <span class=\"token attr-name\">{</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>busuanzi_container_site_uv<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">='</span><span class=\"token attr-value\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span>none</span><span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n        人次,<span class=\"token entity\" title=\"&nbsp;\">&amp;nbsp;</span>访客数 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>busuanzi_value_site_uv<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>white-color<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> 人.\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">}</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>其实就是增加了两个<code>style=&#39;display:none&#39;</code>而已。</p>\n<h2 id=\"添加动漫人物\"><a href=\"#添加动漫人物\" class=\"headerlink\" title=\"添加动漫人物\"></a>添加动漫人物</h2><p>其实三步就行了，不用像网上有些教程那么复杂。</p>\n<p><strong>第一步：</strong></p>\n<pre><code>npm install --save hexo-helper-live2d</code></pre><p><strong>第二步：</strong></p>\n<pre><code>npm install live2d-widget-model-shizuku</code></pre><p><strong>第三步：</strong><br>在根目录配置文件中添加如下代码：</p>\n<pre><code>live2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  log: false\n  model:\n    use: live2d-widget-model-shizuku\n  display:\n    position: right\n    width: 150\n    height: 300\n  mobile:\n    show: true\n  react:\n    opacity: 0.7</code></pre><p>然后<code>hexo g</code>再<code>hexo s</code>就能预览出效果了，但是有个注意的地方，我发现<strong>这个动漫人物最好不要和不蒜子同时使用</strong>，不然不蒜子会显示不出来。</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><hr>\n<p>去年9月的时候开始搭建了第一个自己的独立博客，到现在也稍微像模像样了。很多小伙伴应该也想过搭建一个自己的博客，网上也有一堆详细教程。我在此稍稍总结一下具体的搭建步骤，另外网上很少有修改博客源码的个性化教程，我就稍稍分享一下我的一些修改经验，更多的个性化操作需要你自己以后去摸索。</p>\n<p>具体效果可以参观我的博客：<a href=\"http://godweiyang.com\" target=\"_blank\" rel=\"noopener\">godweiyang.com</a>，欢迎大家支持。</p>\n<p>我不是一个前端程序员，有些东西不是很了解，说的不好大家见谅。</p>\n<p>首先要了解一下我们搭建博客要用到的框架。Hexo是高效的静态站点生成框架，它基于Node.js。通过Hexo，你可以直接使用Markdown语法来撰写博客。相信很多小伙伴写工程都写过README.md文件吧，对，就是这个格式的！写完后只需两三条命令即可将生成的网页上传到你的github上，然后别人就可以看到你的网页啦。是不是很简单？你无需关心网页源代码的具体细节，你只需要用心写好你的博客内容就行。</p>\n<h1 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h1><hr>\n<p>首先下载稳定版<a href=\"https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi\" target=\"_blank\" rel=\"noopener\">Node.js</a>，我这里给的是64位的。</p>\n<p>安装选项全部默认，一路点击<code>Next</code>。</p>\n<p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p>\n<h2 id=\"添加国内镜像源\"><a href=\"#添加国内镜像源\" class=\"headerlink\" title=\"添加国内镜像源\"></a>添加国内镜像源</h2><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> config <span class=\"token keyword\">set</span> registry https://registry.npm.taobao.org</code></pre>\n<h1 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h1><hr>\n<p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————Git<a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">[下载地址]</a>。</p>\n<p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p>\n<p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p>\n<h1 id=\"注册Github账号\"><a href=\"#注册Github账号\" class=\"headerlink\" title=\"注册Github账号\"></a>注册Github账号</h1><hr>\n<p>接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。</p>\n<p>打开<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a>，新建一个项目，如下所示：<br><img src=\"1.jpg\" alt><br>然后如下图所示，输入自己的项目名字，后面一定要加<code>.github.io</code>后缀，README初始化也要勾上。<br><img src=\"2.jpg\" alt><br>然后项目就建成了，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>，会变成下面这样：<br><img src=\"3.jpg\" alt><br>点击那个链接，就会出现自己的网页啦，效果如下：<br><img src=\"4.jpg\" alt></p>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><hr>\n<p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在<code>D:\\study\\program\\blog</code>目录下。</p>\n<p>在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。</p>\n<p>定位到该目录下，输入<code>npm i hexo-cli -g</code>安装Hexo。会有几个报错，无视它就行。</p>\n<p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p>\n<p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。</p>\n<p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a>，就可以看到我们的博客啦，效果如下：<br><img src=\"5.jpg\" alt></p>\n<p>按<code>ctrl+c</code>关闭本地服务器。</p>\n<h1 id=\"连接Github与本地\"><a href=\"#连接Github与本地\" class=\"headerlink\" title=\"连接Github与本地\"></a>连接Github与本地</h1><hr>\n<p>首先右键打开git bash，然后输入下面命令：</p>\n<pre><code>git config --global user.name &quot;godweiyang&quot;\ngit config --global user.email &quot;792321264@qq.com&quot;</code></pre><p>用户名和邮箱根据你注册github的信息自行修改。</p>\n<p>然后生成密钥SSH key：</p>\n<pre><code>ssh-keygen -t rsa -C &quot;792321264@qq.com&quot;</code></pre><p>打开<a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便。</p>\n<p>git bash中输入</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> ~/.ssh/id_rsa.pub</code></pre>\n<p>将输出的内容复制到框中，点击确定保存。</p>\n<p>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。<br><img src=\"6.jpg\" alt></p>\n<p>打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p>\n<p>修改最后一行的配置：</p>\n<pre><code>deploy:\n  type: git\n  repository: https://github.com/godweiyang/godweiyang.github.io\n  branch: master</code></pre><p>repository修改为你自己的github项目地址。<strong>不过你这里看到的可能与我有点不一样，因为我已经修改过主题了，所以这一步先不用管，换完主题之后记得回来修改！</strong></p>\n<h1 id=\"写文章、发布文章\"><a href=\"#写文章、发布文章\" class=\"headerlink\" title=\"写文章、发布文章\"></a>写文章、发布文章</h1><hr>\n<p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。</p>\n<p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p>\n<p>然后打开<code>D:\\study\\program\\blog\\source\\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p>\n<p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p>\n<h1 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h1><hr>\n<p>现在默认的域名还是<code>xxx.github.io</code>，是不是很没有牌面？想不想也像我一样弄一个专属域名呢，首先你得购买一个域名，xx云都能买，看你个人喜好了。</p>\n<p>以我的百度云为例，如下图所示，添加两条解析记录：<br><img src=\"7.jpg\" alt></p>\n<p>然后打开你的github博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存：<br><img src=\"8.jpg\" alt></p>\n<p>这时候你的项目根目录应该会出现一个名为<code>CNAME</code>的文件了。如果没有的话，打开你本地博客<code>/source</code>目录，我的是<code>D:\\study\\program\\blog\\source</code>，新建<code>CNAME</code>文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行<code>hexo g</code>、<code>hexo d</code>上传到github。</p>\n<h1 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h1><hr>\n<p>网上大多数主题都是github排名第一的<code>Next</code>主题，但是我个人不是很喜欢，我更喜欢<code>beantech</code>主题，地址在<a href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<p>首先要注意的是，<strong>这个github项目不仅包含了主题文件，还包含了hexo的各种文件</strong>。</p>\n<p>所以首先下载下来这个项目，然后推荐将下图所有文件全部替换你原本博客根目录下的文件：<br><img src=\"9.jpg\" alt></p>\n<p>当然一般的主题和这个主题有点不一样，只含有主题文件夹，所以把整个文件夹丢到<code>theme</code>下就行了。</p>\n<p>然后运行<code>hexo clean</code>清空所有生成的网页缓存，<code>hexo g</code>、<code>hexo d</code>。这时候新的主题网页就生成好了，博客根目录的情况应该大致如下：<br><img src=\"10.jpg\" alt></p>\n<h1 id=\"博客目录构成介绍\"><a href=\"#博客目录构成介绍\" class=\"headerlink\" title=\"博客目录构成介绍\"></a>博客目录构成介绍</h1><hr>\n<p>从上图可以看出，博客的目录结构如下：</p>\n<pre><code>- node_modules\n- public\n- scaffolds\n- source\n    - _posts\n    - about\n    - archive\n    - img\n    - tags\n- themes</code></pre><p><code>node_modules</code>是node.js各种库的目录，<code>public</code>是生成的网页文件目录，<code>scaffolds</code>里面就三个文件，存储着新文章和新页面的初始设置，<code>source</code>是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，<code>themes</code>存放着主题文件，一般也用不到。</p>\n<p>我们平时写文章只需要关注<code>source/_posts</code>这个文件夹就行了。</p>\n<h1 id=\"个性化设置及bug处理\"><a href=\"#个性化设置及bug处理\" class=\"headerlink\" title=\"个性化设置及bug处理\"></a>个性化设置及bug处理</h1><hr>\n<p><strong>首先打开<code>_config.yml</code>，根据自己需求配置，具体不说了，有注释。</strong></p>\n<h2 id=\"修复文档分类bug\"><a href=\"#修复文档分类bug\" class=\"headerlink\" title=\"修复文档分类bug\"></a>修复文档分类bug</h2><p>这个主题文档分类功能有个bug，一直没有得到解决，直到最近，我才发现是源文件的单词拼错了。。。</p>\n<p>打开<code>D:\\study\\program\\blog\\scaffolds\\post.md</code>，单词<code>catagories</code>改为<code>categories</code>。</p>\n<h2 id=\"添加畅言评论插件\"><a href=\"#添加畅言评论插件\" class=\"headerlink\" title=\"添加畅言评论插件\"></a>添加畅言评论插件</h2><p>主题自带了多说评论插件，但是多说已经关闭了，所以我换成了畅言评论插件。</p>\n<p>首先你得注册一个畅言账号，<a href=\"http://changyan.kuaizhan.com/\" target=\"_blank\" rel=\"noopener\">地址</a>。<br>然后打开如下页面，复制该段代码：<br><img src=\"11.jpg\" alt><br>打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs</code>，将代码粘贴到如下位置：<br><img src=\"12.jpg\" alt><br>然后重新生成一下网页，可以看到效果图如下：<br><img src=\"13.jpg\" alt><br>更多插件例如热评话题之类的，可以自行在畅言后台找到代码添加。</p>\n<h2 id=\"添加图片放大功能\"><a href=\"#添加图片放大功能\" class=\"headerlink\" title=\"添加图片放大功能\"></a>添加图片放大功能</h2><p>首先下载<code>zooming.js</code>文件<a href=\"https://github.com/godweiyang/godweiyang.github.io/blob/master/js/zooming.js\" target=\"_blank\" rel=\"noopener\">地址</a>，保存在<code>D:\\study\\program\\blog\\themes\\beantech\\source\\js</code>目录下。</p>\n<p>打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs</code>，在最下方粘贴如下代码：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/zooming.js&quot;&gt;&lt;/script&gt;</code></pre><p>然后文章里的图片就可以单击全屏啦。</p>\n<h2 id=\"添加数学公式显示\"><a href=\"#添加数学公式显示\" class=\"headerlink\" title=\"添加数学公式显示\"></a>添加数学公式显示</h2><p>打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs</code>，在最下方粘贴如下代码：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;</code></pre><p>由于markdown语法与mathjax语法存在冲突，所以还需要修改源文件。</p>\n<p>打开<code>D:\\study\\program\\blog\\node_modules\\marked\\lib\\marked.js</code><br><code>escape:</code>处替换成：</p>\n<pre><code>escape: /^$[`*\\[\\]()#$+\\-.!_&gt;])/</code></pre><p><code>em:</code>处替换成：</p>\n<pre><code>em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/</code></pre><p>这时在文章里写数学公式基本没有问题了，但是要注意：<br><strong>数学公式中如果出现了连续两个{，中间一定要加空格！</strong></p>\n<p>举个例子:<br>行内公式：$y = f(x)$<br>代码：</p>\n<pre><code>$y = f(x)$</code></pre><p>行间公式：<br>\\[y = {f_{ {g_1}}}(x)\\]<br>代码：</p>\n<pre><code>\\\\[y = {f_{ {g_1}}}(x)\\\\]</code></pre><p><strong>注意上面花括号之间有空格！</strong></p>\n<h2 id=\"添加留言板\"><a href=\"#添加留言板\" class=\"headerlink\" title=\"添加留言板\"></a>添加留言板</h2><p>在<code>D:\\study\\program\\blog\\themes\\beantech\\layout</code>中新建<code>bbs.ejs</code>，文件内容如下：</p>\n<pre><code>---\nlayout: page\n---\n&lt;style type=&quot;text/css&quot;&gt;\n    header.intro-header{\n        background-position: right; \n    }\n&lt;/style&gt;\n&lt;!-- Chinese Version --&gt;\n&lt;div class=&quot;zh post-container&quot;&gt;\n    &lt;%- page.content %&gt;\n&lt;/div&gt;</code></pre><p>然后在<code>D:\\study\\program\\blog\\source</code>中新建<code>\\bbs</code>文件夹，里面在新建<code>index.md</code>文件，内容如下：</p>\n<pre><code>---\nlayout: &quot;bbs&quot;\ntitle: &quot;BBS&quot;\ndate: 2017-09-19 12:48:33\ndescription: &quot;欢迎交换友链，一起交流学习！&quot;\nheader-img: &quot;img/header_img/home-bg-2-dark.png&quot;\ncomments: true\n---\n此处替换为你的畅言评论代码~~~</code></pre><h2 id=\"添加置顶功能\"><a href=\"#添加置顶功能\" class=\"headerlink\" title=\"添加置顶功能\"></a>添加置顶功能</h2><p>运行如下两条命令安装置顶插件：</p>\n<pre><code>npm uninstall hexo-generator-index --save\nnpm install hexo-generator-index-pin-top --save</code></pre><p>然后打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\index.ejs</code>，在如下位置添加代码：<br><img src=\"14.jpg\" alt></p>\n<pre><code>&lt;% if (post.top) {%>\n    <i class=\"fa fa-thumb-tack\"></i>\n    <font color=\"7D26CD\">置顶</font>\n    <span class=\"post-meta-divider\">|</span>\n<%}%&gt;< code></%}%&gt;<></code></pre><p>然后在你想置顶的文章md文件里，添加如下配置选项：</p>\n<pre><code>top: true</code></pre><h2 id=\"添加网易云音乐BGM\"><a href=\"#添加网易云音乐BGM\" class=\"headerlink\" title=\"添加网易云音乐BGM\"></a>添加网易云音乐BGM</h2><p>写文章的时候，想插入一段BGM怎么办？</p>\n<p>首先打开网易云网页版，找到想听的歌曲，然后点击生成外链：<br><img src=\"15.jpg\" alt><br>复制如下代码：<br><img src=\"16.jpg\" alt></p>\n<p>粘贴到文章里就行了，为了美观，设置一下居中，具体代码如下：</p>\n<pre><code>&lt;div align=&quot;middle&quot;&gt;这里粘贴刚刚复制的代码&lt;/div&gt;</code></pre><h2 id=\"添加访客人数统计和字数统计\"><a href=\"#添加访客人数统计和字数统计\" class=\"headerlink\" title=\"添加访客人数统计和字数统计\"></a>添加访客人数统计和字数统计</h2><p>我们使用一个国外的流量统计网站：<a href=\"gostats.com\">gostats.com</a>，首先注册一下。</p>\n<p>然后自己添加网站地址，过程就不详细说了，然后点击<code>Get counter code</code>，选择一个自己喜欢的风格。<br>如下图所示，选择一个样式，选择<code>HTML</code>，生成代码：<br><img src=\"17.jpg\" alt></p>\n<p>复制这段代码到<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\_partial\\footer.ejs</code>，具体位置如下：<br><img src=\"18.jpg\" alt><br>默认的代码和我图中不一样，因为我不想点击图片跳转到它统计网站的链接，可以模仿我的自行修改。</p>\n<p>字数统计首先安装插件</p>\n<pre><code>npm i --save hexo-wordcount</code></pre><p>然后打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\_partial\\footer.ejs</code>，添加如下代码：</p>\n<pre><code>&lt;span class=&quot;post-count&quot;&gt;&lt;%= totalcount(site) %&gt; words altogether&lt;/span&gt;</code></pre><p>具体位置见上图。</p>\n<h1 id=\"一些注意事项\"><a href=\"#一些注意事项\" class=\"headerlink\" title=\"一些注意事项\"></a>一些注意事项</h1><hr>\n<p>首先解释一下文章开头的配置，如下图所示：<br><img src=\"19.jpg\" alt></p>\n<pre><code>title: 文章标题\ncatalog: 是否显示段落目录\ndate: 文章日期\nsubtitle: 子标题\nheader-img: 顶部背景图片\ntop: 是否置顶\ntags: 标签\ncategories: 分类</code></pre><p>网站图片都保存在<code>D:\\study\\program\\blog\\source\\img</code>目录下，可以修改成自己的图片。</p>\n<p>如果换一台电脑想迁移博客的话，最简单的方法就是把博客整个目录拷贝过去，就是这么暴力。</p>\n<p><strong>其他还有什么问题的话等我想起来了再继续添加，如果遇到问题欢迎联系我。</strong></p>\n","site":{"data":{"friends":[{"name":"IVIPC","url":"http://ivipc.uestc.edu.cn/","title":"访问主页","introduction":"UESTC智能视觉信息处理与通信实验室(IVIPC)欢迎您的加入！","avatar":"/medias/avatars/ivipc.png"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://static.blinkfox.com/20190601.png","name":"码农","introduction":"这里不隐含扭曲的价值观，而是整合并充盈正能量","url":"https://www.90c.vip/","title":"前去学习"},{"avatar":"https://jiangliuhong.gitee.io/images/avatar.jpg","name":"编程常青树","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://jiangliuhong.gitee.io/","title":"前去学习"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"}],"musics":[{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563717347893&di=110c7c670d70e490135b581cbfd73e0d&imgtype=0&src=http%3A%2F%2Fs1.sinaimg.cn%2Fmw690%2F00334B5xgy6WL0FCP0A10%26690"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563568131238&di=23ae51dda700bd4e3b624f66af1289f7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F11%2F20180811021949_fVEST.jpeg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563566810433&di=68b80a762a497648670ef0df46ee8f57&imgtype=0&src=http%3A%2F%2F03imgmini.eastday.com%2Fmobile%2F20180918%2F20180918205448_99dfb333ca34518cb96823defa4c68c9_1.jpeg"}]}},"excerpt":"","more":"<h1 id=\"更新：备份博客源文件（2019-07-26）\"><a href=\"#更新：备份博客源文件（2019-07-26）\" class=\"headerlink\" title=\"更新：备份博客源文件（2019.07.26）\"></a>更新：备份博客源文件（2019.07.26）</h1><hr>\n<p>有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。</p>\n<p>首先在github博客仓库下新建一个分支<code>hexo</code>，然后<code>git clone</code>到本地，把<code>.git</code>文件夹拿出来，放在博客根目录下。</p>\n<p>然后<code>git branch -b hexo</code>切换到<code>hexo</code>分支，然后<code>git add .</code>，然后<code>git commit -m &quot;xxx&quot;</code>，最后<code>git push origin hexo</code>提交就行了。</p>\n<p>具体效果可以看我的博客源文件仓库：<a href=\"https://github.com/godweiyang/godweiyang.github.io/tree/hexo\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<p>大家也可以先用下文hexo安装方法安装完hexo，然后直接<code>git clone -b hexo git@github.com:godweiyang/godweiyang.github.io.git</code>克隆我的所有源文件，然后这是我修改完的基本没bug的定制化的博客，就可以直接拿来用啦。</p>\n<h1 id=\"更新：更换新主题（2019-07-20）\"><a href=\"#更新：更换新主题（2019-07-20）\" class=\"headerlink\" title=\"更新：更换新主题（2019.07.20）\"></a>更新：更换新主题（2019.07.20）</h1><hr>\n<p>这两天花时间将我的博客换了一个主题，现在这个主题看着更加的炫（zhuang）酷（bi），并且响应式更友好，点起来就很舒服，功能也多很多。</p>\n<p>主题的原地址在这里：<a href=\"https://github.com/blinkfox/hexo-theme-matery\" target=\"_blank\" rel=\"noopener\">hexo-theme-matery</a>，它的文档写得也非常的详细，还有中英文两个版本，作者回复也很及时。效果图如下，可以看出非常合我的口味：<br><img src=\"21.jpg\" alt></p>\n<p>但是我自己使用起来还是遇到了好几个问题，经过两天的不懈摸鱼，终于基本解决了，这里分享一下。</p>\n<p>首先先按照文档教程安装一遍主题，然后是可以正常打开的，如果你是一般使用的话，基本没啥问题了。但是我是重度强迫症，一点小毛病就看着难受，下面列举一下我遇到的问题以及解决方法。</p>\n<h2 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h2><p>首先为了新建文章方便，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p>\n<pre><code class=\"json\">---\ntitle: {{ title }}\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\ncategories:\n---</code></pre>\n<p>这样新建文章后不用你自己补充了，修改信息就行。</p>\n<h2 id=\"添加404页面\"><a href=\"#添加404页面\" class=\"headerlink\" title=\"添加404页面\"></a>添加404页面</h2><p>原来的主题没有404页面，加一个也不是什么难事。首先在<code>/source/</code>目录下新建一个<code>404.md</code>，内容如下：</p>\n<pre><code class=\"json\">---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: &quot;404&quot;\nlayout: &quot;404&quot;\ndescription: &quot;你来到了没有知识的荒原 :(&quot;\n---</code></pre>\n<p>然后在<code>/themes/matery/layout/</code>目录下新建一个<code>404.ejs</code>文件，内容如下：</p>\n<pre><code class=\"html\">&lt;style type=&quot;text/css&quot;&gt;\n    /* don&#39;t remove. */\n    .about-cover {\n        height: 75vh;\n    }\n&lt;/style&gt;\n\n&lt;div class=&quot;bg-cover pd-header about-cover&quot;&gt;\n    &lt;div class=&quot;container&quot;&gt;\n        &lt;div class=&quot;row&quot;&gt;\n            &lt;div class=&quot;col s10 offset-s1 m8 offset-m2 l8 offset-l2&quot;&gt;\n                &lt;div class=&quot;brand&quot;&gt;\n                    &lt;div class=&quot;title center-align&quot;&gt;\n                        404\n                    &lt;/div&gt;\n                    &lt;div class=&quot;description center-align&quot;&gt;\n                        &lt;%= page.description %&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    // 每天切换 banner 图.  Switch banner image every day.\n    $(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(/medias/banner/&#39; + new Date().getDay() + &#39;.jpg)&#39;);\n&lt;/script&gt;</code></pre>\n<h2 id=\"“关于”页面增加简历（可选）\"><a href=\"#“关于”页面增加简历（可选）\" class=\"headerlink\" title=\"“关于”页面增加简历（可选）\"></a>“关于”页面增加简历（可选）</h2><p>修改<code>/themes/matery/layout/about.ejs</code>，找到<code>&lt;div class=&quot;card&quot;&gt;</code>标签，然后找到它对应的<code>&lt;/div&gt;</code>标签，接在后面新增一个card，语句如下：</p>\n<pre><code class=\"html\">&lt;div class=&quot;card&quot;&gt;\n    &lt;div class=&quot;card-content&quot;&gt;\n        &lt;div class=&quot;card-content article-card-content&quot;&gt;\n                &lt;div class=&quot;title center-align&quot; data-aos=&quot;zoom-in-up&quot;&gt;\n                    &lt;i class=&quot;fa fa-address-book&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&lt;%- __(&#39;myCV&#39;) %&gt;\n                &lt;/div&gt;\n                &lt;div id=&quot;articleContent&quot; data-aos=&quot;fade-up&quot;&gt;\n                    &lt;%- page.content %&gt;\n                &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<p>这样就会多出一张card，然后可以在<code>/source/about/index.md</code>下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个card。</p>\n<h2 id=\"解决mathjax与代码高亮的冲突\"><a href=\"#解决mathjax与代码高亮的冲突\" class=\"headerlink\" title=\"解决mathjax与代码高亮的冲突\"></a>解决mathjax与代码高亮的冲突</h2><p>如果你按照教程安装了代码高亮插件<code>hexo-prism-plugin</code>，单独使用是没有问题的，但如果你又使用了mathjax，并且按照网上教程，安装<code>kramed</code>插件并修改了js文件里的正则表达式（为了解决markdown和mathjax的语法冲突），好了，那你的代码就无法高亮了。解决方法很简单，别用<code>kramed</code>插件了，还用原来自带的<code>marked</code>插件，直接改它的正则表达式就行了，改法还和网上一样。</p>\n<h2 id=\"增加建站时间\"><a href=\"#增加建站时间\" class=\"headerlink\" title=\"增加建站时间\"></a>增加建站时间</h2><p>修改<code>/themes/matery/layout/_partial/footer.ejs</code>文件，在最后加上</p>\n<pre><code class=\"js\">&lt;script language=javascript&gt;\n    function siteTime() {\n        window.setTimeout(&quot;siteTime()&quot;, 1000);\n        var seconds = 1000;\n        var minutes = seconds * 60;\n        var hours = minutes * 60;\n        var days = hours * 24;\n        var years = days * 365;\n        var today = new Date();\n        var todayYear = today.getFullYear();\n        var todayMonth = today.getMonth() + 1;\n        var todayDate = today.getDate();\n        var todayHour = today.getHours();\n        var todayMinute = today.getMinutes();\n        var todaySecond = today.getSeconds();\n        /* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)\n        year - 作为date对象的年份，为4位年份值\n        month - 0-11之间的整数，做为date对象的月份\n        day - 1-31之间的整数，做为date对象的天数\n        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数\n        minutes - 0-59之间的整数，做为date对象的分钟数\n        seconds - 0-59之间的整数，做为date对象的秒数\n        microseconds - 0-999之间的整数，做为date对象的毫秒数 */\n        var t1 = Date.UTC(2017, 09, 11, 00, 00, 00); //北京时间2018-2-13 00:00:00\n        var t2 = Date.UTC(todayYear, todayMonth, todayDate, todayHour, todayMinute, todaySecond);\n        var diff = t2 - t1;\n        var diffYears = Math.floor(diff / years);\n        var diffDays = Math.floor((diff / days) - diffYears * 365);\n        var diffHours = Math.floor((diff - (diffYears * 365 + diffDays) * days) / hours);\n        var diffMinutes = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours) / minutes);\n        var diffSeconds = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours - diffMinutes * minutes) / seconds);\n        document.getElementById(&quot;sitetime&quot;).innerHTML = &quot;本站已运行 &quot; +diffYears+&quot; 年 &quot;+diffDays + &quot; 天 &quot; + diffHours + &quot; 小时 &quot; + diffMinutes + &quot; 分钟 &quot; + diffSeconds + &quot; 秒&quot;;\n    }/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/\n    siteTime();\n&lt;/script&gt;</code></pre>\n<p>然后在合适的地方（比如copyright声明后面）加上下面的代码就行了：</p>\n<pre><code class=\"html\">&lt;span id=&quot;sitetime&quot;&gt;&lt;/span&gt;</code></pre>\n<h2 id=\"修改不蒜子初始化计数\"><a href=\"#修改不蒜子初始化计数\" class=\"headerlink\" title=\"修改不蒜子初始化计数\"></a>修改不蒜子初始化计数</h2><p>因为不蒜子至今未开放注册，所以没办法在官网修改初始化，只能自己动手了。和上一条一样，在<code>/themes/matery/layout/_partial/footer.ejs</code>文件最后加上：</p>\n<pre><code class=\"js\">&lt;script&gt;\n    $(document).ready(function () {\n\n        var int = setInterval(fixCount, 50);  // 50ms周期检测函数\n        var pvcountOffset = 80000;  // 初始化首次数据\n        var uvcountOffset = 20000;\n\n        function fixCount() {\n            if (document.getElementById(&quot;busuanzi_container_site_pv&quot;).style.display != &quot;none&quot;) {\n                $(&quot;#busuanzi_value_site_pv&quot;).html(parseInt($(&quot;#busuanzi_value_site_pv&quot;).html()) + pvcountOffset);\n                clearInterval(int);\n            }\n            if ($(&quot;#busuanzi_container_site_pv&quot;).css(&quot;display&quot;) != &quot;none&quot;) {\n                $(&quot;#busuanzi_value_site_uv&quot;).html(parseInt($(&quot;#busuanzi_value_site_uv&quot;).html()) + uvcountOffset); // 加上初始数据 \n                clearInterval(int); // 停止检测\n            }\n        }\n    });\n&lt;/script&gt;</code></pre>\n<p>然后把上面几行有段代码：</p>\n<pre><code class=\"html\">&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) { %&gt;\n    &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;\n        &lt;i class=&quot;fa fa-heart-o&quot;&gt;&lt;/i&gt;\n        本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt;\n    &lt;/span&gt;\n&lt;% } %&gt;\n&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) { %&gt;\n    &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;\n        人次,&amp;nbsp;访客数 &lt;span id=&quot;busuanzi_value_site_uv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; 人.\n    &lt;/span&gt;\n&lt;% } %&gt;</code></pre>\n<p>修改为：</p>\n<pre><code class=\"html\">&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) { %&gt;\n    &lt;span id=&quot;busuanzi_container_site_pv&quot; style=&#39;display:none&#39;&gt;\n        &lt;i class=&quot;fa fa-heart-o&quot;&gt;&lt;/i&gt;\n        本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt;\n    &lt;/span&gt;\n&lt;% } %&gt;\n&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) { %&gt;\n    &lt;span id=&quot;busuanzi_container_site_uv&quot; style=&#39;display:none&#39;&gt;\n        人次,&amp;nbsp;访客数 &lt;span id=&quot;busuanzi_value_site_uv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; 人.\n    &lt;/span&gt;\n&lt;% } %&gt;</code></pre>\n<p>其实就是增加了两个<code>style=&#39;display:none&#39;</code>而已。</p>\n<h2 id=\"添加动漫人物\"><a href=\"#添加动漫人物\" class=\"headerlink\" title=\"添加动漫人物\"></a>添加动漫人物</h2><p>其实三步就行了，不用像网上有些教程那么复杂。</p>\n<p><strong>第一步：</strong></p>\n<pre><code>npm install --save hexo-helper-live2d</code></pre><p><strong>第二步：</strong></p>\n<pre><code>npm install live2d-widget-model-shizuku</code></pre><p><strong>第三步：</strong><br>在根目录配置文件中添加如下代码：</p>\n<pre><code>live2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  log: false\n  model:\n    use: live2d-widget-model-shizuku\n  display:\n    position: right\n    width: 150\n    height: 300\n  mobile:\n    show: true\n  react:\n    opacity: 0.7</code></pre><p>然后<code>hexo g</code>再<code>hexo s</code>就能预览出效果了，但是有个注意的地方，我发现<strong>这个动漫人物最好不要和不蒜子同时使用</strong>，不然不蒜子会显示不出来。</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><hr>\n<p>去年9月的时候开始搭建了第一个自己的独立博客，到现在也稍微像模像样了。很多小伙伴应该也想过搭建一个自己的博客，网上也有一堆详细教程。我在此稍稍总结一下具体的搭建步骤，另外网上很少有修改博客源码的个性化教程，我就稍稍分享一下我的一些修改经验，更多的个性化操作需要你自己以后去摸索。</p>\n<p>具体效果可以参观我的博客：<a href=\"http://godweiyang.com\" target=\"_blank\" rel=\"noopener\">godweiyang.com</a>，欢迎大家支持。</p>\n<p>我不是一个前端程序员，有些东西不是很了解，说的不好大家见谅。</p>\n<p>首先要了解一下我们搭建博客要用到的框架。Hexo是高效的静态站点生成框架，它基于Node.js。通过Hexo，你可以直接使用Markdown语法来撰写博客。相信很多小伙伴写工程都写过README.md文件吧，对，就是这个格式的！写完后只需两三条命令即可将生成的网页上传到你的github上，然后别人就可以看到你的网页啦。是不是很简单？你无需关心网页源代码的具体细节，你只需要用心写好你的博客内容就行。</p>\n<h1 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h1><hr>\n<p>首先下载稳定版<a href=\"https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi\" target=\"_blank\" rel=\"noopener\">Node.js</a>，我这里给的是64位的。</p>\n<p>安装选项全部默认，一路点击<code>Next</code>。</p>\n<p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p>\n<h2 id=\"添加国内镜像源\"><a href=\"#添加国内镜像源\" class=\"headerlink\" title=\"添加国内镜像源\"></a>添加国内镜像源</h2><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。</p>\n<pre><code class=\"bash\">npm config set registry https://registry.npm.taobao.org</code></pre>\n<h1 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h1><hr>\n<p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————Git<a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">[下载地址]</a>。</p>\n<p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p>\n<p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p>\n<h1 id=\"注册Github账号\"><a href=\"#注册Github账号\" class=\"headerlink\" title=\"注册Github账号\"></a>注册Github账号</h1><hr>\n<p>接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。</p>\n<p>打开<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a>，新建一个项目，如下所示：<br><img src=\"1.jpg\" alt><br>然后如下图所示，输入自己的项目名字，后面一定要加<code>.github.io</code>后缀，README初始化也要勾上。<br><img src=\"2.jpg\" alt><br>然后项目就建成了，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>，会变成下面这样：<br><img src=\"3.jpg\" alt><br>点击那个链接，就会出现自己的网页啦，效果如下：<br><img src=\"4.jpg\" alt></p>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><hr>\n<p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在<code>D:\\study\\program\\blog</code>目录下。</p>\n<p>在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。</p>\n<p>定位到该目录下，输入<code>npm i hexo-cli -g</code>安装Hexo。会有几个报错，无视它就行。</p>\n<p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p>\n<p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。</p>\n<p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a>，就可以看到我们的博客啦，效果如下：<br><img src=\"5.jpg\" alt></p>\n<p>按<code>ctrl+c</code>关闭本地服务器。</p>\n<h1 id=\"连接Github与本地\"><a href=\"#连接Github与本地\" class=\"headerlink\" title=\"连接Github与本地\"></a>连接Github与本地</h1><hr>\n<p>首先右键打开git bash，然后输入下面命令：</p>\n<pre><code>git config --global user.name &quot;godweiyang&quot;\ngit config --global user.email &quot;792321264@qq.com&quot;</code></pre><p>用户名和邮箱根据你注册github的信息自行修改。</p>\n<p>然后生成密钥SSH key：</p>\n<pre><code>ssh-keygen -t rsa -C &quot;792321264@qq.com&quot;</code></pre><p>打开<a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便。</p>\n<p>git bash中输入</p>\n<pre><code class=\"bash\">cat ~/.ssh/id_rsa.pub</code></pre>\n<p>将输出的内容复制到框中，点击确定保存。</p>\n<p>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。<br><img src=\"6.jpg\" alt></p>\n<p>打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p>\n<p>修改最后一行的配置：</p>\n<pre><code>deploy:\n  type: git\n  repository: https://github.com/godweiyang/godweiyang.github.io\n  branch: master</code></pre><p>repository修改为你自己的github项目地址。<strong>不过你这里看到的可能与我有点不一样，因为我已经修改过主题了，所以这一步先不用管，换完主题之后记得回来修改！</strong></p>\n<h1 id=\"写文章、发布文章\"><a href=\"#写文章、发布文章\" class=\"headerlink\" title=\"写文章、发布文章\"></a>写文章、发布文章</h1><hr>\n<p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。</p>\n<p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p>\n<p>然后打开<code>D:\\study\\program\\blog\\source\\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p>\n<p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p>\n<h1 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h1><hr>\n<p>现在默认的域名还是<code>xxx.github.io</code>，是不是很没有牌面？想不想也像我一样弄一个专属域名呢，首先你得购买一个域名，xx云都能买，看你个人喜好了。</p>\n<p>以我的百度云为例，如下图所示，添加两条解析记录：<br><img src=\"7.jpg\" alt></p>\n<p>然后打开你的github博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存：<br><img src=\"8.jpg\" alt></p>\n<p>这时候你的项目根目录应该会出现一个名为<code>CNAME</code>的文件了。如果没有的话，打开你本地博客<code>/source</code>目录，我的是<code>D:\\study\\program\\blog\\source</code>，新建<code>CNAME</code>文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行<code>hexo g</code>、<code>hexo d</code>上传到github。</p>\n<h1 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h1><hr>\n<p>网上大多数主题都是github排名第一的<code>Next</code>主题，但是我个人不是很喜欢，我更喜欢<code>beantech</code>主题，地址在<a href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<p>首先要注意的是，<strong>这个github项目不仅包含了主题文件，还包含了hexo的各种文件</strong>。</p>\n<p>所以首先下载下来这个项目，然后推荐将下图所有文件全部替换你原本博客根目录下的文件：<br><img src=\"9.jpg\" alt></p>\n<p>当然一般的主题和这个主题有点不一样，只含有主题文件夹，所以把整个文件夹丢到<code>theme</code>下就行了。</p>\n<p>然后运行<code>hexo clean</code>清空所有生成的网页缓存，<code>hexo g</code>、<code>hexo d</code>。这时候新的主题网页就生成好了，博客根目录的情况应该大致如下：<br><img src=\"10.jpg\" alt></p>\n<h1 id=\"博客目录构成介绍\"><a href=\"#博客目录构成介绍\" class=\"headerlink\" title=\"博客目录构成介绍\"></a>博客目录构成介绍</h1><hr>\n<p>从上图可以看出，博客的目录结构如下：</p>\n<pre><code>- node_modules\n- public\n- scaffolds\n- source\n    - _posts\n    - about\n    - archive\n    - img\n    - tags\n- themes</code></pre><p><code>node_modules</code>是node.js各种库的目录，<code>public</code>是生成的网页文件目录，<code>scaffolds</code>里面就三个文件，存储着新文章和新页面的初始设置，<code>source</code>是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，<code>themes</code>存放着主题文件，一般也用不到。</p>\n<p>我们平时写文章只需要关注<code>source/_posts</code>这个文件夹就行了。</p>\n<h1 id=\"个性化设置及bug处理\"><a href=\"#个性化设置及bug处理\" class=\"headerlink\" title=\"个性化设置及bug处理\"></a>个性化设置及bug处理</h1><hr>\n<p><strong>首先打开<code>_config.yml</code>，根据自己需求配置，具体不说了，有注释。</strong></p>\n<h2 id=\"修复文档分类bug\"><a href=\"#修复文档分类bug\" class=\"headerlink\" title=\"修复文档分类bug\"></a>修复文档分类bug</h2><p>这个主题文档分类功能有个bug，一直没有得到解决，直到最近，我才发现是源文件的单词拼错了。。。</p>\n<p>打开<code>D:\\study\\program\\blog\\scaffolds\\post.md</code>，单词<code>catagories</code>改为<code>categories</code>。</p>\n<h2 id=\"添加畅言评论插件\"><a href=\"#添加畅言评论插件\" class=\"headerlink\" title=\"添加畅言评论插件\"></a>添加畅言评论插件</h2><p>主题自带了多说评论插件，但是多说已经关闭了，所以我换成了畅言评论插件。</p>\n<p>首先你得注册一个畅言账号，<a href=\"http://changyan.kuaizhan.com/\" target=\"_blank\" rel=\"noopener\">地址</a>。<br>然后打开如下页面，复制该段代码：<br><img src=\"11.jpg\" alt><br>打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs</code>，将代码粘贴到如下位置：<br><img src=\"12.jpg\" alt><br>然后重新生成一下网页，可以看到效果图如下：<br><img src=\"13.jpg\" alt><br>更多插件例如热评话题之类的，可以自行在畅言后台找到代码添加。</p>\n<h2 id=\"添加图片放大功能\"><a href=\"#添加图片放大功能\" class=\"headerlink\" title=\"添加图片放大功能\"></a>添加图片放大功能</h2><p>首先下载<code>zooming.js</code>文件<a href=\"https://github.com/godweiyang/godweiyang.github.io/blob/master/js/zooming.js\" target=\"_blank\" rel=\"noopener\">地址</a>，保存在<code>D:\\study\\program\\blog\\themes\\beantech\\source\\js</code>目录下。</p>\n<p>打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs</code>，在最下方粘贴如下代码：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/zooming.js&quot;&gt;&lt;/script&gt;</code></pre><p>然后文章里的图片就可以单击全屏啦。</p>\n<h2 id=\"添加数学公式显示\"><a href=\"#添加数学公式显示\" class=\"headerlink\" title=\"添加数学公式显示\"></a>添加数学公式显示</h2><p>打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\post.ejs</code>，在最下方粘贴如下代码：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;</code></pre><p>由于markdown语法与mathjax语法存在冲突，所以还需要修改源文件。</p>\n<p>打开<code>D:\\study\\program\\blog\\node_modules\\marked\\lib\\marked.js</code><br><code>escape:</code>处替换成：</p>\n<pre><code>escape: /^$[`*\\[\\]()#$+\\-.!_&gt;])/</code></pre><p><code>em:</code>处替换成：</p>\n<pre><code>em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/</code></pre><p>这时在文章里写数学公式基本没有问题了，但是要注意：<br><strong>数学公式中如果出现了连续两个{，中间一定要加空格！</strong></p>\n<p>举个例子:<br>行内公式：$y = f(x)$<br>代码：</p>\n<pre><code>$y = f(x)$</code></pre><p>行间公式：<br>\\[y = {f_{ {g_1}}}(x)\\]<br>代码：</p>\n<pre><code>\\\\[y = {f_{ {g_1}}}(x)\\\\]</code></pre><p><strong>注意上面花括号之间有空格！</strong></p>\n<h2 id=\"添加留言板\"><a href=\"#添加留言板\" class=\"headerlink\" title=\"添加留言板\"></a>添加留言板</h2><p>在<code>D:\\study\\program\\blog\\themes\\beantech\\layout</code>中新建<code>bbs.ejs</code>，文件内容如下：</p>\n<pre><code>---\nlayout: page\n---\n&lt;style type=&quot;text/css&quot;&gt;\n    header.intro-header{\n        background-position: right; \n    }\n&lt;/style&gt;\n&lt;!-- Chinese Version --&gt;\n&lt;div class=&quot;zh post-container&quot;&gt;\n    &lt;%- page.content %&gt;\n&lt;/div&gt;</code></pre><p>然后在<code>D:\\study\\program\\blog\\source</code>中新建<code>\\bbs</code>文件夹，里面在新建<code>index.md</code>文件，内容如下：</p>\n<pre><code>---\nlayout: &quot;bbs&quot;\ntitle: &quot;BBS&quot;\ndate: 2017-09-19 12:48:33\ndescription: &quot;欢迎交换友链，一起交流学习！&quot;\nheader-img: &quot;img/header_img/home-bg-2-dark.png&quot;\ncomments: true\n---\n此处替换为你的畅言评论代码~~~</code></pre><h2 id=\"添加置顶功能\"><a href=\"#添加置顶功能\" class=\"headerlink\" title=\"添加置顶功能\"></a>添加置顶功能</h2><p>运行如下两条命令安装置顶插件：</p>\n<pre><code>npm uninstall hexo-generator-index --save\nnpm install hexo-generator-index-pin-top --save</code></pre><p>然后打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\index.ejs</code>，在如下位置添加代码：<br><img src=\"14.jpg\" alt></p>\n<pre><code>&lt;% if (post.top) {%>\n    <i class=\"fa fa-thumb-tack\"></i>\n    <font color=\"7D26CD\">置顶</font>\n    <span class=\"post-meta-divider\">|</span>\n<%}%&gt;< code></%}%&gt;<></code></pre><p>然后在你想置顶的文章md文件里，添加如下配置选项：</p>\n<pre><code>top: true</code></pre><h2 id=\"添加网易云音乐BGM\"><a href=\"#添加网易云音乐BGM\" class=\"headerlink\" title=\"添加网易云音乐BGM\"></a>添加网易云音乐BGM</h2><p>写文章的时候，想插入一段BGM怎么办？</p>\n<p>首先打开网易云网页版，找到想听的歌曲，然后点击生成外链：<br><img src=\"15.jpg\" alt><br>复制如下代码：<br><img src=\"16.jpg\" alt></p>\n<p>粘贴到文章里就行了，为了美观，设置一下居中，具体代码如下：</p>\n<pre><code>&lt;div align=&quot;middle&quot;&gt;这里粘贴刚刚复制的代码&lt;/div&gt;</code></pre><h2 id=\"添加访客人数统计和字数统计\"><a href=\"#添加访客人数统计和字数统计\" class=\"headerlink\" title=\"添加访客人数统计和字数统计\"></a>添加访客人数统计和字数统计</h2><p>我们使用一个国外的流量统计网站：<a href=\"gostats.com\">gostats.com</a>，首先注册一下。</p>\n<p>然后自己添加网站地址，过程就不详细说了，然后点击<code>Get counter code</code>，选择一个自己喜欢的风格。<br>如下图所示，选择一个样式，选择<code>HTML</code>，生成代码：<br><img src=\"17.jpg\" alt></p>\n<p>复制这段代码到<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\_partial\\footer.ejs</code>，具体位置如下：<br><img src=\"18.jpg\" alt><br>默认的代码和我图中不一样，因为我不想点击图片跳转到它统计网站的链接，可以模仿我的自行修改。</p>\n<p>字数统计首先安装插件</p>\n<pre><code>npm i --save hexo-wordcount</code></pre><p>然后打开<code>D:\\study\\program\\blog\\themes\\beantech\\layout\\_partial\\footer.ejs</code>，添加如下代码：</p>\n<pre><code>&lt;span class=&quot;post-count&quot;&gt;&lt;%= totalcount(site) %&gt; words altogether&lt;/span&gt;</code></pre><p>具体位置见上图。</p>\n<h1 id=\"一些注意事项\"><a href=\"#一些注意事项\" class=\"headerlink\" title=\"一些注意事项\"></a>一些注意事项</h1><hr>\n<p>首先解释一下文章开头的配置，如下图所示：<br><img src=\"19.jpg\" alt></p>\n<pre><code>title: 文章标题\ncatalog: 是否显示段落目录\ndate: 文章日期\nsubtitle: 子标题\nheader-img: 顶部背景图片\ntop: 是否置顶\ntags: 标签\ncategories: 分类</code></pre><p>网站图片都保存在<code>D:\\study\\program\\blog\\source\\img</code>目录下，可以修改成自己的图片。</p>\n<p>如果换一台电脑想迁移博客的话，最简单的方法就是把博客整个目录拷贝过去，就是这么暴力。</p>\n<p><strong>其他还有什么问题的话等我想起来了再继续添加，如果遇到问题欢迎联系我。</strong></p>\n"}],"PostAsset":[{"_id":"source/_posts/sublime/sublime.png","slug":"sublime.png","post":"cjyyqfjio00087cah26ibdbgt","modified":0,"renderable":0},{"_id":"source/_posts/latex-pdf/4.jpg","slug":"4.jpg","post":"cjyyqfjiu00097cahb54av6ig","modified":0,"renderable":0},{"_id":"source/_posts/sublime/header.jpg","slug":"header.jpg","post":"cjyyqfjio00087cah26ibdbgt","modified":0,"renderable":0},{"_id":"source/_posts/ecnu-ppt/header.jpg","slug":"header.jpg","post":"cjyyqfjil00077caheye30ew9","modified":0,"renderable":0},{"_id":"source/_posts/ecnu-ppt/1.png","slug":"1.png","post":"cjyyqfjil00077caheye30ew9","modified":0,"renderable":0},{"_id":"source/_posts/algorithm-code-tricks/3337-1.jpg","slug":"3337-1.jpg","post":"cjyyqfji900027cah5enm1zum","modified":0,"renderable":0},{"_id":"source/_posts/algorithm-code-tricks/3337-2.jpg","slug":"3337-2.jpg","post":"cjyyqfji900027cah5enm1zum","modified":0,"renderable":0},{"_id":"source/_posts/algorithm-code-tricks/header.jpg","slug":"header.jpg","post":"cjyyqfji900027cah5enm1zum","modified":0,"renderable":0},{"_id":"source/_posts/wordcloud/1.png","slug":"1.png","post":"cjyyqfjiz000c7cahffspcd1e","modified":0,"renderable":0},{"_id":"source/_posts/wordcloud/2.jpg","slug":"2.jpg","post":"cjyyqfjiz000c7cahffspcd1e","modified":0,"renderable":0},{"_id":"source/_posts/wordcloud/3.jpg","slug":"3.jpg","post":"cjyyqfjiz000c7cahffspcd1e","modified":0,"renderable":0},{"_id":"source/_posts/wordcloud/4.jpg","slug":"4.jpg","post":"cjyyqfjiz000c7cahffspcd1e","modified":0,"renderable":0},{"_id":"source/_posts/wordcloud/5.jpg","slug":"5.jpg","post":"cjyyqfjiz000c7cahffspcd1e","modified":0,"renderable":0},{"_id":"source/_posts/latex-pdf/1.jpg","slug":"1.jpg","post":"cjyyqfjiu00097cahb54av6ig","modified":0,"renderable":0},{"_id":"source/_posts/latex-pdf/2.jpg","slug":"2.jpg","post":"cjyyqfjiu00097cahb54av6ig","modified":0,"renderable":0},{"_id":"source/_posts/latex-pdf/3.jpg","slug":"3.jpg","post":"cjyyqfjiu00097cahb54av6ig","modified":0,"renderable":0},{"_id":"source/_posts/latex-pdf/5.jpg","slug":"5.jpg","post":"cjyyqfjiu00097cahb54av6ig","modified":0,"renderable":0},{"_id":"source/_posts/latex-pdf/header.jpg","slug":"header.jpg","post":"cjyyqfjiu00097cahb54av6ig","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/bi_lstm.jpg","slug":"bi_lstm.jpg","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/binarized_syntactic_tree.png","slug":"binarized_syntactic_tree.png","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/bottom_up.jpg","slug":"bottom_up.jpg","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/bottom_up_example.jpg","slug":"bottom_up_example.jpg","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/chart_based.png","slug":"chart_based.png","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/composition.png","slug":"composition.png","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/header.jpg","slug":"header.jpg","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/in_order.jpg","slug":"in_order.jpg","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/in_order_example.jpg","slug":"in_order_example.jpg","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/label_oracle.png","slug":"label_oracle.png","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/multi_headed_attention.jpg","slug":"multi_headed_attention.jpg","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/results.jpg","slug":"results.jpg","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/single_attention.jpg","slug":"single_attention.jpg","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/span_based_bottom_up.png","slug":"span_based_bottom_up.png","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/span_based_bottom_up_example.png","slug":"span_based_bottom_up_example.png","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/span_based_bottom_up_tree.png","slug":"span_based_bottom_up_tree.png","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/structural_oracle.png","slug":"structural_oracle.png","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/syntactic_distance_example.jpg","slug":"syntactic_distance_example.jpg","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/syntactic_tree.png","slug":"syntactic_tree.png","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/top_down.jpg","slug":"top_down.jpg","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/top_down_example.jpg","slug":"top_down_example.jpg","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/constituent-parsing-summary/transition_framework.png","slug":"transition_framework.png","post":"cjyyqfjig00047cahh3ox8cf6","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/1.jpg","slug":"1.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/10.jpg","slug":"10.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/11.jpg","slug":"11.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/12.jpg","slug":"12.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/13.jpg","slug":"13.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/14.jpg","slug":"14.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/15.jpg","slug":"15.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/16.jpg","slug":"16.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/17.jpg","slug":"17.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/18.jpg","slug":"18.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/19.jpg","slug":"19.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/2.jpg","slug":"2.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/20.jpg","slug":"20.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/21.jpg","slug":"21.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/3.jpg","slug":"3.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/4.jpg","slug":"4.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/5.jpg","slug":"5.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/6.jpg","slug":"6.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/7.jpg","slug":"7.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/8.jpg","slug":"8.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/9.jpg","slug":"9.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0},{"_id":"source/_posts/hexo-blog/header.jpg","slug":"header.jpg","post":"cjyyqfjj1000d7cahhmgvnez0","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjyyqfji900027cah5enm1zum","category_id":"cjyyqfjii00057cahyhao598n","_id":"cjyyqfjj2000e7cahsncp8b0y"},{"post_id":"cjyyqfjig00047cahh3ox8cf6","category_id":"cjyyqfjiv000a7cah1ran7l54","_id":"cjyyqfjj4000j7cahsk13oy8d"},{"post_id":"cjyyqfjil00077caheye30ew9","category_id":"cjyyqfjj3000f7cahmf0mi4qw","_id":"cjyyqfjj7000m7cahfvx3gx13"},{"post_id":"cjyyqfjio00087cah26ibdbgt","category_id":"cjyyqfjj5000k7cahccren189","_id":"cjyyqfjja000q7cahgjr57lfk"},{"post_id":"cjyyqfjiu00097cahb54av6ig","category_id":"cjyyqfjj5000k7cahccren189","_id":"cjyyqfjjb000t7cah2wwoqdfa"},{"post_id":"cjyyqfjiz000c7cahffspcd1e","category_id":"cjyyqfjj5000k7cahccren189","_id":"cjyyqfjjd000w7cahnqvj4e7c"},{"post_id":"cjyyqfjj1000d7cahhmgvnez0","category_id":"cjyyqfjj5000k7cahccren189","_id":"cjyyqfjje00107cahac4sdee1"}],"PostTag":[{"post_id":"cjyyqfji900027cah5enm1zum","tag_id":"cjyyqfjil00067cah35p318zs","_id":"cjyyqfjj4000h7cahb4tre8ou"},{"post_id":"cjyyqfji900027cah5enm1zum","tag_id":"cjyyqfjiw000b7cahve33qrdt","_id":"cjyyqfjj4000i7cah2netex4p"},{"post_id":"cjyyqfjig00047cahh3ox8cf6","tag_id":"cjyyqfjj3000g7cahtxs8gopo","_id":"cjyyqfjjd000v7cah4zuihguq"},{"post_id":"cjyyqfjig00047cahh3ox8cf6","tag_id":"cjyyqfjj5000l7cahqxtu2d6m","_id":"cjyyqfjjd000x7cah0h95cjew"},{"post_id":"cjyyqfjig00047cahh3ox8cf6","tag_id":"cjyyqfjj8000o7cah2ru74w94","_id":"cjyyqfjje000z7cahta1s4eew"},{"post_id":"cjyyqfjig00047cahh3ox8cf6","tag_id":"cjyyqfjja000r7cahutjd1u43","_id":"cjyyqfjje00117cahzphumd0t"},{"post_id":"cjyyqfjil00077caheye30ew9","tag_id":"cjyyqfjjc000u7cah9wcwogon","_id":"cjyyqfjjg00147cahf12j1x7f"},{"post_id":"cjyyqfjil00077caheye30ew9","tag_id":"cjyyqfjjd000y7cahrmvealo3","_id":"cjyyqfjjg00157cahofy71suz"},{"post_id":"cjyyqfjil00077caheye30ew9","tag_id":"cjyyqfjjf00127cahhg571j9m","_id":"cjyyqfjjh00177cah6o82wjnl"},{"post_id":"cjyyqfjio00087cah26ibdbgt","tag_id":"cjyyqfjjg00137cahmzhmazgr","_id":"cjyyqfjjh00187cahnrp82q3j"},{"post_id":"cjyyqfjiu00097cahb54av6ig","tag_id":"cjyyqfjjc000u7cah9wcwogon","_id":"cjyyqfjji001a7cahq80xd7sk"},{"post_id":"cjyyqfjiz000c7cahffspcd1e","tag_id":"cjyyqfjji00197cahzfflloek","_id":"cjyyqfjjj001d7cahkllk18s8"},{"post_id":"cjyyqfjiz000c7cahffspcd1e","tag_id":"cjyyqfjji001b7cahzn1xnwzt","_id":"cjyyqfjjj001e7cah1hbkkrph"},{"post_id":"cjyyqfjj1000d7cahhmgvnez0","tag_id":"cjyyqfjjj001c7cahcs5j1tp9","_id":"cjyyqfjjk001h7cahdksexlad"},{"post_id":"cjyyqfjj1000d7cahhmgvnez0","tag_id":"cjyyqfjjj001f7cahxz6bv1ec","_id":"cjyyqfjjk001i7cahcxvkdacj"},{"post_id":"cjyyqfjj1000d7cahhmgvnez0","tag_id":"cjyyqfjjk001g7cahb8ymb6ta","_id":"cjyyqfjjk001j7cahpg08v85m"}],"Tag":[{"name":"算法","_id":"cjyyqfjil00067cah35p318zs"},{"name":"机试","_id":"cjyyqfjiw000b7cahve33qrdt"},{"name":"NLP","_id":"cjyyqfjj3000g7cahtxs8gopo"},{"name":"神经网络","_id":"cjyyqfjj5000l7cahqxtu2d6m"},{"name":"深度学习","_id":"cjyyqfjj8000o7cah2ru74w94"},{"name":"句法分析","_id":"cjyyqfjja000r7cahutjd1u43"},{"name":"LaTeX","_id":"cjyyqfjjc000u7cah9wcwogon"},{"name":"Beamer","_id":"cjyyqfjjd000y7cahrmvealo3"},{"name":"ppt","_id":"cjyyqfjjf00127cahhg571j9m"},{"name":"Sublime","_id":"cjyyqfjjg00137cahmzhmazgr"},{"name":"词云","_id":"cjyyqfjji00197cahzfflloek"},{"name":"自然语言处理","_id":"cjyyqfjji001b7cahzn1xnwzt"},{"name":"Hexo","_id":"cjyyqfjjj001c7cahcs5j1tp9"},{"name":"Github","_id":"cjyyqfjjj001f7cahxz6bv1ec"},{"name":"博客","_id":"cjyyqfjjk001g7cahb8ymb6ta"}]}}